{"version":3,"file":"js/109.a97beec6.js","mappings":"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","sources":["webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/index.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/lib/ParserStream.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/index.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/BlankNode.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/DataFactory.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/DefaultGraph.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/Literal.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/NamedNode.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/Quad.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/Variable.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-jsonld/node_modules/@rdfjs/data-model/lib/fromTerm.js","webpack://rapid-triples/./node_modules/@rdfjs/sink/index.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/index.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/ContextTree.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/JsonLdParser.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/ParsingContext.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/Util.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js","webpack://rapid-triples/./node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js","webpack://rapid-triples/./node_modules/jsonparse/jsonparse.js"],"sourcesContent":["const Sink = require('@rdfjs/sink')\nconst ParserStream = require('./lib/ParserStream')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const rdf = require('@rdfjs/data-model')\nconst { JsonLdParser } = require('jsonld-streaming-parser')\nconst { Transform } = require('readable-stream')\n\nconst relativeIriProtocol = 'null:'\n\nfunction termCleanup (factory) {\n  return term => {\n    if (term.termType !== 'NamedNode') {\n      return null\n    }\n\n    if (!term.value.startsWith(relativeIriProtocol)) {\n      return null\n    }\n\n    // remove dummy protocol workaround for relative IRIs\n    return factory.namedNode(term.value.slice(relativeIriProtocol.length))\n  }\n}\n\nfunction quadCleanup (factory) {\n  const cleanup = termCleanup(factory)\n\n  return quad => {\n    const subject = cleanup(quad.subject)\n    const predicate = cleanup(quad.predicate)\n    const object = cleanup(quad.object)\n    const graph = cleanup(quad.graph)\n\n    if (subject || predicate || object || graph) {\n      return factory.quad(\n        subject || quad.subject,\n        predicate || quad.predicate,\n        object || quad.object,\n        graph || quad.graph\n      )\n    }\n\n    return quad\n  }\n}\n\nclass ParserStream {\n  constructor (input, { baseIRI = relativeIriProtocol, context = null, factory = rdf } = {}) {\n    const parser = new JsonLdParser({\n      baseIRI,\n      context,\n      dataFactory: factory,\n      streamingProfile: false\n    })\n\n    input.pipe(parser)\n\n    const cleanup = quadCleanup(factory)\n\n    const transform = new Transform({\n      objectMode: true,\n      transform: (quad, encoding, callback) => {\n        callback(null, cleanup(quad))\n      }\n    })\n\n    parser.on('context', context => {\n      Object.entries(context).forEach(([prefix, iri]) => {\n        transform.emit('prefix', prefix, factory.namedNode(iri))\n      })\n    })\n    parser.on('error', err => transform.destroy(err))\n    parser.pipe(transform)\n\n    return transform\n  }\n}\n\nmodule.exports = ParserStream\n","const DataFactory = require('./lib/DataFactory.js')\n\nmodule.exports = DataFactory\n","class BlankNode {\n  constructor (id) {\n    this.value = id || ('b' + (++BlankNode.nextId))\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nBlankNode.prototype.termType = 'BlankNode'\n\nBlankNode.nextId = 0\n\nmodule.exports = BlankNode\n","const BlankNode = require('./BlankNode.js')\nconst DefaultGraph = require('./DefaultGraph.js')\nconst fromTermRaw = require('./fromTerm.js')\nconst Literal = require('./Literal.js')\nconst NamedNode = require('./NamedNode.js')\nconst Quad = require('./Quad.js')\nconst Variable = require('./Variable.js')\n\nfunction namedNode (value) {\n  return new NamedNode(value)\n}\n\nfunction blankNode (value) {\n  return new BlankNode(value)\n}\n\nfunction literal (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nfunction variable (value) {\n  return new Variable(value)\n}\n\nfunction defaultGraph () {\n  return DataFactory.defaultGraphInstance\n}\n\nfunction triple (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nfunction quad (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nfunction fromTerm (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nfunction fromQuad (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n}\n\nmodule.exports = DataFactory\n","class DefaultGraph {\n  equals (other) {\n    return !!other && other.termType === this.termType\n  }\n}\n\nDefaultGraph.prototype.termType = 'DefaultGraph'\nDefaultGraph.prototype.value = ''\n\nmodule.exports = DefaultGraph\n","const NamedNode = require('./NamedNode.js')\n\nclass Literal {\n  constructor (value, language, datatype) {\n    this.value = value\n    this.datatype = Literal.stringDatatype\n    this.language = ''\n\n    if (language) {\n      this.language = language\n      this.datatype = Literal.langStringDatatype\n    } else if (datatype) {\n      this.datatype = datatype\n    }\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value &&\n      other.language === this.language && other.datatype.equals(this.datatype)\n  }\n}\n\nLiteral.prototype.termType = 'Literal'\n\nLiteral.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')\nLiteral.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')\n\nmodule.exports = Literal\n","class NamedNode {\n  constructor (iri) {\n    this.value = iri\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nNamedNode.prototype.termType = 'NamedNode'\n\nmodule.exports = NamedNode\n","const DefaultGraph = require('./DefaultGraph.js')\n\nclass Quad {\n  constructor (subject, predicate, object, graph) {\n    this.subject = subject\n    this.predicate = predicate\n    this.object = object\n\n    if (graph) {\n      this.graph = graph\n    } else {\n      this.graph = new DefaultGraph()\n    }\n  }\n\n  equals (other) {\n    // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n    return !!other && (other.termType === 'Quad' || !other.termType) &&\n      other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&\n      other.object.equals(this.object) && other.graph.equals(this.graph)\n  }\n}\n\nQuad.prototype.termType = 'Quad'\nQuad.prototype.value = ''\n\nmodule.exports = Quad\n","class Variable {\n  constructor (name) {\n    this.value = name\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nVariable.prototype.termType = 'Variable'\n\nmodule.exports = Variable\n","function fromTerm (original) {\n  if (!original) {\n    return null\n  }\n\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value)\n  }\n\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph()\n  }\n\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))\n  }\n\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value)\n  }\n\n  if (original.termType === 'Quad') {\n    const subject = this.fromTerm(original.subject)\n    const predicate = this.fromTerm(original.predicate)\n    const object = this.fromTerm(original.object)\n    const graph = this.fromTerm(original.graph)\n\n    return this.quad(subject, predicate, object, graph)\n  }\n\n  if (original.termType === 'Variable') {\n    return this.variable(original.value)\n  }\n\n  throw new Error(`unknown termType ${original.termType}`)\n}\n\nmodule.exports = fromTerm\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/JsonLdParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nclass ContextTree {\n    constructor() {\n        this.subTrees = {};\n    }\n    getContext(keys) {\n        if (keys.length > 0) {\n            const [head, ...tail] = keys;\n            const subTree = this.subTrees[head];\n            if (subTree) {\n                const subContext = subTree.getContext(tail);\n                if (subContext) {\n                    return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n                }\n            }\n        }\n        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n    }\n    setContext(keys, context) {\n        if (keys.length === 0) {\n            this.context = context;\n        }\n        else {\n            const [head, ...tail] = keys;\n            let subTree = this.subTrees[head];\n            if (!subTree) {\n                subTree = this.subTrees[head] = new ContextTree();\n            }\n            subTree.setContext(tail, context);\n        }\n    }\n    removeContext(path) {\n        this.setContext(path, null);\n    }\n}\nexports.ContextTree = ContextTree;\n//# sourceMappingURL=ContextTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdParser = void 0;\n// tslint:disable-next-line:no-var-requires\nconst Parser = require('jsonparse');\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst stream_1 = require(\"stream\");\nconst EntryHandlerArrayValue_1 = require(\"./entryhandler/EntryHandlerArrayValue\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\nconst EntryHandlerInvalidFallback_1 = require(\"./entryhandler/EntryHandlerInvalidFallback\");\nconst EntryHandlerPredicate_1 = require(\"./entryhandler/EntryHandlerPredicate\");\nconst EntryHandlerKeywordContext_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordContext\");\nconst EntryHandlerKeywordGraph_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordGraph\");\nconst EntryHandlerKeywordId_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordId\");\nconst EntryHandlerKeywordIncluded_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordIncluded\");\nconst EntryHandlerKeywordNest_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordNest\");\nconst EntryHandlerKeywordType_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordType\");\nconst EntryHandlerKeywordUnknownFallback_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordUnknownFallback\");\nconst EntryHandlerKeywordValue_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordValue\");\nconst ParsingContext_1 = require(\"./ParsingContext\");\nconst Util_1 = require(\"./Util\");\nconst http_link_header_1 = require(\"http-link-header\");\n/**\n * A stream transformer that parses JSON-LD (text) streams to an {@link RDF.Stream}.\n */\nclass JsonLdParser extends stream_1.Transform {\n    constructor(options) {\n        super({ readableObjectMode: true });\n        options = options || {};\n        this.options = options;\n        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));\n        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });\n        this.jsonParser = new Parser();\n        this.contextJobs = [];\n        this.typeJobs = [];\n        this.contextAwaitingJobs = [];\n        this.lastDepth = 0;\n        this.lastKeys = [];\n        this.lastOnValueJob = Promise.resolve();\n        this.attachJsonParserListeners();\n        this.on('end', () => {\n            if (typeof this.jsonParser.mode !== 'undefined') {\n                this.emit('error', new Error('Unclosed document'));\n            }\n        });\n    }\n    /**\n     * Construct a JsonLdParser from the given HTTP response.\n     *\n     * This will throw an error if no valid JSON response is received\n     * (application/ld+json, application/json, or something+json).\n     *\n     * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.\n     *\n     * This method is not responsible for handling redirects.\n     *\n     * @param baseIRI The URI of the received response.\n     * @param mediaType The received content type.\n     * @param headers Optional HTTP headers.\n     * @param options Optional parser options.\n     */\n    static fromHttpResponse(baseIRI, mediaType, headers, options) {\n        let context;\n        // Special cases when receiving something else than the JSON-LD media type\n        if (mediaType !== 'application/ld+json') {\n            // Only accept JSON or JSON extension types\n            if (mediaType !== 'application/json' && !mediaType.endsWith('+json')) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n            // We need exactly one JSON-LD context in the link header\n            if (headers && headers.has('Link')) {\n                headers.forEach((value, key) => {\n                    if (key === 'link') {\n                        const linkHeader = http_link_header_1.parse(value);\n                        for (const link of linkHeader.get('rel', 'http://www.w3.org/ns/json-ld#context')) {\n                            if (context) {\n                                throw new jsonld_context_parser_1.ErrorCoded('Multiple JSON-LD context link headers were found on ' + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);\n                            }\n                            context = link.uri;\n                        }\n                    }\n                });\n            }\n            if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        // Check if the streaming profile is present\n        let streamingProfile;\n        if (headers && headers.has('Content-Type')) {\n            const contentType = headers.get('Content-Type');\n            const match = /; *profile=([^\"]*)/.exec(contentType);\n            if (match && match[1] === 'http://www.w3.org/ns/json-ld#streaming') {\n                streamingProfile = true;\n            }\n        }\n        return new JsonLdParser(Object.assign({ baseIRI,\n            context,\n            streamingProfile }, options ? options : {}));\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new JsonLdParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        this.jsonParser.write(chunk);\n        this.lastOnValueJob\n            .then(() => callback(), (error) => callback(error));\n    }\n    /**\n     * Start a new job for parsing the given value.\n     *\n     * This will let the first valid {@link IEntryHandler} handle the entry.\n     *\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        let flushStacks = true;\n        // When we go up the stack, emit all unidentified values\n        // We need to do this before the new job, because the new job may require determined values from the flushed jobs.\n        if (lastDepthCheck && depth < this.lastDepth) {\n            // Check if we had any RDF lists that need to be terminated with an rdf:nil\n            const listPointer = this.parsingContext.listPointerStack[this.lastDepth];\n            if (listPointer) {\n                // Terminate the list if the had at least one value\n                if (listPointer.value) {\n                    this.emit('data', this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));\n                }\n                // Add the list id to the id stack, so it can be used higher up in the stack\n                listPointer.listId.listHead = true;\n                this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];\n                this.parsingContext.listPointerStack.splice(this.lastDepth, 1);\n            }\n            // Flush the buffer for lastDepth\n            // If the parent key is a special type of container, postpone flushing until that parent is handled.\n            if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {\n                this.parsingContext.pendingContainerFlushBuffers\n                    .push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });\n                flushStacks = false;\n            }\n            else {\n                await this.flushBuffer(this.lastDepth, this.lastKeys);\n            }\n        }\n        const key = await this.util.unaliasKeyword(keys[depth], keys, depth);\n        const parentKey = await this.util.unaliasKeywordParent(keys, depth);\n        this.parsingContext.emittedStack[depth] = true;\n        let handleKey = true;\n        // Keywords inside @reverse is not allowed apart from @context\n        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === '@reverse' && key !== '@context') {\n            this.emit('error', new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));\n        }\n        // Skip further processing if one of the parent nodes are invalid.\n        // We use the validationStack to reuse validation results that were produced before with common key stacks.\n        let inProperty = false;\n        if (this.parsingContext.validationStack.length > 1) {\n            inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;\n        }\n        for (let i = Math.max(1, this.parsingContext.validationStack.length - 1); i < keys.length - 1; i++) {\n            const validationResult = this.parsingContext.validationStack[i]\n                || (this.parsingContext.validationStack[i] = await this.validateKey(keys.slice(0, i + 1), i, inProperty));\n            if (!validationResult.valid) {\n                this.parsingContext.emittedStack[depth] = false;\n                handleKey = false;\n                break;\n            }\n            else if (!inProperty && validationResult.property) {\n                inProperty = true;\n            }\n        }\n        // Skip further processing if this node is part of a literal\n        if (this.util.isLiteral(depth)) {\n            handleKey = false;\n        }\n        // Get handler\n        if (handleKey) {\n            for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n                const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys, depth);\n                if (testResult) {\n                    // Pass processing over to the handler\n                    await entryHandler.handle(this.parsingContext, this.util, key, keys, value, depth, testResult);\n                    // Flag that this depth is processed\n                    if (entryHandler.isStackProcessor()) {\n                        this.parsingContext.processingStack[depth] = true;\n                    }\n                    break;\n                }\n            }\n        }\n        // Validate value indexes on the root.\n        if (depth === 0 && Array.isArray(value)) {\n            await this.util.validateValueIndexes(value);\n        }\n        // When we go up the stack, flush the old stack\n        if (flushStacks && depth < this.lastDepth) {\n            // Reset our stacks\n            this.flushStacks(this.lastDepth);\n        }\n        this.lastDepth = depth;\n        this.lastKeys = keys;\n        // Clear the keyword cache at this depth, and everything underneath.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);\n    }\n    /**\n     * Flush the processing stacks at the given depth.\n     * @param {number} depth A depth.\n     */\n    flushStacks(depth) {\n        this.parsingContext.processingStack.splice(depth, 1);\n        this.parsingContext.processingType.splice(depth, 1);\n        this.parsingContext.emittedStack.splice(depth, 1);\n        this.parsingContext.idStack.splice(depth, 1);\n        this.parsingContext.graphStack.splice(depth + 1, 1);\n        this.parsingContext.graphContainerTermStack.splice(depth, 1);\n        this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        this.parsingContext.validationStack.splice(depth - 1, 2);\n        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);\n        // TODO: just like the literal stack, splice all other stack until the end as well?\n    }\n    /**\n     * Flush buffers for the given depth.\n     *\n     * This should be called after the last entry at a given depth was processed.\n     *\n     * @param {number} depth A depth.\n     * @param {any[]} keys A stack of keys.\n     * @return {Promise<void>} A promise resolving if flushing is done.\n     */\n    async flushBuffer(depth, keys) {\n        let subjects = this.parsingContext.idStack[depth];\n        if (!subjects) {\n            subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];\n        }\n        // Flush values at this level\n        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];\n        if (valueBuffer) {\n            for (const subject of subjects) {\n                const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys);\n                const graphs = (this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0)\n                    ? this.parsingContext.idStack[depth - depthOffsetGraph - 1]\n                    : [await this.util.getGraphContainerValue(keys, depth)];\n                if (graphs) {\n                    for (const graph of graphs) {\n                        // Flush values to stream if the graph @id is known\n                        this.parsingContext.emittedStack[depth] = true;\n                        for (const bufferedValue of valueBuffer) {\n                            if (bufferedValue.reverse) {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.object, bufferedValue.predicate, subject, graph));\n                            }\n                            else {\n                                this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(subject, bufferedValue.predicate, bufferedValue.object, graph));\n                            }\n                        }\n                    }\n                }\n                else {\n                    // Place the values in the graphs buffer if the graph @id is not yet known\n                    const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys) - 1);\n                    for (const bufferedValue of valueBuffer) {\n                        if (bufferedValue.reverse) {\n                            subGraphBuffer.push({\n                                object: subject,\n                                predicate: bufferedValue.predicate,\n                                subject: bufferedValue.object,\n                            });\n                        }\n                        else {\n                            subGraphBuffer.push({\n                                object: bufferedValue.object,\n                                predicate: bufferedValue.predicate,\n                                subject,\n                            });\n                        }\n                    }\n                }\n            }\n            this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);\n            this.parsingContext.literalStack.splice(depth, 1);\n            this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        }\n        // Flush graphs at this level\n        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];\n        if (graphBuffer) {\n            for (const subject of subjects) {\n                // A @graph statement at the root without @id relates to the default graph,\n                // unless there are top-level properties,\n                // others relate to blank nodes.\n                const graph = depth === 1 && subject.termType === 'BlankNode'\n                    && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;\n                this.parsingContext.emittedStack[depth] = true;\n                for (const bufferedValue of graphBuffer) {\n                    this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));\n                }\n            }\n            this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);\n        }\n    }\n    /**\n     * Check if at least one {@link IEntryHandler} validates the entry to true.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth A depth.\n     * @param {boolean} inProperty If the current depth is part of a valid property node.\n     * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.\n     */\n    async validateKey(keys, depth, inProperty) {\n        for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n            if (await entryHandler.validate(this.parsingContext, this.util, keys, depth, inProperty)) {\n                return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };\n            }\n        }\n        return { valid: false, property: false };\n    }\n    /**\n     * Attach all required listeners to the JSON parser.\n     *\n     * This should only be called once.\n     */\n    attachJsonParserListeners() {\n        // Listen to json parser events\n        this.jsonParser.onValue = (value) => {\n            const depth = this.jsonParser.stack.length;\n            const keys = (new Array(depth + 1).fill(0)).map((v, i) => {\n                return i === depth ? this.jsonParser.key : this.jsonParser.stack[i].key;\n            });\n            if (!this.isParsingContextInner(depth)) { // Don't parse inner nodes inside @context\n                const valueJobCb = () => this.newOnValueJob(keys, value, depth, true);\n                if (!this.parsingContext.streamingProfile\n                    && !this.parsingContext.contextTree.getContext(keys.slice(0, -1))) {\n                    // If an out-of-order context is allowed,\n                    // we have to buffer everything.\n                    // We store jobs for @context's and @type's separately,\n                    // because at the end, we have to process them first.\n                    // We also handle @type because these *could* introduce a type-scoped context.\n                    if (keys[depth] === '@context') {\n                        let jobs = this.contextJobs[depth];\n                        if (!jobs) {\n                            jobs = this.contextJobs[depth] = [];\n                        }\n                        jobs.push(valueJobCb);\n                    }\n                    else if (keys[depth] === '@type'\n                        || typeof keys[depth] === 'number' && keys[depth - 1] === '@type') { // Also capture @type with array values\n                        // Remove @type from keys, because we want it to apply to parent later on\n                        this.typeJobs.push({ job: valueJobCb, keys: keys.slice(0, keys.length - 1) });\n                    }\n                    else {\n                        this.contextAwaitingJobs.push({ job: valueJobCb, keys });\n                    }\n                }\n                else {\n                    // Make sure that our value jobs are chained synchronously\n                    this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);\n                }\n                // Execute all buffered jobs on deeper levels\n                if (!this.parsingContext.streamingProfile && depth === 0) {\n                    this.lastOnValueJob = this.lastOnValueJob\n                        .then(() => this.executeBufferedJobs());\n                }\n            }\n        };\n        this.jsonParser.onError = (error) => {\n            this.emit('error', error);\n        };\n    }\n    /**\n     * Check if the parser is currently parsing an element that is part of an @context entry.\n     * @param {number} depth A depth.\n     * @return {boolean} A boolean.\n     */\n    isParsingContextInner(depth) {\n        for (let i = depth; i > 0; i--) {\n            if (this.jsonParser.stack[i - 1].key === '@context') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Execute all buffered jobs.\n     * @return {Promise<void>} A promise resolving if all jobs are finished.\n     */\n    async executeBufferedJobs() {\n        // Handle context jobs\n        for (const jobs of this.contextJobs) {\n            if (jobs) {\n                for (const job of jobs) {\n                    await job();\n                }\n            }\n        }\n        // Clear the keyword cache.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(0);\n        // Handle non-context jobs\n        for (const job of this.contextAwaitingJobs) {\n            // Check if we have a type (with possible type-scoped context) that should be handled before.\n            // We check all possible parent nodes for the current job, from root to leaves.\n            if (this.typeJobs.length > 0) {\n                // First collect all applicable type jobs\n                const applicableTypeJobs = [];\n                const applicableTypeJobIds = [];\n                for (let i = 0; i < this.typeJobs.length; i++) {\n                    const typeJob = this.typeJobs[i];\n                    if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {\n                        applicableTypeJobs.push(typeJob);\n                        applicableTypeJobIds.push(i);\n                    }\n                }\n                // Next, sort the jobs from short to long key length (to ensure types higher up in the tree to be handled first)\n                const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);\n                // Finally, execute the jobs in order\n                for (const typeJob of sortedTypeJobs) {\n                    await typeJob.job();\n                }\n                // Remove the executed type jobs\n                // Sort first, so we can efficiently splice\n                const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();\n                for (const jobId of sortedApplicableTypeJobIds) {\n                    this.typeJobs.splice(jobId, 1);\n                }\n            }\n            await job.job();\n        }\n    }\n}\nexports.JsonLdParser = JsonLdParser;\nJsonLdParser.DEFAULT_PROCESSING_MODE = '1.1';\nJsonLdParser.ENTRY_HANDLERS = [\n    new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),\n    new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),\n    new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),\n    new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),\n    new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),\n    new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),\n    new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),\n    new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),\n    new EntryHandlerContainer_1.EntryHandlerContainer(),\n    new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),\n    new EntryHandlerPredicate_1.EntryHandlerPredicate(),\n    new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback(),\n];\n//# sourceMappingURL=JsonLdParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParsingContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst ErrorCoded_1 = require(\"jsonld-context-parser/lib/ErrorCoded\");\nconst ContextTree_1 = require(\"./ContextTree\");\nconst JsonLdParser_1 = require(\"./JsonLdParser\");\n/**\n * Data holder for parsing information.\n */\nclass ParsingContext {\n    constructor(options) {\n        // Initialize settings\n        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });\n        this.streamingProfile = !!options.streamingProfile;\n        this.baseIRI = options.baseIRI;\n        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;\n        this.allowSubjectList = !!options.allowSubjectList;\n        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;\n        this.strictValues = !!options.strictValues;\n        this.validateValueIndexes = !!options.validateValueIndexes;\n        this.defaultGraph = options.defaultGraph;\n        this.rdfDirection = options.rdfDirection;\n        this.normalizeLanguageTags = options.normalizeLanguageTags;\n        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;\n        this.topLevelProperties = false;\n        this.activeProcessingMode = parseFloat(this.processingMode);\n        // Initialize stacks\n        this.processingStack = [];\n        this.processingType = [];\n        this.emittedStack = [];\n        this.idStack = [];\n        this.graphStack = [];\n        this.graphContainerTermStack = [];\n        this.listPointerStack = [];\n        this.contextTree = new ContextTree_1.ContextTree();\n        this.literalStack = [];\n        this.validationStack = [];\n        this.unaliasedKeywordCacheStack = [];\n        this.jsonLiteralStack = [];\n        this.unidentifiedValuesBuffer = [];\n        this.unidentifiedGraphsBuffer = [];\n        this.pendingContainerFlushBuffers = [];\n        this.parser = options.parser;\n        if (options.context) {\n            this.rootContext = this.parseContext(options.context);\n            this.rootContext.then((context) => this.validateContext(context));\n        }\n        else {\n            this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { '@base': this.baseIRI, '@__baseDocument': true } : {}));\n        }\n    }\n    /**\n     * Parse the given context with the configured options.\n     * @param {JsonLdContext} context A context to parse.\n     * @param {JsonLdContextNormalized} parentContext An optional parent context.\n     * @param {boolean} ignoreProtection If @protected term checks should be ignored.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.\n     */\n    async parseContext(context, parentContext, ignoreProtection) {\n        return this.contextParser.parse(context, {\n            baseIRI: this.baseIRI,\n            ignoreProtection,\n            normalizeLanguageTags: this.normalizeLanguageTags,\n            parentContext,\n            processingMode: this.activeProcessingMode,\n        });\n    }\n    /**\n     * Check if the given context is valid.\n     * If not, an error will be thrown.\n     * @param {JsonLdContextNormalized} context A context.\n     */\n    validateContext(context) {\n        const activeVersion = context.getContextRaw()['@version'];\n        if (activeVersion) {\n            if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);\n            }\n            else {\n                if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {\n                    throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                }\n                this.activeProcessingMode = activeVersion;\n            }\n        }\n    }\n    /**\n     * Get the context at the given path.\n     * @param {keys} keys The path of keys to get the context at.\n     * @param {number} offset The path offset, defaults to 1.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.\n     */\n    async getContext(keys, offset = 1) {\n        const keysOriginal = keys;\n        // Ignore array keys at the end\n        while (typeof keys[keys.length - 1] === 'number') {\n            keys = keys.slice(0, keys.length - 1);\n        }\n        // Handle offset on keys\n        if (offset) {\n            keys = keys.slice(0, -offset);\n        }\n        // Determine the closest context\n        const contextData = await this.getContextPropagationAware(keys);\n        const context = contextData.context;\n        // Process property-scoped contexts (high-to-low)\n        let contextRaw = context.getContextRaw();\n        for (let i = contextData.depth; i < keysOriginal.length - offset; i++) {\n            const key = keysOriginal[i];\n            const contextKeyEntry = contextRaw[key];\n            if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n                const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();\n                const propagate = !(key in scopedContext)\n                    || scopedContext[key]['@context']['@propagate']; // Propagation is true by default\n                if (propagate !== false || i === keysOriginal.length - 1 - offset) {\n                    contextRaw = scopedContext;\n                    // Clean up final context\n                    delete contextRaw['@propagate'];\n                    contextRaw[key] = Object.assign({}, contextRaw[key]);\n                    if ('@id' in contextKeyEntry) {\n                        contextRaw[key]['@id'] = contextKeyEntry['@id'];\n                    }\n                    delete contextRaw[key]['@context'];\n                    if (propagate !== false) {\n                        this.contextTree.setContext(keysOriginal.slice(0, i + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));\n                    }\n                }\n            }\n        }\n        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);\n    }\n    /**\n     * Get the context at the given path.\n     * Non-propagating contexts will be skipped,\n     * unless the context at that exact depth is retrieved.\n     *\n     * This ONLY takes into account context propagation logic,\n     * so this should usually not be called directly,\n     * call {@link #getContext} instead.\n     *\n     * @param keys The path of keys to get the context at.\n     * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.\n     */\n    async getContextPropagationAware(keys) {\n        const originalDepth = keys.length;\n        let contextData = null;\n        let hasApplicablePropertyScopedContext;\n        do {\n            hasApplicablePropertyScopedContext = false;\n            if (contextData && '@__propagateFallback' in contextData.context.getContextRaw()) {\n                // If a propagation fallback context has been set,\n                // fallback to that context and retry for the same depth.\n                contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()['@__propagateFallback']);\n            }\n            else {\n                if (contextData) {\n                    // If we had a previous iteration, jump to the parent of context depth.\n                    // We must do this because once we get here, last context had propagation disabled,\n                    // so we check its first parent instead.\n                    keys = keys.slice(0, contextData.depth - 1);\n                }\n                contextData = await this.contextTree.getContext(keys) || { context: await this.rootContext, depth: 0 };\n            }\n            // Allow non-propagating contexts to propagate one level deeper\n            // if it defines a property-scoped context that is applicable for the current key.\n            // @see https://w3c.github.io/json-ld-api/tests/toRdf-manifest#tc012\n            const lastKey = keys[keys.length - 1];\n            if (lastKey in contextData.context.getContextRaw()) {\n                const lastKeyValue = contextData.context.getContextRaw()[lastKey];\n                if (lastKeyValue && typeof lastKeyValue === 'object' && '@context' in lastKeyValue) {\n                    hasApplicablePropertyScopedContext = true;\n                }\n            }\n        } while (contextData.depth > 0 // Root context has a special case\n            && contextData.context.getContextRaw()['@propagate'] === false // Stop loop if propagation is true\n            && contextData.depth !== originalDepth // Stop loop if requesting exact depth of non-propagating\n            && !hasApplicablePropertyScopedContext);\n        // Special case for root context that does not allow propagation.\n        // Fallback to empty context in that case.\n        if (contextData.depth === 0\n            && contextData.context.getContextRaw()['@propagate'] === false\n            && contextData.depth !== originalDepth) {\n            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});\n        }\n        return contextData;\n    }\n    /**\n     * Start a new job for parsing the given value.\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        await this.parser.newOnValueJob(keys, value, depth, lastDepthCheck);\n    }\n    /**\n     * Flush the pending container flush buffers\n     * @return {boolean} If any pending buffers were flushed.\n     */\n    async handlePendingContainerFlushBuffers() {\n        if (this.pendingContainerFlushBuffers.length > 0) {\n            for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {\n                await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);\n                this.parser.flushStacks(pendingFlushBuffer.depth);\n            }\n            this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Emit the given quad into the output stream.\n     * @param {number} depth The depth the quad was generated at.\n     * @param {Quad} quad A quad to emit.\n     */\n    emitQuad(depth, quad) {\n        if (depth === 1) {\n            this.topLevelProperties = true;\n        }\n        this.parser.push(quad);\n    }\n    /**\n     * Emit the given error into the output stream.\n     * @param {Error} error An error to emit.\n     */\n    emitError(error) {\n        this.parser.emit('error', error);\n    }\n    /**\n     * Emit the given context into the output stream under the 'context' event.\n     * @param {JsonLdContext} context A context to emit.\n     */\n    emitContext(context) {\n        this.parser.emit('context', context);\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.\n     */\n    getUnidentifiedValueBufferSafe(depth) {\n        let buffer = this.unidentifiedValuesBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedValuesBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.\n     */\n    getUnidentifiedGraphBufferSafe(depth) {\n        let buffer = this.unidentifiedGraphsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedGraphsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * @return IExpandOptions The expand options for the active processing mode.\n     */\n    getExpandOptions() {\n        return ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];\n    }\n    /**\n     * Shift the stack at the given offset to the given depth.\n     *\n     * This will override anything in the stack at `depth`,\n     * and this will remove anything at `depth + depthOffset`\n     *\n     * @param depth The target depth.\n     * @param depthOffset The origin depth, relative to `depth`.\n     */\n    shiftStack(depth, depthOffset) {\n        // Copy the id stack value up one level so that the next job can access the id.\n        const deeperIdStack = this.idStack[depth + depthOffset];\n        if (deeperIdStack) {\n            this.idStack[depth] = deeperIdStack;\n            this.emittedStack[depth] = true;\n            delete this.idStack[depth + depthOffset];\n        }\n        // Shorten key stack\n        if (this.pendingContainerFlushBuffers.length) {\n            for (const buffer of this.pendingContainerFlushBuffers) {\n                if (buffer.depth >= depth + depthOffset) {\n                    buffer.depth -= depthOffset;\n                    buffer.keys.splice(depth, depthOffset);\n                }\n            }\n        }\n        // Splice stacks\n        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {\n            this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];\n            delete this.unidentifiedValuesBuffer[depth + depthOffset];\n        }\n        // TODO: also do the same for other stacks\n    }\n}\nexports.ParsingContext = ParsingContext;\nParsingContext.EXPAND_OPTIONS = {\n    1.0: {\n        allowPrefixForcing: false,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: false,\n    },\n    1.1: {\n        allowPrefixForcing: true,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: true,\n    },\n};\n//# sourceMappingURL=ParsingContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Utility functions and methods.\n */\nclass Util {\n    constructor(options) {\n        this.parsingContext = options.parsingContext;\n        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();\n        this.rdfFirst = this.dataFactory.namedNode(Util.RDF + 'first');\n        this.rdfRest = this.dataFactory.namedNode(Util.RDF + 'rest');\n        this.rdfNil = this.dataFactory.namedNode(Util.RDF + 'nil');\n        this.rdfType = this.dataFactory.namedNode(Util.RDF + 'type');\n        this.rdfJson = this.dataFactory.namedNode(Util.RDF + 'JSON');\n    }\n    /**\n     * Helper function to get the value of a context entry,\n     * or fallback to a certain value.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} contextKey A pre-defined JSON-LD key in context entries.\n     * @param {string} key A context entry key.\n     * @param {string} fallback A fallback value for when the given contextKey\n     *                          could not be found in the value with the given key.\n     * @return {string} The value of the given contextKey in the entry behind key in the given context,\n     *                  or the given fallback value.\n     */\n    static getContextValue(context, contextKey, key, fallback) {\n        const entry = context.getContextRaw()[key];\n        if (!entry) {\n            return fallback;\n        }\n        const type = entry[contextKey];\n        return type === undefined ? fallback : type;\n    }\n    /**\n     * Get the container type of the given key in the context.\n     *\n     * Should any context-scoping bugs should occur related to this in the future,\n     * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).\n     * This is because containers act 2 levels deep.\n     *\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The container type.\n     */\n    static getContextValueContainer(context, key) {\n        return Util.getContextValue(context, '@container', key, { '@set': true });\n    }\n    /**\n     * Get the value type of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueType(context, key) {\n        const valueType = Util.getContextValue(context, '@type', key, null);\n        if (valueType === '@none') {\n            return null;\n        }\n        return valueType;\n    }\n    /**\n     * Get the language of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueLanguage(context, key) {\n        return Util.getContextValue(context, '@language', key, context.getContextRaw()['@language'] || null);\n    }\n    /**\n     * Get the direction of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueDirection(context, key) {\n        return Util.getContextValue(context, '@direction', key, context.getContextRaw()['@direction'] || null);\n    }\n    /**\n     * Check if the given key in the context is a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {boolean} If the context value has a @reverse key.\n     */\n    static isContextValueReverse(context, key) {\n        return !!Util.getContextValue(context, '@reverse', key, null);\n    }\n    /**\n     * Get the @index of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The index.\n     */\n    static getContextValueIndex(context, key) {\n        return Util.getContextValue(context, '@index', key, context.getContextRaw()['@index'] || null);\n    }\n    /**\n     * Check if the given key refers to a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The property key.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property must be reversed.\n     */\n    static isPropertyReverse(context, key, parentKey) {\n        // '!==' is needed because reversed properties in a @reverse container should cancel each other out.\n        return parentKey === '@reverse' !== Util.isContextValueReverse(context, key);\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);\n    }\n    /**\n     * Check if the given first array (needle) is a prefix of the given second array (haystack).\n     * @param needle An array to check if it is a prefix.\n     * @param haystack An array to look in.\n     */\n    static isPrefixArray(needle, haystack) {\n        if (needle.length > haystack.length) {\n            return false;\n        }\n        for (let i = 0; i < needle.length; i++) {\n            if (needle[i] !== haystack[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Make sure that @id-@index pairs are equal over all array values.\n     * Reject otherwise.\n     * @param {any[]} value An array value.\n     * @return {Promise<void>} A promise rejecting if conflicts are present.\n     */\n    async validateValueIndexes(value) {\n        if (this.parsingContext.validateValueIndexes) {\n            const indexHashes = {};\n            for (const entry of value) {\n                if (entry && typeof entry === 'object') {\n                    const id = entry['@id'];\n                    const index = entry['@index'];\n                    if (id && index) {\n                        const existingIndexValue = indexHashes[id];\n                        if (existingIndexValue && existingIndexValue !== index) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);\n                        }\n                        indexHashes[id] = index;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert a given JSON value to an RDF term.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param value A JSON value.\n     * @param {number} depth The depth the value is at.\n     * @param {string[]} keys The path of keys.\n     * @return {Promise<RDF.Term[]>} An RDF term array.\n     */\n    async valueToTerm(context, key, value, depth, keys) {\n        // Skip further processing if we have an @type: @json\n        if (Util.getContextValueType(context, key) === '@json') {\n            return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];\n        }\n        const type = typeof value;\n        switch (type) {\n            case 'object':\n                // Skip if we have a null or undefined object\n                if (value === null || value === undefined) {\n                    return [];\n                }\n                // Special case for arrays\n                if (Array.isArray(value)) {\n                    // We handle arrays at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty context-based lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if ('@list' in Util.getContextValueContainer(context, key)) {\n                        if (value.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    await this.validateValueIndexes(value);\n                    return [];\n                }\n                // Handle property-scoped contexts\n                context = await this.getContextSelfOrPropertyScoped(context, key);\n                // Handle local context in the value\n                if ('@context' in value) {\n                    context = await this.parsingContext.parseContext(value['@context'], (await this.parsingContext.getContext(keys, 0)).getContextRaw());\n                }\n                // In all other cases, we have a hash\n                value = await this.unaliasKeywords(value, keys, depth, context); // Un-alias potential keywords in this hash\n                if ('@value' in value) {\n                    let val;\n                    let valueLanguage;\n                    let valueDirection;\n                    let valueType;\n                    let valueIndex; // We don't use the index, but we need to check its type for spec-compliance\n                    for (key in value) {\n                        const subValue = value[key];\n                        switch (key) {\n                            case '@value':\n                                val = subValue;\n                                break;\n                            case '@language':\n                                valueLanguage = subValue;\n                                break;\n                            case '@direction':\n                                valueDirection = subValue;\n                                break;\n                            case '@type':\n                                valueType = subValue;\n                                break;\n                            case '@index':\n                                valueIndex = subValue;\n                                break;\n                            default:\n                                throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                    }\n                    // Skip further processing if we have an @type: @json\n                    if (await this.unaliasKeyword(valueType, keys, depth, true, context) === '@json') {\n                        return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];\n                    }\n                    // Validate @value\n                    if (val === null) {\n                        return [];\n                    }\n                    if (typeof val === 'object') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);\n                    }\n                    // Validate @index\n                    if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== 'string') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);\n                    }\n                    // Validate @language and @direction\n                    if (valueLanguage) {\n                        if (typeof val !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {\n                            return [];\n                        }\n                        // Language tags are always normalized to lowercase in 1.0.\n                        if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1.0) {\n                            valueLanguage = valueLanguage.toLowerCase();\n                        }\n                    }\n                    if (valueDirection) {\n                        if (typeof val !== 'string') {\n                            throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {\n                            return [];\n                        }\n                    }\n                    // Check @language and @direction\n                    if (valueLanguage && valueDirection && this.parsingContext.rdfDirection) {\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON\n                                .stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueLanguage) { // Check @language\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return [this.dataFactory.literal(val, valueLanguage)];\n                    }\n                    else if (valueDirection && this.parsingContext.rdfDirection) { // Check @direction\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueType) { // Validate @type\n                        if (typeof valueType !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        const typeTerm = this.createVocabOrBaseTerm(context, valueType);\n                        if (!typeTerm) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        if (typeTerm.termType !== 'NamedNode') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        return [this.dataFactory.literal(val, typeTerm)];\n                    }\n                    // We don't pass the context, because context-based things like @language should be ignored\n                    return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys);\n                }\n                else if ('@set' in value) {\n                    // No other entries are allow in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    // No need to do anything here, this is handled at the deeper level.\n                    return [];\n                }\n                else if ('@list' in value) {\n                    // No other entries are allowed in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    const listValue = value[\"@list\"];\n                    // We handle lists at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty anonymous lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if (Array.isArray(listValue)) {\n                        if (listValue.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    else {\n                        // We only have a single list element here, so emit this directly as single element\n                        return await this.valueToTerm(await this.parsingContext.getContext(keys), key, listValue, depth - 1, keys.slice(0, -1));\n                    }\n                }\n                else if ('@reverse' in value && typeof value['@reverse'] === 'boolean') {\n                    // We handle reverse properties at value level so we can emit earlier,\n                    // so this is handled already when we get here.\n                    return [];\n                }\n                else if ('@graph' in Util.getContextValueContainer(await this.parsingContext.getContext(keys), key)) {\n                    // We are processing a graph container\n                    const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];\n                    return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];\n                }\n                else if (\"@id\" in value) {\n                    // Use deeper context if the value node contains other properties next to @id.\n                    if (Object.keys(value).length > 1) {\n                        context = await this.parsingContext.getContext(keys, 0);\n                    }\n                    // Handle local context in the value\n                    if ('@context' in value) {\n                        context = await this.parsingContext.parseContext(value['@context'], context.getContextRaw());\n                    }\n                    if (value[\"@type\"] === '@vocab') {\n                        return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value[\"@id\"]));\n                    }\n                    else {\n                        return this.nullableTermToArray(this.resourceToTerm(context, value[\"@id\"]));\n                    }\n                }\n                else {\n                    // Only make a blank node if at least one triple was emitted at the value's level.\n                    if (this.parsingContext.emittedStack[depth + 1]\n                        || (value && typeof value === 'object' && Object.keys(value).length === 0)) {\n                        return (this.parsingContext.idStack[depth + 1]\n                            || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]));\n                    }\n                    else {\n                        return [];\n                    }\n                }\n            case 'string':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));\n            case 'boolean':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(Util.XSD_BOOLEAN)));\n            case 'number':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? Util.XSD_INTEGER : Util.XSD_DOUBLE)));\n            default:\n                this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));\n                return [];\n        }\n    }\n    /**\n     * If the context defines a property-scoped context for the given key,\n     * that context will be returned.\n     * Otherwise, the given context will be returned as-is.\n     *\n     * This should be used for valueToTerm cases that are not objects.\n     * @param context A context.\n     * @param key A JSON key.\n     */\n    async getContextSelfOrPropertyScoped(context, key) {\n        const contextKeyEntry = context.getContextRaw()[key];\n        if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n            context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);\n        }\n        return context;\n    }\n    /**\n     * If the given term is null, return an empty array, otherwise return an array with the single given term.\n     * @param term A term.\n     */\n    nullableTermToArray(term) {\n        return term ? [term] : [];\n    }\n    /**\n     * Convert a given JSON key to an RDF predicate term,\n     * based on @vocab.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node.\n     */\n    predicateToTerm(context, key) {\n        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());\n        // Immediately return if the predicate was disabled in the context\n        if (!expanded) {\n            return null;\n        }\n        // Check if the predicate is a blank node\n        if (expanded[0] === '_' && expanded[1] === ':') {\n            if (this.parsingContext.produceGeneralizedRdf) {\n                return this.dataFactory.blankNode(expanded.substr(2));\n            }\n            else {\n                return null;\n            }\n        }\n        // Check if the predicate is a valid IRI\n        if (Util.isValidIri(expanded)) {\n            return this.dataFactory.namedNode(expanded);\n        }\n        else {\n            if (expanded && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));\n            }\n            else {\n                return null;\n            }\n        }\n        return null;\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term or blank node,\n     * based on @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    resourceToTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());\n        if (!Util.isValidIri(iri)) {\n            if (iri && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(iri);\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term.\n     * It will do this based on the @vocab,\n     * and fallback to @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    createVocabOrBaseTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const expandOptions = this.parsingContext.getExpandOptions();\n        let expanded = context.expandTerm(key, true, expandOptions);\n        if (expanded === key) {\n            expanded = context.expandTerm(key, false, expandOptions);\n        }\n        if (!Util.isValidIri(expanded)) {\n            if (expanded && this.parsingContext.strictValues && !expanded.startsWith('@')) {\n                this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(expanded);\n    }\n    /**\n     * Ensure that the given value becomes a string.\n     * @param {string | number} value A string or number.\n     * @param {NamedNode} datatype The intended datatype.\n     * @return {string} The returned string.\n     */\n    intToString(value, datatype) {\n        if (typeof value === 'number') {\n            if (Number.isFinite(value)) {\n                const isInteger = value % 1 === 0;\n                if (isInteger && (!datatype || datatype.value !== Util.XSD_DOUBLE)) {\n                    return Number(value).toString();\n                }\n                else {\n                    return value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E');\n                }\n            }\n            else {\n                return value > 0 ? 'INF' : '-INF';\n            }\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Convert a given JSON string value to an RDF term.\n     * @param {number} depth The current stack depth.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param {string} value A JSON value.\n     * @param {NamedNode} defaultDatatype The default datatype for the given value.\n     * @return {RDF.Term} An RDF term or null.\n     */\n    stringValueToTerm(depth, context, key, value, defaultDatatype) {\n        // Check the datatype from the context\n        const contextType = Util.getContextValueType(context, key);\n        if (contextType) {\n            if (contextType === '@id') {\n                if (!defaultDatatype) {\n                    return this.resourceToTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else if (contextType === '@vocab') {\n                if (!defaultDatatype) {\n                    return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else {\n                defaultDatatype = this.dataFactory.namedNode(contextType);\n            }\n        }\n        // If we don't find such a datatype, check the language from the context\n        if (!defaultDatatype) {\n            const contextLanguage = Util.getContextValueLanguage(context, key);\n            const contextDirection = Util.getContextValueDirection(context, key);\n            if (contextDirection && this.parsingContext.rdfDirection) {\n                return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);\n            }\n            else {\n                return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);\n            }\n        }\n        // If all else fails, make a literal based on the default content type\n        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);\n    }\n    /**\n     * Create a literal for the given value with the given language and direction.\n     * Auxiliary quads may be emitted.\n     * @param {number} depth The current stack depth.\n     * @param {string} value A string value.\n     * @param {string} language A language tag.\n     * @param {string} direction A direction.\n     * @return {Term} An RDF term.\n     */\n    createLanguageDirectionLiteral(depth, value, language, direction) {\n        if (this.parsingContext.rdfDirection === 'i18n-datatype') {\n            // Create a datatyped literal, by encoding the language and direction into https://www.w3.org/ns/i18n#.\n            if (!language) {\n                language = '';\n            }\n            return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));\n        }\n        else {\n            // Reify the literal.\n            const valueNode = this.dataFactory.blankNode();\n            const graph = this.getDefaultGraph();\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'value'), this.dataFactory.literal(value), graph));\n            if (language) {\n                this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'language'), this.dataFactory.literal(language), graph));\n            }\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'direction'), this.dataFactory.literal(direction), graph));\n            return valueNode;\n        }\n    }\n    /**\n     * Stringify the given JSON object to a canonical JSON string.\n     * @param value Any valid JSON value.\n     * @return {string} A canonical JSON string.\n     */\n    valueToJsonString(value) {\n        return canonicalizeJson(value);\n    }\n    /**\n     * If the key is not a keyword, try to check if it is an alias for a keyword,\n     * and if so, un-alias it.\n     * @param {string} key A key, can be falsy.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth to\n     * @param {boolean} disableCache If the cache should be disabled\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<string>} A promise resolving to the key itself, or another key.\n     */\n    async unaliasKeyword(key, keys, depth, disableCache, context) {\n        // Numbers can not be an alias\n        if (Number.isInteger(key)) {\n            return key;\n        }\n        // Try to grab from cache if it was already un-aliased before.\n        if (!disableCache) {\n            const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];\n            if (cachedUnaliasedKeyword) {\n                return cachedUnaliasedKeyword;\n            }\n        }\n        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            context = context || await this.parsingContext.getContext(keys);\n            let unliased = context.getContextRaw()[key];\n            if (unliased && typeof unliased === 'object') {\n                unliased = unliased['@id'];\n            }\n            if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {\n                key = unliased;\n            }\n        }\n        return disableCache ? key : (this.parsingContext.unaliasedKeywordCacheStack[depth] = key);\n    }\n    /**\n     * Unalias the keyword of the parent.\n     * This adds a safety check if no parent exist.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<any>} A promise resolving to the parent key, or another key.\n     */\n    async unaliasKeywordParent(keys, depth) {\n        return await this.unaliasKeyword(depth > 0 && keys[depth - 1], keys, depth - 1);\n    }\n    /**\n     * Un-alias all keywords in the given hash.\n     * @param {{[p: string]: any}} hash A hash object.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth.\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.\n     */\n    async unaliasKeywords(hash, keys, depth, context) {\n        const newHash = {};\n        for (const key in hash) {\n            newHash[await this.unaliasKeyword(key, keys, depth + 1, true, context)] = hash[key];\n        }\n        return newHash;\n    }\n    /**\n     * Check if we are processing a literal (including JSON literals) at the given depth.\n     * This will also check higher levels,\n     * because if a parent is a literal,\n     * then the deeper levels are definitely a literal as well.\n     * @param {number} depth The depth.\n     * @return {boolean} If we are processing a literal.\n     */\n    isLiteral(depth) {\n        for (let i = depth; i >= 0; i--) {\n            if (this.parsingContext.literalStack[i] || this.parsingContext.jsonLiteralStack[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check how many parents should be skipped for checking the @graph for the given node.\n     *\n     * @param {number} depth The depth of the node.\n     * @param {any[]} keys An array of keys.\n     * @return {number} The graph depth offset.\n     */\n    async getDepthOffsetGraph(depth, keys) {\n        for (let i = depth - 1; i > 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@graph') {\n                // Skip further processing if we are already in an @graph-@id or @graph-@index container\n                const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, i)).containers;\n                if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {\n                    return -1;\n                }\n                return depth - i - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Check if the given subject is of a valid type.\n     * This should be called when applying @reverse'd properties.\n     * @param {Term} subject A subject.\n     */\n    validateReverseSubject(subject) {\n        if (subject.termType === 'Literal') {\n            throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n        }\n    }\n    /**\n     * Get the default graph.\n     * @return {Term} An RDF term.\n     */\n    getDefaultGraph() {\n        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();\n    }\n    /**\n     * Get the current graph, while taking into account a graph that can be defined via @container: @graph.\n     * If not within a graph container, the default graph will be returned.\n     * @param keys The current keys.\n     * @param depth The current depth.\n     */\n    async getGraphContainerValue(keys, depth) {\n        // Default to default graph\n        let graph = this.getDefaultGraph();\n        // Check if we are in an @container: @graph.\n        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer\n            .getContainerHandler(this.parsingContext, keys, depth);\n        if ('@graph' in containers) {\n            // Get the graph from the stack.\n            const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys);\n            const entry = this.parsingContext.graphContainerTermStack[depthContainer];\n            graph = entry ? entry[graphContainerIndex] : null;\n            // Set the graph in the stack if none has been set yet.\n            if (!graph) {\n                let graphId = null;\n                if ('@id' in containers) {\n                    const keyUnaliased = await this.getContainerKey(keys[depthContainer], keys, depthContainer);\n                    if (keyUnaliased !== null) {\n                        graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys), keyUnaliased);\n                    }\n                }\n                if (!graphId) {\n                    graphId = this.dataFactory.blankNode();\n                }\n                if (!this.parsingContext.graphContainerTermStack[depthContainer]) {\n                    this.parsingContext.graphContainerTermStack[depthContainer] = {};\n                }\n                graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;\n            }\n        }\n        return graph;\n    }\n    /**\n     * Get the properties depth for retrieving properties.\n     *\n     * Typically, the properties depth will be identical to the given depth.\n     *\n     * The following exceptions apply:\n     * * When the parent is @reverse, the depth is decremented by one.\n     * * When @nest parents are found, the depth is decremented by the number of @nest parents.\n     * If in combination with the exceptions above an intermediary array is discovered,\n     * the depth is also decremented by this number of arrays.\n     *\n     * @param keys The current key chain.\n     * @param depth The current depth.\n     */\n    async getPropertiesDepth(keys, depth) {\n        let lastValidDepth = depth;\n        for (let i = depth - 1; i > 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                const parentKey = await this.unaliasKeyword(keys[i], keys, i);\n                if (parentKey === '@reverse') {\n                    return i;\n                }\n                else if (parentKey === '@nest') {\n                    lastValidDepth = i;\n                }\n                else {\n                    return lastValidDepth;\n                }\n            }\n        }\n        return lastValidDepth;\n    }\n    /**\n     * Get the key for the current container entry.\n     * @param key A key, can be falsy.\n     * @param keys The key chain.\n     * @param depth The current depth to get the key from.\n     * @return Promise resolving to the key.\n     *         Null will be returned for @none entries, with aliasing taken into account.\n     */\n    async getContainerKey(key, keys, depth) {\n        const keyUnaliased = await this.unaliasKeyword(key, keys, depth);\n        return keyUnaliased === '@none' ? null : keyUnaliased;\n    }\n}\nexports.Util = Util;\nUtil.XSD = 'http://www.w3.org/2001/XMLSchema#';\nUtil.XSD_BOOLEAN = Util.XSD + 'boolean';\nUtil.XSD_INTEGER = Util.XSD + 'integer';\nUtil.XSD_DOUBLE = Util.XSD + 'double';\nUtil.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n//# sourceMappingURL=Util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIdentifier = void 0;\n/**\n * Container handler for @id.\n *\n * It assumes that the current key is the identifier of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerIdentifier {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        let id;\n        // First check if the child node already has a defined id.\n        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {\n            // Use the existing identifier\n            id = parsingContext.idStack[depth + 1][0];\n        }\n        else {\n            // Create the identifier\n            const keyUnaliased = await util.getContainerKey(keys[depth], keys, depth);\n            const maybeId = keyUnaliased !== null\n                ? await util.resourceToTerm(await parsingContext.getContext(keys), keys[depth])\n                : util.dataFactory.blankNode();\n            // Do nothing if the id is invalid\n            if (!maybeId) {\n                parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n                return;\n            }\n            id = maybeId;\n            // Insert the id into the stack so that buffered children can make us of it.\n            parsingContext.idStack[depth + 1] = [id];\n        }\n        // Insert the id into the stack so that parents can make use of it.\n        // Insert it as an array because multiple id container entries may exist\n        let ids = parsingContext.idStack[depth];\n        if (!ids) {\n            ids = parsingContext.idStack[depth] = [];\n        }\n        // Only insert the term if it does not exist yet in the array.\n        if (!ids.some((term) => term.equals(id))) {\n            ids.push(id);\n        }\n        // Flush any pending flush buffers\n        if (!await parsingContext.handlePendingContainerFlushBuffers()) {\n            parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n        }\n    }\n}\nexports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;\n//# sourceMappingURL=ContainerHandlerIdentifier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIndex = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @index.\n *\n * This will ignore the current key and add this entry to the parent node.\n */\nclass ContainerHandlerIndex {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            const graphContainer = '@graph' in containers;\n            // Check if the container is a property-based container by checking if there is a valid @index.\n            const context = await parsingContext.getContext(keys);\n            const indexKey = keys[depth - 1];\n            const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);\n            if (indexPropertyRaw) {\n                // Validate the @index value\n                if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {\n                    throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                if (typeof indexPropertyRaw !== 'string') {\n                    throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // When @index is used, values must be node values, unless @type: @id is defined in the context\n                if (typeof value !== 'object') {\n                    // Error if we don't have @type: @id\n                    if (Util_1.Util.getContextValueType(context, indexKey) !== '@id') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                    }\n                    // Add an @id to the stack, so our expanded @index value can make use of it\n                    const id = util.resourceToTerm(context, value);\n                    if (id) {\n                        parsingContext.idStack[depth + 1] = [id];\n                    }\n                }\n                // Expand the @index value\n                const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);\n                if (indexProperty) {\n                    const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys[depth], keys, depth), depth, keys);\n                    if (graphContainer) {\n                        // When we're in a graph container, attach the index to the graph identifier\n                        const graphId = await util.getGraphContainerValue(keys, depth + 1);\n                        for (const indexValue of indexValues) {\n                            parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));\n                        }\n                    }\n                    else {\n                        // Otherwise, attach the index to the node identifier\n                        for (const indexValue of indexValues) {\n                            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, indexProperty, indexValue, false);\n                        }\n                    }\n                }\n            }\n            const depthOffset = graphContainer ? 2 : 1;\n            await parsingContext.newOnValueJob(keys.slice(0, keys.length - depthOffset), value, depth - depthOffset, true);\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerIndex = ContainerHandlerIndex;\n//# sourceMappingURL=ContainerHandlerIndex.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerLanguage = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Container handler for @language.\n *\n * It assumes that the current key is the language of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerLanguage {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        const language = await util.getContainerKey(keys[depth], keys, depth);\n        if (Array.isArray(value)) {\n            // No type-checking needed, will be handled on each value when this handler is called recursively.\n            value = value.map((subValue) => ({ '@value': subValue, '@language': language }));\n        }\n        else {\n            if (typeof value !== 'string') {\n                throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);\n            }\n            value = { '@value': value, '@language': language };\n        }\n        await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerLanguage = ContainerHandlerLanguage;\n//# sourceMappingURL=ContainerHandlerLanguage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerType = void 0;\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @type.\n *\n * This will add this entry to the parent node, and use the current key as an rdf:type value.\n */\nclass ContainerHandlerType {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            if (typeof value === 'string') {\n                // Determine the @type of the container\n                const context = await parsingContext.getContext(keys);\n                const containerTypeType = Util_1.Util.getContextValueType(context, keys[depth - 1]);\n                // String values refer to node references\n                const id = containerTypeType === '@vocab'\n                    ? await util.createVocabOrBaseTerm(context, value)\n                    : await util.resourceToTerm(context, value);\n                if (id) {\n                    // Handle the value of this node as @id, which will also cause the predicate from above to be emitted.\n                    const subValue = { '@id': id.termType === 'NamedNode' ? id.value : value };\n                    await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), subValue, depth - 1, true);\n                    // Set the id in the stack so it can be used for the rdf:type handling later on\n                    parsingContext.idStack[depth + 1] = [id];\n                }\n            }\n            else {\n                // Other values are handled by handling them as a proper job\n                // Check needed for cases where entries don't have an explicit @id\n                const entryHasIdentifier = !!parsingContext.idStack[depth + 1];\n                // Handle the value of this node, which will also cause the predicate from above to be emitted.\n                if (!entryHasIdentifier) {\n                    delete parsingContext.idStack[depth]; // Force new (blank node) identifier\n                }\n                await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n                if (!entryHasIdentifier) {\n                    parsingContext.idStack[depth + 1] = parsingContext.idStack[depth]; // Copy the id to the child node, for @type\n                }\n            }\n            // Identify the type to emit.\n            const keyOriginal = await util.getContainerKey(keys[depth], keys, depth);\n            const type = keyOriginal !== null\n                ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys), keyOriginal)\n                : null;\n            if (type) {\n                // Push the type to the stack using the rdf:type predicate\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, util.rdfType, type, false);\n            }\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n    }\n}\nexports.ContainerHandlerType = ContainerHandlerType;\n//# sourceMappingURL=ContainerHandlerType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerArrayValue = void 0;\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of an array.\n */\nclass EntryHandlerArrayValue {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return typeof keys[depth] === 'number';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        let parentKey = await util.unaliasKeywordParent(keys, depth);\n        // Check if we have an anonymous list\n        if (parentKey === '@list') {\n            // Our value is part of an array\n            // Determine the list root key\n            let listRootKey = null;\n            let listRootDepth = 0;\n            for (let i = depth - 2; i > 0; i--) {\n                const keyOption = keys[i];\n                if (typeof keyOption === 'string' || typeof keyOption === 'number') {\n                    listRootDepth = i;\n                    listRootKey = keyOption;\n                    break;\n                }\n            }\n            if (listRootKey !== null) {\n                // Emit the given objects as list elements\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), listRootKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n            }\n        }\n        else if (parentKey === '@set') {\n            // Our value is part of a set, so we just add it to the parent-parent\n            await parsingContext.newOnValueJob(keys.slice(0, -2), value, depth - 2, false);\n        }\n        else if (parentKey !== undefined && parentKey !== '@type') {\n            // Buffer our value using the parent key as predicate\n            // Determine the first parent key that is *not* an array key\n            // This is needed in case we have an @list container with nested arrays,\n            // where each of them should produce nested RDF lists.\n            for (let i = depth - 1; i > 0; i--) {\n                if (typeof keys[i] !== 'number') {\n                    parentKey = await util.unaliasKeyword(keys[i], keys, i);\n                    break;\n                }\n            }\n            // Check if the predicate is marked as an @list in the context\n            const parentContext = await parsingContext.getContext(keys.slice(0, -1));\n            if ('@list' in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {\n                // Our value is part of an array\n                // Emit the given objects as list elements\n                parsingContext.emittedStack[depth + 1] = true; // Ensure the creation of bnodes for empty nodes\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), parentKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, -1), depth - 1);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, -1), depth - 1);\n                }\n            }\n            else {\n                // Copy the stack values up one level so that the next job can access them.\n                parsingContext.shiftStack(depth, 1);\n                // Execute the job one level higher\n                await parsingContext.newOnValueJob(keys.slice(0, -1), value, depth - 1, false);\n                // Remove any defined contexts at this level to avoid it to propagate to the next array element.\n                parsingContext.contextTree.removeContext(keys.slice(0, -1));\n            }\n        }\n    }\n    async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {\n        // Buffer our value as an RDF list using the listRootKey as predicate\n        let listPointer = parsingContext.listPointerStack[depth];\n        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))['@value'] !== null) {\n            if (!listPointer || !listPointer.value) {\n                const linkTerm = util.dataFactory.blankNode();\n                listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };\n            }\n            else {\n                // rdf:rest links are always emitted before the next element,\n                // as the blank node identifier is only created at that point.\n                // Because of this reason, the final rdf:nil is emitted when the stack depth is decreased.\n                const newLinkTerm = util.dataFactory.blankNode();\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));\n                // Update the list pointer for the next element\n                listPointer.value = newLinkTerm;\n            }\n            // Emit a list element for the current value\n            // Omit rdf:first if the value is invalid\n            if (value) {\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));\n            }\n        }\n        else {\n            // A falsy list element if found.\n            // Mark it as an rdf:nil list until another valid list element comes in\n            if (!listPointer) {\n                listPointer = { listRootDepth, listId: util.rdfNil };\n            }\n        }\n        parsingContext.listPointerStack[depth] = listPointer;\n    }\n}\nexports.EntryHandlerArrayValue = EntryHandlerArrayValue;\n//# sourceMappingURL=EntryHandlerArrayValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerContainer = void 0;\nconst ContainerHandlerIdentifier_1 = require(\"../containerhandler/ContainerHandlerIdentifier\");\nconst ContainerHandlerIndex_1 = require(\"../containerhandler/ContainerHandlerIndex\");\nconst ContainerHandlerLanguage_1 = require(\"../containerhandler/ContainerHandlerLanguage\");\nconst ContainerHandlerType_1 = require(\"../containerhandler/ContainerHandlerType\");\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of a container type (like @index),\n * as specified by {@link IContainerHandler}.\n */\nclass EntryHandlerContainer {\n    /**\n     * Check fit the given container is a simple @graph container.\n     * Concretely, it will check if no @index or @id is active as well.\n     * @param containers A container hash.\n     */\n    static isSimpleGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length === 2) || Object.keys(containers).length === 1);\n    }\n    /**\n     * Check fit the given container is a complex @graph container.\n     * Concretely, it will check if @index or @id is active as well next to @graph.\n     * @param containers A container hash.\n     */\n    static isComplexGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length > 2)\n                || (!('@set' in containers) && Object.keys(containers).length > 1));\n    }\n    /**\n     * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.\n     * @param containers The applicable containers.\n     * @param depth The container depth.\n     * @param keys The array of keys.\n     * @return The graph index.\n     */\n    static getContainerGraphIndex(containers, depth, keys) {\n        let isSimpleGraphContainer = EntryHandlerContainer.isSimpleGraphContainer(containers);\n        let index = '';\n        for (let i = depth; i < keys.length; i++) {\n            if (!isSimpleGraphContainer || typeof keys[i] === 'number') {\n                index += ':' + keys[i];\n            }\n            // Only allow a second 'real' key if in a non-simple graph container.\n            if (!isSimpleGraphContainer && typeof keys[i] !== 'number') {\n                isSimpleGraphContainer = true;\n            }\n        }\n        return index;\n    }\n    /**\n     * Return the applicable container type at the given depth.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}\n     *          All applicable containers for the given depth,\n     *          the `depth` of the container root (can change when arrays are in the key chain),\n     *          and the `fallback` flag that indicates if the default container type was returned\n     *            (i.e., no dedicated container type is defined).\n     */\n    static async getContainerHandler(parsingContext, keys, depth) {\n        const fallback = {\n            containers: { '@set': true },\n            depth,\n            fallback: true,\n        };\n        // A flag that is enabled when @graph container should be tested in next iteration\n        let checkGraphContainer = false;\n        // Iterate from deeper to higher\n        const context = await parsingContext.getContext(keys, 2);\n        for (let i = depth - 1; i >= 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                // @graph containers without any other types are one level less deep, and require special handling\n                const containersSelf = Util_1.Util.getContextValue(context, '@container', keys[i], false);\n                if (containersSelf && EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {\n                    return {\n                        containers: containersSelf,\n                        depth: i + 1,\n                        fallback: false,\n                    };\n                }\n                const containersParent = Util_1.Util.getContextValue(context, '@container', keys[i - 1], false);\n                if (!containersParent) { // If we have the fallback container value\n                    if (checkGraphContainer) {\n                        // Return false if we were already expecting a @graph-@id of @graph-@index container\n                        return fallback;\n                    }\n                    // Check parent-parent, we may be in a @graph-@id of @graph-@index container, which have two levels\n                    checkGraphContainer = true;\n                }\n                else {\n                    // We had an invalid container next iteration, so we now have to check if we were in an @graph container\n                    const graphContainer = '@graph' in containersParent;\n                    // We're in a regular container\n                    for (const containerHandleName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n                        if (containersParent[containerHandleName]) {\n                            if (graphContainer) {\n                                // Only accept graph containers if their combined handlers can handle them.\n                                if (EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                                else {\n                                    return fallback;\n                                }\n                            }\n                            else {\n                                // Only accept if we were not expecting a @graph-@id of @graph-@index container\n                                if (checkGraphContainer) {\n                                    return fallback;\n                                }\n                                else {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    // Fail if no valid container handlers were found\n                    return fallback;\n                }\n            }\n        }\n        return fallback;\n    }\n    /**\n     * Check if we are handling a value at the given depth\n     * that is part of something that should be handled as a container,\n     * AND if this container should be buffered, so that it can be handled by a dedicated container handler.\n     *\n     * For instance, any container with @graph will NOT be buffered.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<boolean>} If we are in the scope of a container handler.\n     */\n    static async isBufferableContainerHandler(parsingContext, keys, depth) {\n        const handler = await EntryHandlerContainer.getContainerHandler(parsingContext, keys, depth);\n        return !handler.fallback && !('@graph' in handler.containers);\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return !!await this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys, 2), keys[depth - 1]);\n        for (const containerName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n            if (containers[containerName]) {\n                return {\n                    containers,\n                    handler: EntryHandlerContainer.CONTAINER_HANDLERS[containerName],\n                };\n            }\n        }\n        return null;\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        return testResult.handler.handle(testResult.containers, parsingContext, util, keys, value, depth);\n    }\n}\nexports.EntryHandlerContainer = EntryHandlerContainer;\nEntryHandlerContainer.CONTAINER_HANDLERS = {\n    '@id': new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),\n    '@index': new ContainerHandlerIndex_1.ContainerHandlerIndex(),\n    '@language': new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),\n    '@type': new ContainerHandlerType_1.ContainerHandlerType(),\n};\n//# sourceMappingURL=EntryHandlerContainer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerInvalidFallback = void 0;\n/**\n * A catch-all for properties, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerInvalidFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return true;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;\n//# sourceMappingURL=EntryHandlerInvalidFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerPredicate = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../Util\");\n/**\n * Interprets keys as predicates.\n * The most common case in JSON-LD processing.\n */\nclass EntryHandlerPredicate {\n    /**\n     * Handle the given predicate-object by either emitting it,\n     * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {Util} util A utility instance.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @param {Term} predicate The predicate.\n     * @param {Term} object The object.\n     * @param {boolean} reverse If the property is reversed.\n     * @return {Promise<void>} A promise resolving when handling is done.\n     */\n    static async handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse) {\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys);\n        const depthPropertiesGraph = depth - depthOffsetGraph;\n        const subjects = parsingContext.idStack[depthProperties];\n        if (subjects) {\n            // Emit directly if the @id was already defined\n            for (const subject of subjects) {\n                // Check if we're in a @graph context\n                const atGraph = depthOffsetGraph >= 0;\n                if (atGraph) {\n                    const graphs = parsingContext.idStack[depthPropertiesGraph - 1];\n                    if (graphs) {\n                        for (const graph of graphs) {\n                            // Emit our quad if graph @id is known\n                            if (reverse) {\n                                util.validateReverseSubject(object);\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                            }\n                            else {\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                            }\n                        }\n                    }\n                    else {\n                        // Buffer our triple if graph @id is not known yet.\n                        if (reverse) {\n                            util.validateReverseSubject(object);\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject });\n                        }\n                        else {\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1)\n                                .push({ subject, predicate, object });\n                        }\n                    }\n                }\n                else {\n                    // Emit if no @graph was applicable\n                    const graph = await util.getGraphContainerValue(keys, depthProperties);\n                    if (reverse) {\n                        util.validateReverseSubject(object);\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(object, predicate, subject, graph));\n                    }\n                    else {\n                        parsingContext.emitQuad(depth, util.dataFactory.quad(subject, predicate, object, graph));\n                    }\n                }\n            }\n        }\n        else {\n            // Buffer until our @id becomes known, or we go up the stack\n            if (reverse) {\n                util.validateReverseSubject(object);\n            }\n            parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse });\n        }\n    }\n    isPropertyHandler() {\n        return true;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = keys[depth];\n        if (key) {\n            const context = await parsingContext.getContext(keys);\n            if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys[depth])) {\n                // If this valid predicate is of type @json, mark it so in the stack so that no deeper handling of nodes occurs.\n                if (Util_1.Util.getContextValueType(context, key) === '@json') {\n                    parsingContext.jsonLiteralStack[depth + 1] = true;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return keys[depth];\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        const keyOriginal = keys[depth];\n        const context = await parsingContext.getContext(keys);\n        const predicate = await util.predicateToTerm(context, key);\n        if (predicate) {\n            const objects = await util.valueToTerm(context, key, value, depth, keys);\n            if (objects.length) {\n                for (let object of objects) {\n                    const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n                    if (value) {\n                        // Special case if our term was defined as an @list, but does not occur in an array,\n                        // In that case we just emit it as an RDF list with a single element.\n                        const listValueContainer = '@list' in Util_1.Util.getContextValueContainer(context, key);\n                        if (listValueContainer || value['@list']) {\n                            if (((listValueContainer && !Array.isArray(value) && !value['@list'])\n                                || (value['@list'] && !Array.isArray(value['@list'])))\n                                && object !== util.rdfNil) {\n                                const listPointer = util.dataFactory.blankNode();\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));\n                                object = listPointer;\n                            }\n                            // Lists are not allowed in @reverse'd properties\n                            if (reverse && !parsingContext.allowSubjectList) {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n                            }\n                        }\n                    }\n                    await EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse);\n                }\n            }\n        }\n    }\n}\nexports.EntryHandlerPredicate = EntryHandlerPredicate;\n//# sourceMappingURL=EntryHandlerPredicate.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeyword = void 0;\n/**\n * An abstract keyword entry handler.\n */\nclass EntryHandlerKeyword {\n    constructor(keyword) {\n        this.keyword = keyword;\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return key === this.keyword;\n    }\n}\nexports.EntryHandlerKeyword = EntryHandlerKeyword;\n//# sourceMappingURL=EntryHandlerKeyword.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@context');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Error if an out-of-order context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (parsingContext.processingStack[depth]\n                || parsingContext.processingType[depth]\n                || parsingContext.idStack[depth] !== undefined)) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // Find the parent context to inherit from.\n        // We actually request a context for the current depth (with fallback to parent)\n        // because we want to take into account any property-scoped contexts that are defined for this depth.\n        const parentContext = parsingContext.getContext(keys);\n        // Set the context for this scope\n        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n        parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n        parsingContext.emitContext(value);\n        await parsingContext.validateContext(await context);\n    }\n}\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;\n//# sourceMappingURL=EntryHandlerKeywordContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordGraph = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordGraph extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@graph');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // The current identifier identifies a graph for the deeper level.\n        parsingContext.graphStack[depth + 1] = true;\n    }\n}\nexports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;\n//# sourceMappingURL=EntryHandlerKeywordGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordId = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@id');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'string') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n        }\n        // Determine the canonical place for this id.\n        // For example, @nest parents should be ignored.\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        // Error if an @id for this node already existed.\n        if (parsingContext.idStack[depthProperties] !== undefined) {\n            if (parsingContext.idStack[depthProperties][0].listHead) {\n                // Error if an @list was already defined for this node\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n            }\n            else {\n                // Otherwise, the previous id was just because of an @id entry.\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext\n                    .idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n            }\n        }\n        // Save our @id on the stack\n        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n    }\n}\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;\n//# sourceMappingURL=EntryHandlerKeywordId.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordIncluded = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@included');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n        if ('@value' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        if ('@list' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;\n//# sourceMappingURL=EntryHandlerKeywordIncluded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordNest = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @nest entries.\n */\nclass EntryHandlerKeywordNest extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@nest');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        if ('@value' in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;\n//# sourceMappingURL=EntryHandlerKeywordNest.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordType = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../../Util\");\nconst EntryHandlerPredicate_1 = require(\"../EntryHandlerPredicate\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordType extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@type');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keyOriginal = keys[depth];\n        // The current identifier identifies an rdf:type predicate.\n        // But we only emit it once the node closes,\n        // as it's possible that the @type is used to identify the datatype of a literal, which we ignore here.\n        const context = await parsingContext.getContext(keys);\n        const predicate = util.rdfType;\n        const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, await util.unaliasKeywordParent(keys, depth));\n        // Handle multiple values if the value is an array\n        const elements = Array.isArray(value) ? value : [value];\n        for (const element of elements) {\n            if (typeof element !== 'string') {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));\n            }\n            const type = util.createVocabOrBaseTerm(context, element);\n            if (type) {\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, type, reverse);\n            }\n        }\n        // Collect type-scoped contexts if they exist\n        let scopedContext = Promise.resolve(context);\n        let hasTypedScopedContext = false;\n        for (const element of elements.sort()) { // Spec requires lexicographical ordering\n            const typeContext = Util_1.Util.getContextValue(context, '@context', element, null);\n            if (typeContext) {\n                hasTypedScopedContext = true;\n                scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));\n            }\n        }\n        // Error if an out-of-order type-scoped context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType)\n            && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order type-scoped context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // If at least least one type-scoped context applies, set them in the tree.\n        if (hasTypedScopedContext) {\n            // Do not propagate by default\n            scopedContext = scopedContext.then((c) => {\n                if (!('@propagate' in c.getContextRaw())) {\n                    c.getContextRaw()['@propagate'] = false;\n                }\n                // Set the original context at this depth as a fallback\n                // This is needed when a context was already defined at the given depth,\n                // and this context needs to remain accessible from child nodes when propagation is disabled.\n                if (c.getContextRaw()['@propagate'] === false) {\n                    c.getContextRaw()['@__propagateFallback'] = context.getContextRaw();\n                }\n                return c;\n            });\n            // Set the new context in the context tree\n            parsingContext.contextTree.setContext(keys.slice(0, keys.length - 1), scopedContext);\n        }\n        // Flag that type has been processed at this depth\n        parsingContext.processingType[depth] = true;\n    }\n}\nexports.EntryHandlerKeywordType = EntryHandlerKeywordType;\n//# sourceMappingURL=EntryHandlerKeywordType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordUnknownFallback = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerKeywordUnknownFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = await util.unaliasKeyword(keys[depth], keys, depth);\n        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            // Don't emit anything inside free-floating lists\n            if (!inProperty) {\n                if (key === '@list') {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n        if (keywordType !== undefined) {\n            if (keywordType && typeof value !== keywordType.type) {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n            }\n        }\n        else if (parsingContext.strictValues) {\n            parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n    '@index': { type: 'string', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },\n    '@list': null,\n    '@reverse': { type: 'object', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },\n    '@set': null,\n    '@value': null,\n};\n//# sourceMappingURL=EntryHandlerKeywordUnknownFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordValue = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @value entries.\n */\nclass EntryHandlerKeywordValue extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@value');\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        // If this is @value, mark it so in the stack so that no deeper handling of nodes occurs.\n        const key = keys[depth];\n        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys, depth)) {\n            parsingContext.literalStack[depth] = true;\n        }\n        return super.validate(parsingContext, util, keys, depth, inProperty);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return await util.unaliasKeyword(keys[depth], keys.slice(0, keys.length - 1), depth - 1, true) === '@value';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // If the value is valid, indicate that we are processing a literal.\n        // The actual value will be determined at the parent level when the @value is part of an object,\n        // because we may want to take into account additional entries such as @language.\n        // See {@link Util.valueToTerm}\n        // Indicate that we are processing a literal, and that no later predicates should be parsed at this depth.\n        parsingContext.literalStack[depth] = true;\n        // Void any buffers that we may have accumulated up until now\n        delete parsingContext.unidentifiedValuesBuffer[depth];\n        delete parsingContext.unidentifiedGraphsBuffer[depth];\n        // Indicate that we have not emitted at this depth\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;\n//# sourceMappingURL=EntryHandlerKeywordValue.js.map","/*global Buffer*/\n// Named constants with unique integer values\nvar C = {};\n// Tokens\nvar LEFT_BRACE    = C.LEFT_BRACE    = 0x1;\nvar RIGHT_BRACE   = C.RIGHT_BRACE   = 0x2;\nvar LEFT_BRACKET  = C.LEFT_BRACKET  = 0x3;\nvar RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;\nvar COLON         = C.COLON         = 0x5;\nvar COMMA         = C.COMMA         = 0x6;\nvar TRUE          = C.TRUE          = 0x7;\nvar FALSE         = C.FALSE         = 0x8;\nvar NULL          = C.NULL          = 0x9;\nvar STRING        = C.STRING        = 0xa;\nvar NUMBER        = C.NUMBER        = 0xb;\n// Tokenizer States\nvar START   = C.START   = 0x11;\nvar STOP    = C.STOP    = 0x12;\nvar TRUE1   = C.TRUE1   = 0x21;\nvar TRUE2   = C.TRUE2   = 0x22;\nvar TRUE3   = C.TRUE3   = 0x23;\nvar FALSE1  = C.FALSE1  = 0x31;\nvar FALSE2  = C.FALSE2  = 0x32;\nvar FALSE3  = C.FALSE3  = 0x33;\nvar FALSE4  = C.FALSE4  = 0x34;\nvar NULL1   = C.NULL1   = 0x41;\nvar NULL2   = C.NULL2   = 0x42;\nvar NULL3   = C.NULL3   = 0x43;\nvar NUMBER1 = C.NUMBER1 = 0x51;\nvar NUMBER3 = C.NUMBER3 = 0x53;\nvar STRING1 = C.STRING1 = 0x61;\nvar STRING2 = C.STRING2 = 0x62;\nvar STRING3 = C.STRING3 = 0x63;\nvar STRING4 = C.STRING4 = 0x64;\nvar STRING5 = C.STRING5 = 0x65;\nvar STRING6 = C.STRING6 = 0x66;\n// Parser States\nvar VALUE   = C.VALUE   = 0x71;\nvar KEY     = C.KEY     = 0x72;\n// Parser Modes\nvar OBJECT  = C.OBJECT  = 0x81;\nvar ARRAY   = C.ARRAY   = 0x82;\n// Character constants\nvar BACK_SLASH =      \"\\\\\".charCodeAt(0);\nvar FORWARD_SLASH =   \"\\/\".charCodeAt(0);\nvar BACKSPACE =       \"\\b\".charCodeAt(0);\nvar FORM_FEED =       \"\\f\".charCodeAt(0);\nvar NEWLINE =         \"\\n\".charCodeAt(0);\nvar CARRIAGE_RETURN = \"\\r\".charCodeAt(0);\nvar TAB =             \"\\t\".charCodeAt(0);\n\nvar STRING_BUFFER_SIZE = 64 * 1024;\n\nfunction Parser() {\n  this.tState = START;\n  this.value = undefined;\n\n  this.string = undefined; // string data\n  this.stringBuffer = Buffer.alloc ? Buffer.alloc(STRING_BUFFER_SIZE) : new Buffer(STRING_BUFFER_SIZE);\n  this.stringBufferOffset = 0;\n  this.unicode = undefined; // unicode escapes\n  this.highSurrogate = undefined;\n\n  this.key = undefined;\n  this.mode = undefined;\n  this.stack = [];\n  this.state = VALUE;\n  this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n  this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n  this.temp_buffs = { \"2\": new Buffer(2), \"3\": new Buffer(3), \"4\": new Buffer(4) }; // for rebuilding chars split before boundary is reached\n\n  // Stream offset\n  this.offset = -1;\n}\n\n// Slow code to string converter (only used when throwing syntax errors)\nParser.toknam = function (code) {\n  var keys = Object.keys(C);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    if (C[key] === code) { return key; }\n  }\n  return code && (\"0x\" + code.toString(16));\n};\n\nvar proto = Parser.prototype;\nproto.onError = function (err) { throw err; };\nproto.charError = function (buffer, i) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + JSON.stringify(String.fromCharCode(buffer[i])) + \" at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n};\nproto.appendStringChar = function (char) {\n  if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8');\n    this.stringBufferOffset = 0;\n  }\n\n  this.stringBuffer[this.stringBufferOffset++] = char;\n};\nproto.appendStringBuf = function (buf, start, end) {\n  var size = buf.length;\n  if (typeof start === 'number') {\n    if (typeof end === 'number') {\n      if (end < 0) {\n        // adding a negative end decreeses the size\n        size = buf.length - start + end;\n      } else {\n        size = end - start;\n      }\n    } else {\n      size = buf.length - start;\n    }\n  }\n\n  if (size < 0) {\n    size = 0;\n  }\n\n  if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n    this.stringBufferOffset = 0;\n  }\n\n  buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);\n  this.stringBufferOffset += size;\n};\nproto.write = function (buffer) {\n  if (typeof buffer === \"string\") buffer = new Buffer(buffer);\n  var n;\n  for (var i = 0, l = buffer.length; i < l; i++) {\n    if (this.tState === START){\n      n = buffer[i];\n      this.offset++;\n      if(n === 0x7b){ this.onToken(LEFT_BRACE, \"{\"); // {\n      }else if(n === 0x7d){ this.onToken(RIGHT_BRACE, \"}\"); // }\n      }else if(n === 0x5b){ this.onToken(LEFT_BRACKET, \"[\"); // [\n      }else if(n === 0x5d){ this.onToken(RIGHT_BRACKET, \"]\"); // ]\n      }else if(n === 0x3a){ this.onToken(COLON, \":\");  // :\n      }else if(n === 0x2c){ this.onToken(COMMA, \",\"); // ,\n      }else if(n === 0x74){ this.tState = TRUE1;  // t\n      }else if(n === 0x66){ this.tState = FALSE1;  // f\n      }else if(n === 0x6e){ this.tState = NULL1; // n\n      }else if(n === 0x22){ // \"\n        this.string = \"\";\n        this.stringBufferOffset = 0;\n        this.tState = STRING1;\n      }else if(n === 0x2d){ this.string = \"-\"; this.tState = NUMBER1; // -\n      }else{\n        if (n >= 0x30 && n < 0x40) { // 1-9\n          this.string = String.fromCharCode(n); this.tState = NUMBER3;\n        } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {\n          // whitespace\n        } else {\n          return this.charError(buffer, i);\n        }\n      }\n    }else if (this.tState === STRING1){ // After open quote\n      n = buffer[i]; // get current byte from buffer\n      // check for carry over of a multi byte char split between data chunks\n      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n      if (this.bytes_remaining > 0) {\n        for (var j = 0; j < this.bytes_remaining; j++) {\n          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];\n        }\n\n        this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);\n        this.bytes_in_sequence = this.bytes_remaining = 0;\n        i = i + j - 1;\n      } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n        if (n <= 193 || n > 244) {\n          return this.onError(new Error(\"Invalid UTF-8 character at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n        }\n        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n        if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split\n          for (var k = 0; k <= (buffer.length - 1 - i); k++) {\n            this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk\n          }\n          this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;\n          i = buffer.length - 1;\n        } else {\n          this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);\n          i = i + this.bytes_in_sequence - 1;\n        }\n      } else if (n === 0x22) {\n        this.tState = START;\n        this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n        this.stringBufferOffset = 0;\n        this.onToken(STRING, this.string);\n        this.offset += Buffer.byteLength(this.string, 'utf8') + 1;\n        this.string = undefined;\n      }\n      else if (n === 0x5c) {\n        this.tState = STRING2;\n      }\n      else if (n >= 0x20) { this.appendStringChar(n); }\n      else {\n          return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING2){ // After backslash\n      n = buffer[i];\n      if(n === 0x22){ this.appendStringChar(n); this.tState = STRING1;\n      }else if(n === 0x5c){ this.appendStringChar(BACK_SLASH); this.tState = STRING1;\n      }else if(n === 0x2f){ this.appendStringChar(FORWARD_SLASH); this.tState = STRING1;\n      }else if(n === 0x62){ this.appendStringChar(BACKSPACE); this.tState = STRING1;\n      }else if(n === 0x66){ this.appendStringChar(FORM_FEED); this.tState = STRING1;\n      }else if(n === 0x6e){ this.appendStringChar(NEWLINE); this.tState = STRING1;\n      }else if(n === 0x72){ this.appendStringChar(CARRIAGE_RETURN); this.tState = STRING1;\n      }else if(n === 0x74){ this.appendStringChar(TAB); this.tState = STRING1;\n      }else if(n === 0x75){ this.unicode = \"\"; this.tState = STRING3;\n      }else{\n        return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6){ // unicode hex codes\n      n = buffer[i];\n      // 0-9 A-F a-f\n      if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {\n        this.unicode += String.fromCharCode(n);\n        if (this.tState++ === STRING6) {\n          var intVal = parseInt(this.unicode, 16);\n          this.unicode = undefined;\n          if (this.highSurrogate !== undefined && intVal >= 0xDC00 && intVal < (0xDFFF + 1)) { //<56320,57343> - lowSurrogate\n            this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));\n            this.highSurrogate = undefined;\n          } else if (this.highSurrogate === undefined && intVal >= 0xD800 && intVal < (0xDBFF + 1)) { //<55296,56319> - highSurrogate\n            this.highSurrogate = intVal;\n          } else {\n            if (this.highSurrogate !== undefined) {\n              this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));\n              this.highSurrogate = undefined;\n            }\n            this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));\n          }\n          this.tState = STRING1;\n        }\n      } else {\n        return this.charError(buffer, i);\n      }\n    } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {\n        n = buffer[i];\n\n        switch (n) {\n          case 0x30: // 0\n          case 0x31: // 1\n          case 0x32: // 2\n          case 0x33: // 3\n          case 0x34: // 4\n          case 0x35: // 5\n          case 0x36: // 6\n          case 0x37: // 7\n          case 0x38: // 8\n          case 0x39: // 9\n          case 0x2e: // .\n          case 0x65: // e\n          case 0x45: // E\n          case 0x2b: // +\n          case 0x2d: // -\n            this.string += String.fromCharCode(n);\n            this.tState = NUMBER3;\n            break;\n          default:\n            this.tState = START;\n            var result = Number(this.string);\n\n            if (isNaN(result)){\n              return this.charError(buffer, i);\n            }\n\n            if ((this.string.match(/[0-9]+/) == this.string) && (result.toString() != this.string)) {\n              // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number\n              this.onToken(STRING, this.string);\n            } else {\n              this.onToken(NUMBER, result);\n            }\n\n            this.offset += this.string.length - 1;\n            this.string = undefined;\n            i--;\n            break;\n        }\n    }else if (this.tState === TRUE1){ // r\n      if (buffer[i] === 0x72) { this.tState = TRUE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE2){ // u\n      if (buffer[i] === 0x75) { this.tState = TRUE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE3){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(TRUE, true); this.offset+= 3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE1){ // a\n      if (buffer[i] === 0x61) { this.tState = FALSE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE2){ // l\n      if (buffer[i] === 0x6c) { this.tState = FALSE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE3){ // s\n      if (buffer[i] === 0x73) { this.tState = FALSE4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE4){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(FALSE, false); this.offset+= 4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL1){ // u\n      if (buffer[i] === 0x75) { this.tState = NULL2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL2){ // l\n      if (buffer[i] === 0x6c) { this.tState = NULL3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL3){ // l\n      if (buffer[i] === 0x6c) { this.tState = START; this.onToken(NULL, null); this.offset += 3; }\n      else { return this.charError(buffer, i); }\n    }\n  }\n};\nproto.onToken = function (token, value) {\n  // Override this to get events\n};\n\nproto.parseError = function (token, value) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + Parser.toknam(token) + (value ? (\"(\" + JSON.stringify(value) + \")\") : \"\") + \" in state \" + Parser.toknam(this.state)));\n};\nproto.push = function () {\n  this.stack.push({value: this.value, key: this.key, mode: this.mode});\n};\nproto.pop = function () {\n  var value = this.value;\n  var parent = this.stack.pop();\n  this.value = parent.value;\n  this.key = parent.key;\n  this.mode = parent.mode;\n  this.emit(value);\n  if (!this.mode) { this.state = VALUE; }\n};\nproto.emit = function (value) {\n  if (this.mode) { this.state = COMMA; }\n  this.onValue(value);\n};\nproto.onValue = function (value) {\n  // Override me\n};\nproto.onToken = function (token, value) {\n  if(this.state === VALUE){\n    if(token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL){\n      if (this.value) {\n        this.value[this.key] = value;\n      }\n      this.emit(value);\n    }else if(token === LEFT_BRACE){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = {};\n      } else {\n        this.value = {};\n      }\n      this.key = undefined;\n      this.state = KEY;\n      this.mode = OBJECT;\n    }else if(token === LEFT_BRACKET){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = [];\n      } else {\n        this.value = [];\n      }\n      this.key = 0;\n      this.mode = ARRAY;\n      this.state = VALUE;\n    }else if(token === RIGHT_BRACE){\n      if (this.mode === OBJECT) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else if(token === RIGHT_BRACKET){\n      if (this.mode === ARRAY) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else{\n      return this.parseError(token, value);\n    }\n  }else if(this.state === KEY){\n    if (token === STRING) {\n      this.key = value;\n      this.state = COLON;\n    } else if (token === RIGHT_BRACE) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else if(this.state === COLON){\n    if (token === COLON) { this.state = VALUE; }\n    else { return this.parseError(token, value); }\n  }else if(this.state === COMMA){\n    if (token === COMMA) {\n      if (this.mode === ARRAY) { this.key++; this.state = VALUE; }\n      else if (this.mode === OBJECT) { this.state = KEY; }\n\n    } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else{\n    return this.parseError(token, value);\n  }\n};\n\nParser.C = C;\n\nmodule.exports = Parser;\n"],"names":["Sink","ParserStream","Parser","constructor","options","super","module","exports","rdf","JsonLdParser","Transform","relativeIriProtocol","termCleanup","factory","term","termType","value","startsWith","namedNode","slice","length","quadCleanup","cleanup","quad","subject","predicate","object","graph","input","baseIRI","context","parser","dataFactory","streamingProfile","pipe","transform","objectMode","encoding","callback","on","Object","entries","forEach","prefix","iri","emit","err","destroy","DataFactory","BlankNode","id","this","nextId","equals","other","prototype","DefaultGraph","fromTermRaw","Literal","NamedNode","Quad","Variable","blankNode","literal","languageOrDatatype","indexOf","variable","defaultGraph","defaultGraphInstance","triple","fromTerm","original","call","fromQuad","language","datatype","stringDatatype","langStringDatatype","name","Error","Impl","import","output","assign","readable","__createBinding","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","p","hasOwnProperty","ContextTree","subTrees","getContext","keys","head","tail","subTree","subContext","then","depth","setContext","removeContext","path","jsonld_context_parser_1","stream_1","EntryHandlerArrayValue_1","EntryHandlerContainer_1","EntryHandlerInvalidFallback_1","EntryHandlerPredicate_1","EntryHandlerKeywordContext_1","EntryHandlerKeywordGraph_1","EntryHandlerKeywordId_1","EntryHandlerKeywordIncluded_1","EntryHandlerKeywordNest_1","EntryHandlerKeywordType_1","EntryHandlerKeywordUnknownFallback_1","EntryHandlerKeywordValue_1","ParsingContext_1","Util_1","http_link_header_1","readableObjectMode","parsingContext","ParsingContext","util","Util","jsonParser","contextJobs","typeJobs","contextAwaitingJobs","lastDepth","lastKeys","lastOnValueJob","Promise","resolve","attachJsonParserListeners","mode","fromHttpResponse","mediaType","headers","endsWith","ErrorCoded","ERROR_CODES","LOADING_DOCUMENT_FAILED","has","key","linkHeader","parse","link","MULTIPLE_CONTEXT_LINK_HEADERS","uri","ignoreMissingContextLinkHeader","contentType","match","exec","stream","PassThrough","error","parsed","data","push","_transform","chunk","write","newOnValueJob","lastDepthCheck","flushStacks","listPointer","listPointerStack","rdfRest","rdfNil","getDefaultGraph","listId","listHead","idStack","listRootDepth","splice","EntryHandlerContainer","isBufferableContainerHandler","pendingContainerFlushBuffers","flushBuffer","unaliasKeyword","parentKey","unaliasKeywordParent","emittedStack","handleKey","isValidKeyword","INVALID_REVERSE_PROPERTY_MAP","inProperty","validationStack","property","i","Math","max","validationResult","validateKey","valid","isLiteral","entryHandler","ENTRY_HANDLERS","testResult","test","handle","isStackProcessor","processingStack","Array","isArray","validateValueIndexes","unaliasedKeywordCacheStack","processingType","graphStack","graphContainerTermStack","jsonLiteralStack","literalStack","subjects","valueBuffer","unidentifiedValuesBuffer","depthOffsetGraph","getDepthOffsetGraph","graphs","getGraphContainerValue","bufferedValue","reverse","emitQuad","subGraphBuffer","getUnidentifiedGraphBufferSafe","graphBuffer","unidentifiedGraphsBuffer","topLevelProperties","validate","isPropertyHandler","onValue","stack","fill","map","v","isParsingContextInner","valueJobCb","contextTree","jobs","job","executeBufferedJobs","onError","applicableTypeJobs","applicableTypeJobIds","typeJob","isPrefixArray","sortedTypeJobs","sort","job1","job2","sortedApplicableTypeJobIds","jobId","DEFAULT_PROCESSING_MODE","EntryHandlerArrayValue","EntryHandlerKeywordContext","EntryHandlerKeywordId","EntryHandlerKeywordIncluded","EntryHandlerKeywordGraph","EntryHandlerKeywordNest","EntryHandlerKeywordType","EntryHandlerKeywordValue","EntryHandlerKeywordUnknownFallback","EntryHandlerPredicate","EntryHandlerInvalidFallback","ErrorCoded_1","ContextTree_1","JsonLdParser_1","contextParser","ContextParser","documentLoader","skipValidation","skipContextValidation","produceGeneralizedRdf","allowSubjectList","processingMode","strictValues","rdfDirection","normalizeLanguageTags","streamingProfileAllowOutOfOrderPlainType","activeProcessingMode","parseFloat","rootContext","parseContext","validateContext","JsonLdContextNormalized","parentContext","ignoreProtection","activeVersion","getContextRaw","PROCESSING_MODE_CONFLICT","INVALID_VERSION_VALUE","offset","keysOriginal","contextData","getContextPropagationAware","contextRaw","contextKeyEntry","scopedContext","propagate","originalDepth","hasApplicablePropertyScopedContext","lastKey","lastKeyValue","handlePendingContainerFlushBuffers","pendingFlushBuffer","emitError","emitContext","getUnidentifiedValueBufferSafe","buffer","getExpandOptions","EXPAND_OPTIONS","shiftStack","depthOffset","deeperIdStack","allowPrefixForcing","allowPrefixNonGenDelims","allowVocabRelativeToBase","rdf_data_factory_1","canonicalizeJson","rdfFirst","RDF","rdfType","rdfJson","getContextValue","contextKey","fallback","entry","type","getContextValueContainer","getContextValueType","valueType","getContextValueLanguage","getContextValueDirection","isContextValueReverse","getContextValueIndex","isPropertyReverse","isValidIri","needle","haystack","indexHashes","index","existingIndexValue","CONFLICTING_INDEXES","valueToTerm","valueToJsonString","getContextSelfOrPropertyScoped","unaliasKeywords","val","valueLanguage","valueDirection","valueIndex","subValue","JSON","stringify","INVALID_VALUE_OBJECT","INVALID_VALUE_OBJECT_VALUE","INVALID_INDEX_VALUE","INVALID_LANGUAGE_TAGGED_VALUE","validateLanguage","INVALID_LANGUAGE_TAGGED_STRING","toLowerCase","validateDirection","nullableTermToArray","createLanguageDirectionLiteral","INVALID_TYPED_VALUE","typeTerm","createVocabOrBaseTerm","INVALID_SET_OR_LIST_OBJECT","listValue","graphContainerEntries","values","resourceToTerm","stringValueToTerm","Boolean","toString","XSD_BOOLEAN","XSD_INTEGER","XSD_DOUBLE","predicateToTerm","expanded","expandTerm","substr","INVALID_IRI_MAPPING","expandOptions","intToString","Number","isFinite","isInteger","toExponential","replace","defaultDatatype","contextType","contextLanguage","contextDirection","direction","valueNode","disableCache","cachedUnaliasedKeyword","isPotentialKeyword","unliased","hash","newHash","containers","getContainerHandler","isComplexGraphContainer","validateReverseSubject","INVALID_REVERSE_PROPERTY_VALUE","depthContainer","graphContainerIndex","getContainerGraphIndex","graphId","keyUnaliased","getContainerKey","getPropertiesDepth","lastValidDepth","XSD","ContainerHandlerIdentifier","canCombineWithGraph","maybeId","ids","some","ContainerHandlerIndex","graphContainer","indexKey","indexPropertyRaw","INVALID_TERM_DEFINITION","indexProperty","indexValues","indexValue","handlePredicateObject","ContainerHandlerLanguage","INVALID_LANGUAGE_MAP_VALUE","ContainerHandlerType","containerTypeType","entryHasIdentifier","keyOriginal","listRootKey","keyOption","handleListElement","valueOriginal","listRootKeys","newLinkTerm","linkTerm","ContainerHandlerIdentifier_1","ContainerHandlerIndex_1","ContainerHandlerLanguage_1","ContainerHandlerType_1","isSimpleGraphContainer","checkGraphContainer","containersSelf","containersParent","containerHandleName","CONTAINER_HANDLERS","handler","containerName","depthProperties","depthPropertiesGraph","atGraph","objects","listValueContainer","EntryHandlerKeyword","keyword","EntryHandlerKeyword_1","INVALID_STREAMING_KEY_ORDER","INVALID_ID_VALUE","COLLIDING_KEYWORDS","INVALID_INCLUDED_VALUE","valueUnliased","INVALID_NEST_VALUE","elements","element","INVALID_TYPE_VALUE","hasTypedScopedContext","typeContext","c","keywordType","VALID_KEYWORDS_TYPES","errorCode","INVALID_REVERSE_VALUE","C","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","COLON","COMMA","TRUE","FALSE","NULL","STRING","NUMBER","START","STOP","TRUE1","TRUE2","TRUE3","FALSE1","FALSE2","FALSE3","FALSE4","NULL1","NULL2","NULL3","NUMBER1","NUMBER3","STRING1","STRING2","STRING3","STRING4","STRING5","STRING6","VALUE","KEY","OBJECT","ARRAY","BACK_SLASH","charCodeAt","FORWARD_SLASH","BACKSPACE","FORM_FEED","NEWLINE","CARRIAGE_RETURN","TAB","STRING_BUFFER_SIZE","tState","string","stringBuffer","Buffer","alloc","stringBufferOffset","unicode","highSurrogate","state","bytes_remaining","bytes_in_sequence","temp_buffs","toknam","code","l","proto","charError","String","fromCharCode","appendStringChar","char","appendStringBuf","buf","start","end","size","copy","n","onToken","j","byteLength","intVal","parseInt","result","isNaN","token","parseError","pop","parent"],"sourceRoot":""}