{"version":3,"file":"js/733.ddd32fad.js","mappings":"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","sources":["webpack://pko-rapid-triples/./node_modules/@rdfjs/serializer-ntriples/lib/SerializerStream.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/to-ntriples/lib/blankNode.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/sink/index.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/to-ntriples/lib/term.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/to-ntriples/lib/variable.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/to-ntriples/lib/defaultGraph.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/to-ntriples/lib/namedNode.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/to-ntriples/index.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/to-ntriples/lib/literal.js","webpack://pko-rapid-triples/./node_modules/readable-to-readable/index.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/to-ntriples/lib/quad.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/serializer-ntriples/index.js"],"sourcesContent":["const quadToNTriples = require('@rdfjs/to-ntriples').quadToNTriples\nconst ReadableToReadable = require('readable-to-readable')\n\nclass SerializerStream extends ReadableToReadable {\n  constructor (input) {\n    super(input, {\n      map: quad => quadToNTriples(quad) + '\\n'\n    })\n  }\n}\n\nmodule.exports = SerializerStream\n","function blankNode (blankNode) {\n  return '_:' + blankNode.value // TODO: escape special chars\n}\n\nmodule.exports = blankNode\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","const blankNode = require('./blankNode')\nconst defaultGraph = require('./defaultGraph')\nconst literal = require('./literal')\nconst namedNode = require('./namedNode')\nconst variable = require('./variable')\n\nfunction term (term) {\n  switch (term.termType) {\n    case 'BlankNode':\n      return blankNode(term)\n    case 'DefaultGraph':\n      return defaultGraph(term)\n    case 'Literal':\n      return literal(term)\n    case 'NamedNode':\n      return namedNode(term)\n    case 'Variable':\n      return variable(term)\n    default:\n      return undefined\n  }\n}\n\nmodule.exports = term\n","function variable (variable) {\n  return '?' + variable.value // TODO: escape special chars\n}\n\nmodule.exports = variable\n","function defaultGraph (defaultGraph) {\n  return ''\n}\n\nmodule.exports = defaultGraph\n","function namedNode (namedNode) {\n  return '<' + namedNode.value + '>' // TODO: escape special chars\n}\n\nmodule.exports = namedNode\n","const quad = require('./lib/quad')\nconst term = require('./lib/term')\n\nmodule.exports = {\n  quadToNTriples: quad,\n  termToNTriples: term\n}\n","const namedNode = require('./namedNode')\n\nconst echarRegEx = new RegExp('[\"\\\\\\\\\\n\\r]') // eslint-disable-line no-control-regex\nconst echarRegExAll = new RegExp('[\"\\\\\\\\\\n\\r]', 'g') // eslint-disable-line no-control-regex\n\nconst echarReplacement = {\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r'\n}\n\nfunction echarReplacer (char) {\n  return echarReplacement[char]\n}\n\nfunction escapeValue (value) {\n  if (echarRegEx.test(value)) {\n    return value.replace(echarRegExAll, echarReplacer)\n  }\n\n  return value\n}\n\nfunction literal (literal) {\n  const escapedValue = escapeValue(literal.value)\n\n  if (literal.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {\n    return '\"' + escapedValue + '\"'\n  }\n\n  if (literal.datatype.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString') {\n    return '\"' + escapedValue + '\"@' + literal.language\n  }\n\n  return '\"' + escapedValue + '\"^^' + namedNode(literal.datatype)\n}\n\nmodule.exports = literal\n","const { finished, Readable } = require('readable-stream')\n\nfunction nextLoop () {\n  return new Promise(resolve => setTimeout(resolve, 0))\n}\n\nclass ReadableToReadable extends Readable {\n  constructor (input, { end = true, map, ...args } = {}) {\n    super({\n      read: ReadableToReadable.readFrom(input, { end, map }),\n      ...args\n    })\n  }\n\n  static readFrom (input, { end = true, map = v => v } = {}) {\n    let done = false\n\n    finished(input, () => {\n      done = true\n    })\n\n    const read = async function () {\n      while (true) {\n        const chunk = input.read()\n\n        if (!chunk) {\n          if (done && end) {\n            this.push(null)\n          }\n\n          if (done) {\n            return true\n          }\n\n          await nextLoop()\n        } else {\n          if (!this.push(map(chunk))) {\n            return false\n          }\n        }\n      }\n    }\n\n    return read\n  }\n}\n\nmodule.exports = ReadableToReadable\n","const term = require('./term')\n\nfunction quad (quad) {\n  const subjectString = term(quad.subject)\n  const predicateString = term(quad.predicate)\n  const objectString = term(quad.object)\n  const graphString = term(quad.graph)\n\n  return `${subjectString} ${predicateString} ${objectString} ${graphString ? graphString + ' ' : ''}.`\n}\n\nmodule.exports = quad\n","const SerializerStream = require('./lib/SerializerStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Serializer extends Sink {\n  constructor () {\n    super(SerializerStream)\n  }\n}\n\nmodule.exports = Serializer\n"],"names":["quadToNTriples","ReadableToReadable","SerializerStream","constructor","input","super","map","quad","module","exports","blankNode","value","Sink","Impl","options","this","import","output","Object","assign","on","readable","emit","err","defaultGraph","literal","namedNode","variable","term","termType","termToNTriples","echarRegEx","RegExp","echarRegExAll","echarReplacement","echarReplacer","char","escapeValue","test","replace","escapedValue","datatype","language","finished","Readable","nextLoop","Promise","resolve","setTimeout","end","args","read","readFrom","v","done","async","chunk","push","subjectString","subject","predicateString","predicate","objectString","object","graphString","graph","Serializer"],"sourceRoot":""}