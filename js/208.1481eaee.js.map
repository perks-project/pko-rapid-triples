{"version":3,"file":"js/208.1481eaee.js","mappings":"+GAAA,MAAMA,EACJ,MAAAC,CAAQC,GACN,QAASA,GAASA,EAAMC,WAAaC,KAAKD,QAC5C,EAGFH,EAAaK,UAAUF,SAAW,eAClCH,EAAaK,UAAUC,MAAQ,GAE/BC,EAAOC,QAAUR,C,uBCTjB,MAAMA,EAAe,EAAQ,KAE7B,MAAMS,EACJ,WAAAC,CAAaC,EAASC,EAAWC,EAAQC,GACvCV,KAAKO,QAAUA,EACfP,KAAKQ,UAAYA,EACjBR,KAAKS,OAASA,EAGZT,KAAKU,MADHA,GAGW,IAAId,CAErB,CAEA,MAAAC,CAAQC,GAEN,QAASA,IAA6B,SAAnBA,EAAMC,WAAwBD,EAAMC,WACrDD,EAAMS,QAAQV,OAAOG,KAAKO,UAAYT,EAAMU,UAAUX,OAAOG,KAAKQ,YAClEV,EAAMW,OAAOZ,OAAOG,KAAKS,SAAWX,EAAMY,MAAMb,OAAOG,KAAKU,MAChE,EAGFL,EAAKJ,UAAUF,SAAW,OAC1BM,EAAKJ,UAAUC,MAAQ,GAEvBC,EAAOC,QAAUC,C,oBC1BjB,MAAMM,EACJ,WAAAL,CAAaM,EAAMC,GACjBb,KAAKY,KAAOA,EACZZ,KAAKa,QAAUA,CACjB,CAEA,MAAAC,CAAQC,EAAOF,GACb,MAAMG,EAAS,IAAIhB,KAAKY,KAAKG,EAAOE,OAAOC,OAAO,CAAC,EAAGlB,KAAKa,QAASA,IAYpE,OAVAE,EAAMI,GAAG,OAAO,KACTH,EAAOI,UACVJ,EAAOK,KAAK,MACd,IAGFN,EAAMI,GAAG,SAAUG,IACjBN,EAAOK,KAAK,QAASC,EAAG,IAGnBN,CACT,EAGFb,EAAOC,QAAUO,C,oBCvBjB,MAAMY,EACJ,WAAAjB,CAAakB,GACXxB,KAAKE,MAAQsB,CACf,CAEA,MAAA3B,CAAQC,GACN,QAASA,GAASA,EAAMC,WAAaC,KAAKD,UAAYD,EAAMI,QAAUF,KAAKE,KAC7E,EAGFqB,EAAStB,UAAUF,SAAW,WAE9BI,EAAOC,QAAUmB,C,wBCZjB,MAAME,EAAc,EAAQ,OAE5BtB,EAAOC,QAAUqB,C,wBCFjB,MAAM,SAAEC,EAAQ,SAAEC,GAAa,EAAQ,OAEvC,SAASC,IACP,OAAO,IAAIC,SAAQC,GAAWC,WAAWD,EAAS,IACpD,CAEA,MAAME,UAA2BL,EAC/B,WAAArB,CAAaS,GAAO,IAAEkB,GAAM,EAAI,IAAEC,KAAQC,GAAS,CAAC,GAClDC,MAAM,CACJC,KAAML,EAAmBM,SAASvB,EAAO,CAAEkB,MAAKC,WAC7CC,GAEP,CAEA,eAAOG,CAAUvB,GAAO,IAAEkB,GAAM,EAAI,IAAEC,EAAMK,GAAKA,GAAM,CAAC,GACtD,IAAIC,GAAO,EAEXd,EAASX,GAAO,KACdyB,GAAO,KAGT,MAAMH,EAAOI,iBACX,MAAO,EAAM,CACX,MAAMC,EAAQ3B,EAAMsB,OAEpB,GAAKK,GAWH,IAAK1C,KAAK2C,KAAKT,EAAIQ,IACjB,OAAO,MAZC,CAKV,GAJIF,GAAQP,GACVjC,KAAK2C,KAAK,MAGRH,EACF,OAAO,QAGHZ,GACR,CAKF,CACF,EAEA,OAAOS,CACT,EAGFlC,EAAOC,QAAU4B,C,wBC/CjB,MAAMY,EAAK,EAAQ,OACbC,EAAM,EAAQ,QACd,SAAEnB,GAAa,EAAQ,OACvBM,EAAqB,EAAQ,OAEnC,MAAMc,UAAqBd,EACzB,WAAA1B,CAAaS,GAAO,QAAEgC,EAAU,GAAE,QAAEC,EAAUH,GAAQ,CAAC,GACrD,MAAMI,EAAS,IAAIL,EAAGM,aAAa,CAAEH,UAASC,YAE9CZ,MAAMa,EAAQ,CAAEE,YAAY,IAE5BF,EAAO9B,GAAG,UAAU,CAACiC,EAAQC,KAC3BrD,KAAKqB,KAAK,SAAU+B,EAAQC,EAAI,IAGlCJ,EAAO9B,GAAG,SAASG,IACjBtB,KAAKsD,QAAQhC,EAAG,IAGlBI,EAAS1B,MAAM,KACbiD,EAAOhB,KAAI,IAGblB,EAAMwC,KAAKN,EACb,EAGF9C,EAAOC,QAAU0C,C,oBC3BjB,MAAMU,EACJ,WAAAlD,CAAamD,GACXzD,KAAKE,MAAQuD,CACf,CAEA,MAAA5D,CAAQC,GACN,QAASA,GAASA,EAAMC,WAAaC,KAAKD,UAAYD,EAAMI,QAAUF,KAAKE,KAC7E,EAGFsD,EAAUvD,UAAUF,SAAW,YAE/BI,EAAOC,QAAUoD,C,oBCZjB,MAAME,EACJ,WAAApD,CAAaqD,GACX3D,KAAKE,MAAQyD,GAAO,OAASD,EAAUE,MACzC,CAEA,MAAA/D,CAAQC,GACN,QAASA,GAASA,EAAMC,WAAaC,KAAKD,UAAYD,EAAMI,QAAUF,KAAKE,KAC7E,EAGFwD,EAAUzD,UAAUF,SAAW,YAE/B2D,EAAUE,OAAS,EAEnBzD,EAAOC,QAAUsD,C,wBCdjB,MAAMF,EAAY,EAAQ,OAE1B,MAAMK,EACJ,WAAAvD,CAAaJ,EAAO4D,EAAUC,GAC5B/D,KAAKE,MAAQA,EACbF,KAAK+D,SAAWF,EAAQG,eACxBhE,KAAK8D,SAAW,GAEZA,GACF9D,KAAK8D,SAAWA,EAChB9D,KAAK+D,SAAWF,EAAQI,oBACfF,IACT/D,KAAK+D,SAAWA,EAEpB,CAEA,MAAAlE,CAAQC,GACN,QAASA,GAASA,EAAMC,WAAaC,KAAKD,UAAYD,EAAMI,QAAUF,KAAKE,OACzEJ,EAAMgE,WAAa9D,KAAK8D,UAAYhE,EAAMiE,SAASlE,OAAOG,KAAK+D,SACnE,EAGFF,EAAQ5D,UAAUF,SAAW,UAE7B8D,EAAQI,mBAAqB,IAAIT,EAAU,yDAC3CK,EAAQG,eAAiB,IAAIR,EAAU,2CAEvCrD,EAAOC,QAAUyD,C,wBC3BjB,MAAMH,EAAY,EAAQ,OACpB9D,EAAe,EAAQ,KACvBsE,EAAc,EAAQ,OACtBL,EAAU,EAAQ,OAClBL,EAAY,EAAQ,OACpBnD,EAAO,EAAQ,MACfkB,EAAW,EAAQ,OAEzB,SAAS4C,EAAWjE,GAClB,OAAO,IAAIsD,EAAUtD,EACvB,CAEA,SAASkE,EAAWlE,GAClB,OAAO,IAAIwD,EAAUxD,EACvB,CAEA,SAASmE,EAASnE,EAAOoE,GACvB,MAAkC,kBAAvBA,GACgC,IAArCA,EAAmBC,QAAQ,KACtB,IAAIV,EAAQ3D,EAAOoE,GAGrB,IAAIT,EAAQ3D,EAAO,KAAMuB,EAAY0C,UAAUG,IAGjD,IAAIT,EAAQ3D,EAAO,KAAMoE,EAClC,CAEA,SAASE,EAAUtE,GACjB,OAAO,IAAIqB,EAASrB,EACtB,CAEA,SAASuE,IACP,OAAOhD,EAAYiD,oBACrB,CAEA,SAASC,EAAQpE,EAASC,EAAWC,GACnC,OAAOgB,EAAYmD,KAAKrE,EAASC,EAAWC,EAC9C,CAEA,SAASmE,EAAMrE,EAASC,EAAWC,EAAQC,GACzC,OAAO,IAAIL,EAAKE,EAASC,EAAWC,EAAQC,GAASe,EAAYiD,qBACnE,CAEA,SAASG,EAAUC,GACjB,OAAOZ,EAAYa,KAAKtD,EAAaqD,EACvC,CAEA,SAASE,EAAUF,GACjB,OAAOZ,EAAYa,KAAKtD,EAAaqD,EACvC,CAEA,MAAMrD,EAAc,CAClB0C,YACAC,YACAC,UACAG,WACAC,eACAE,SACAC,OACAC,WACAG,WACAN,qBAAsB,IAAI9E,GAG5BO,EAAOC,QAAUqB,C,wBCjEjB,MAAMqB,EAAe,EAAQ,OACvBnC,EAAO,EAAQ,OAErB,MAAMsE,UAAetE,EACnB,WAAAL,CAAaO,GACXuB,MAAMU,EAAcjC,EACtB,EAGFV,EAAOC,QAAU6E,C,oBCTjB,SAASJ,EAAUC,GACjB,IAAKA,EACH,OAAO,KAGT,GAA0B,cAAtBA,EAAS/E,SACX,OAAOC,KAAKoE,UAAUU,EAAS5E,OAGjC,GAA0B,iBAAtB4E,EAAS/E,SACX,OAAOC,KAAKyE,eAGd,GAA0B,YAAtBK,EAAS/E,SACX,OAAOC,KAAKqE,QAAQS,EAAS5E,MAAO4E,EAAShB,UAAY9D,KAAKmE,UAAUW,EAASf,SAAS7D,QAG5F,GAA0B,cAAtB4E,EAAS/E,SACX,OAAOC,KAAKmE,UAAUW,EAAS5E,OAGjC,GAA0B,SAAtB4E,EAAS/E,SAAqB,CAChC,MAAMQ,EAAUP,KAAK6E,SAASC,EAASvE,SACjCC,EAAYR,KAAK6E,SAASC,EAAStE,WACnCC,EAAST,KAAK6E,SAASC,EAASrE,QAChCC,EAAQV,KAAK6E,SAASC,EAASpE,OAErC,OAAOV,KAAK4E,KAAKrE,EAASC,EAAWC,EAAQC,EAC/C,CAEA,GAA0B,aAAtBoE,EAAS/E,SACX,OAAOC,KAAKwE,SAASM,EAAS5E,OAGhC,MAAM,IAAIgF,MAAM,oBAAoBJ,EAAS/E,WAC/C,CAEAI,EAAOC,QAAUyE,C","sources":["webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/DefaultGraph.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/Quad.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/sink/index.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/Variable.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/index.js","webpack://pko-rapid-triples/./node_modules/readable-to-readable/index.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/lib/ParserStream.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/NamedNode.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/BlankNode.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/Literal.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/DataFactory.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/index.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/fromTerm.js"],"sourcesContent":["class DefaultGraph {\n  equals (other) {\n    return !!other && other.termType === this.termType\n  }\n}\n\nDefaultGraph.prototype.termType = 'DefaultGraph'\nDefaultGraph.prototype.value = ''\n\nmodule.exports = DefaultGraph\n","const DefaultGraph = require('./DefaultGraph.js')\n\nclass Quad {\n  constructor (subject, predicate, object, graph) {\n    this.subject = subject\n    this.predicate = predicate\n    this.object = object\n\n    if (graph) {\n      this.graph = graph\n    } else {\n      this.graph = new DefaultGraph()\n    }\n  }\n\n  equals (other) {\n    // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n    return !!other && (other.termType === 'Quad' || !other.termType) &&\n      other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&\n      other.object.equals(this.object) && other.graph.equals(this.graph)\n  }\n}\n\nQuad.prototype.termType = 'Quad'\nQuad.prototype.value = ''\n\nmodule.exports = Quad\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","class Variable {\n  constructor (name) {\n    this.value = name\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nVariable.prototype.termType = 'Variable'\n\nmodule.exports = Variable\n","const DataFactory = require('./lib/DataFactory.js')\n\nmodule.exports = DataFactory\n","const { finished, Readable } = require('readable-stream')\n\nfunction nextLoop () {\n  return new Promise(resolve => setTimeout(resolve, 0))\n}\n\nclass ReadableToReadable extends Readable {\n  constructor (input, { end = true, map, ...args } = {}) {\n    super({\n      read: ReadableToReadable.readFrom(input, { end, map }),\n      ...args\n    })\n  }\n\n  static readFrom (input, { end = true, map = v => v } = {}) {\n    let done = false\n\n    finished(input, () => {\n      done = true\n    })\n\n    const read = async function () {\n      while (true) {\n        const chunk = input.read()\n\n        if (!chunk) {\n          if (done && end) {\n            this.push(null)\n          }\n\n          if (done) {\n            return true\n          }\n\n          await nextLoop()\n        } else {\n          if (!this.push(map(chunk))) {\n            return false\n          }\n        }\n      }\n    }\n\n    return read\n  }\n}\n\nmodule.exports = ReadableToReadable\n","const N3 = require('n3')\nconst rdf = require('@rdfjs/data-model')\nconst { finished } = require('readable-stream')\nconst ReadableToReadable = require('readable-to-readable')\n\nclass ParserStream extends ReadableToReadable {\n  constructor (input, { baseIRI = '', factory = rdf } = {}) {\n    const parser = new N3.StreamParser({ baseIRI, factory })\n\n    super(parser, { objectMode: true })\n\n    parser.on('prefix', (prefix, term) => {\n      this.emit('prefix', prefix, term)\n    })\n\n    parser.on('error', err => {\n      this.destroy(err)\n    })\n\n    finished(this, () => {\n      parser.end()\n    })\n\n    input.pipe(parser)\n  }\n}\n\nmodule.exports = ParserStream\n","class NamedNode {\n  constructor (iri) {\n    this.value = iri\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nNamedNode.prototype.termType = 'NamedNode'\n\nmodule.exports = NamedNode\n","class BlankNode {\n  constructor (id) {\n    this.value = id || ('b' + (++BlankNode.nextId))\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nBlankNode.prototype.termType = 'BlankNode'\n\nBlankNode.nextId = 0\n\nmodule.exports = BlankNode\n","const NamedNode = require('./NamedNode.js')\n\nclass Literal {\n  constructor (value, language, datatype) {\n    this.value = value\n    this.datatype = Literal.stringDatatype\n    this.language = ''\n\n    if (language) {\n      this.language = language\n      this.datatype = Literal.langStringDatatype\n    } else if (datatype) {\n      this.datatype = datatype\n    }\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value &&\n      other.language === this.language && other.datatype.equals(this.datatype)\n  }\n}\n\nLiteral.prototype.termType = 'Literal'\n\nLiteral.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')\nLiteral.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')\n\nmodule.exports = Literal\n","const BlankNode = require('./BlankNode.js')\nconst DefaultGraph = require('./DefaultGraph.js')\nconst fromTermRaw = require('./fromTerm.js')\nconst Literal = require('./Literal.js')\nconst NamedNode = require('./NamedNode.js')\nconst Quad = require('./Quad.js')\nconst Variable = require('./Variable.js')\n\nfunction namedNode (value) {\n  return new NamedNode(value)\n}\n\nfunction blankNode (value) {\n  return new BlankNode(value)\n}\n\nfunction literal (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nfunction variable (value) {\n  return new Variable(value)\n}\n\nfunction defaultGraph () {\n  return DataFactory.defaultGraphInstance\n}\n\nfunction triple (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nfunction quad (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nfunction fromTerm (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nfunction fromQuad (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n}\n\nmodule.exports = DataFactory\n","const ParserStream = require('./lib/ParserStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","function fromTerm (original) {\n  if (!original) {\n    return null\n  }\n\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value)\n  }\n\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph()\n  }\n\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))\n  }\n\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value)\n  }\n\n  if (original.termType === 'Quad') {\n    const subject = this.fromTerm(original.subject)\n    const predicate = this.fromTerm(original.predicate)\n    const object = this.fromTerm(original.object)\n    const graph = this.fromTerm(original.graph)\n\n    return this.quad(subject, predicate, object, graph)\n  }\n\n  if (original.termType === 'Variable') {\n    return this.variable(original.value)\n  }\n\n  throw new Error(`unknown termType ${original.termType}`)\n}\n\nmodule.exports = fromTerm\n"],"names":["DefaultGraph","equals","other","termType","this","prototype","value","module","exports","Quad","constructor","subject","predicate","object","graph","Sink","Impl","options","import","input","output","Object","assign","on","readable","emit","err","Variable","name","DataFactory","finished","Readable","nextLoop","Promise","resolve","setTimeout","ReadableToReadable","end","map","args","super","read","readFrom","v","done","async","chunk","push","N3","rdf","ParserStream","baseIRI","factory","parser","StreamParser","objectMode","prefix","term","destroy","pipe","NamedNode","iri","BlankNode","id","nextId","Literal","language","datatype","stringDatatype","langStringDatatype","fromTermRaw","namedNode","blankNode","literal","languageOrDatatype","indexOf","variable","defaultGraph","defaultGraphInstance","triple","quad","fromTerm","original","call","fromQuad","Parser","Error"],"sourceRoot":""}