{"version":3,"file":"js/420.0d40badd.js","mappings":"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","sources":["webpack://rapid-triples/./node_modules/@rdfjs/serializer-jsonld/index.js","webpack://rapid-triples/./node_modules/@rdfjs/serializer-jsonld/lib/ObjectEncoder.js","webpack://rapid-triples/./node_modules/@rdfjs/serializer-jsonld/lib/SerializerStream.js","webpack://rapid-triples/./node_modules/@rdfjs/serializer-jsonld/lib/StringEncoder.js","webpack://rapid-triples/./node_modules/@rdfjs/sink/index.js"],"sourcesContent":["const SerializerStream = require('./lib/SerializerStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Serializer extends Sink {\n  constructor (options) {\n    super(SerializerStream, options)\n  }\n}\n\nmodule.exports = Serializer\n","class ObjectEncoder {\n  constructor (stream) {\n    this.stream = stream\n    this.array = []\n  }\n\n  push (jsonld) {\n    this.array.push(jsonld)\n  }\n\n  end () {\n    this.stream.push(this.array)\n    this.stream.push(null)\n  }\n}\n\nmodule.exports = ObjectEncoder\n","const Readable = require('readable-stream')\nconst ObjectEncoder = require('./ObjectEncoder')\nconst StringEncoder = require('./StringEncoder')\n\nclass SerializerStream extends Readable {\n  constructor (input, { encoding = 'object' } = {}) {\n    super({\n      objectMode: true,\n      read: () => {}\n    })\n\n    if (encoding === 'object') {\n      this.encoder = new ObjectEncoder(this)\n    }\n\n    if (encoding === 'string') {\n      this.encoder = new StringEncoder(this)\n    }\n\n    if (!this.encoder) {\n      throw new Error(`unknown encoding: ${encoding}`)\n    }\n\n    input.on('data', quad => {\n      const jsonld = {}\n      let triple = jsonld\n\n      if (quad.graph.termType !== 'DefaultGraph') {\n        jsonld['@id'] = quad.graph.value\n        jsonld['@graph'] = {}\n        triple = jsonld['@graph']\n      }\n\n      triple['@id'] = SerializerStream.subjectValue(quad.subject)\n\n      if (quad.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type') {\n        triple['@type'] = SerializerStream.subjectValue(quad.object)\n      } else {\n        triple[quad.predicate.value] = SerializerStream.objectValue(quad.object)\n      }\n\n      this.encoder.push(jsonld)\n    })\n\n    input.on('end', () => this.encoder.end())\n\n    input.on('error', err => this.emit('error', err))\n  }\n\n  static subjectValue (subject) {\n    return subject.termType === 'BlankNode' ? '_:' + subject.value : subject.value\n  }\n\n  static objectValue (object) {\n    if (object.termType === 'NamedNode') {\n      return { '@id': object.value }\n    }\n\n    if (object.termType === 'BlankNode') {\n      return { '@id': '_:' + object.value }\n    }\n\n    if (object.language) {\n      return { '@language': object.language, '@value': object.value }\n    } else if (object.datatype && object.datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n      return { '@type': object.datatype.value, '@value': object.value }\n    } else {\n      return object.value\n    }\n  }\n}\n\nmodule.exports = SerializerStream\n","class StringEncoder {\n  constructor (stream) {\n    this.stream = stream\n    this.first = true\n\n    this.stream.push('[')\n  }\n\n  push (jsonld) {\n    if (this.first) {\n      this.first = false\n    } else {\n      this.stream.push(',')\n    }\n\n    this.stream.push(JSON.stringify(jsonld))\n  }\n\n  end () {\n    this.stream.push(']')\n    this.stream.push(null)\n  }\n}\n\nmodule.exports = StringEncoder\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n"],"names":["SerializerStream","Sink","Serializer","constructor","options","super","module","exports","ObjectEncoder","stream","this","array","push","jsonld","end","Readable","StringEncoder","input","encoding","objectMode","read","encoder","Error","on","quad","triple","graph","termType","value","subjectValue","subject","predicate","object","objectValue","err","emit","language","datatype","first","JSON","stringify","Impl","import","output","Object","assign","readable"],"sourceRoot":""}