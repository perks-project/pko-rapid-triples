{"version":3,"file":"js/420.aa9e3d5e.js","mappings":"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","sources":["webpack://pko-rapid-triples/./node_modules/@rdfjs/sink/index.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/serializer-jsonld/index.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/serializer-jsonld/lib/SerializerStream.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/serializer-jsonld/lib/StringEncoder.js","webpack://pko-rapid-triples/./node_modules/@rdfjs/serializer-jsonld/lib/ObjectEncoder.js"],"sourcesContent":["class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","const SerializerStream = require('./lib/SerializerStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Serializer extends Sink {\n  constructor (options) {\n    super(SerializerStream, options)\n  }\n}\n\nmodule.exports = Serializer\n","const Readable = require('readable-stream')\nconst ObjectEncoder = require('./ObjectEncoder')\nconst StringEncoder = require('./StringEncoder')\n\nclass SerializerStream extends Readable {\n  constructor (input, { encoding = 'object' } = {}) {\n    super({\n      objectMode: true,\n      read: () => {}\n    })\n\n    if (encoding === 'object') {\n      this.encoder = new ObjectEncoder(this)\n    }\n\n    if (encoding === 'string') {\n      this.encoder = new StringEncoder(this)\n    }\n\n    if (!this.encoder) {\n      throw new Error(`unknown encoding: ${encoding}`)\n    }\n\n    input.on('data', quad => {\n      const jsonld = {}\n      let triple = jsonld\n\n      if (quad.graph.termType !== 'DefaultGraph') {\n        jsonld['@id'] = quad.graph.value\n        jsonld['@graph'] = {}\n        triple = jsonld['@graph']\n      }\n\n      triple['@id'] = SerializerStream.subjectValue(quad.subject)\n\n      if (quad.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type') {\n        triple['@type'] = SerializerStream.subjectValue(quad.object)\n      } else {\n        triple[quad.predicate.value] = SerializerStream.objectValue(quad.object)\n      }\n\n      this.encoder.push(jsonld)\n    })\n\n    input.on('end', () => this.encoder.end())\n\n    input.on('error', err => this.emit('error', err))\n  }\n\n  static subjectValue (subject) {\n    return subject.termType === 'BlankNode' ? '_:' + subject.value : subject.value\n  }\n\n  static objectValue (object) {\n    if (object.termType === 'NamedNode') {\n      return { '@id': object.value }\n    }\n\n    if (object.termType === 'BlankNode') {\n      return { '@id': '_:' + object.value }\n    }\n\n    if (object.language) {\n      return { '@language': object.language, '@value': object.value }\n    } else if (object.datatype && object.datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n      return { '@type': object.datatype.value, '@value': object.value }\n    } else {\n      return object.value\n    }\n  }\n}\n\nmodule.exports = SerializerStream\n","class StringEncoder {\n  constructor (stream) {\n    this.stream = stream\n    this.first = true\n\n    this.stream.push('[')\n  }\n\n  push (jsonld) {\n    if (this.first) {\n      this.first = false\n    } else {\n      this.stream.push(',')\n    }\n\n    this.stream.push(JSON.stringify(jsonld))\n  }\n\n  end () {\n    this.stream.push(']')\n    this.stream.push(null)\n  }\n}\n\nmodule.exports = StringEncoder\n","class ObjectEncoder {\n  constructor (stream) {\n    this.stream = stream\n    this.array = []\n  }\n\n  push (jsonld) {\n    this.array.push(jsonld)\n  }\n\n  end () {\n    this.stream.push(this.array)\n    this.stream.push(null)\n  }\n}\n\nmodule.exports = ObjectEncoder\n"],"names":["Sink","constructor","Impl","options","this","import","input","output","Object","assign","on","readable","emit","err","module","exports","SerializerStream","Serializer","super","Readable","ObjectEncoder","StringEncoder","encoding","objectMode","read","encoder","Error","quad","jsonld","triple","graph","termType","value","subjectValue","subject","predicate","object","objectValue","push","end","language","datatype","stream","first","JSON","stringify","array"],"sourceRoot":""}