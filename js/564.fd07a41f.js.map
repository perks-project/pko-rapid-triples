{"version":3,"file":"js/564.fd07a41f.js","mappings":"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","sources":["webpack://pko-rapid-triples/./node_modules/n3/src/N3Util.js","webpack://pko-rapid-triples/./node_modules/n3/src/N3Writer.js","webpack://pko-rapid-triples/./node_modules/n3/src/N3Store.js","webpack://pko-rapid-triples/./node_modules/n3/src/N3StoreFactory.js","webpack://pko-rapid-triples/./node_modules/n3/src/N3Reasoner.js","webpack://pko-rapid-triples/./node_modules/n3/src/N3StreamWriter.js","webpack://pko-rapid-triples/./node_modules/n3/src/index.js"],"sourcesContent":["// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri.value || iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals(other) {\n    return other === this;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n      if (options.baseIRI) {\n        this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)\n            }${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);\n        this._baseLength = options.baseIRI.length;\n      }\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    let quadsString = '';\n    for (const quad of quads)\n      quadsString += this.quadToString(quad.subject, quad.predicate, quad.object, quad.graph);\n    return quadsString;\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri))\n      iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF-star quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist, /[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([_a-zA-Z0-9][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n\nfunction escapeRegex(regex) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { Readable } from 'readable-stream';\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nimport N3Writer from './N3Writer';\n\nconst ITERATOR = Symbol('iter');\n\nfunction merge(target, source, depth = 4) {\n  if (depth === 0)\n    return Object.assign(target, source);\n\n  for (const key in source)\n    target[key] = merge(target[key] || Object.create(null), source[key], depth - 1);\n\n  return target;\n}\n\n/**\n * Determines the intersection of the `_graphs` index s1 and s2.\n * s1 and s2 *must* belong to Stores that share an `_entityIndex`.\n *\n * False is returned when there is no intersection; this should\n * *not* be set as the value for an index.\n */\nfunction intersect(s1, s2, depth = 4) {\n  let target = false;\n\n  for (const key in s1) {\n    if (key in s2) {\n      const intersection = depth === 0 ? null : intersect(s1[key], s2[key], depth - 1);\n      if (intersection !== false) {\n        target = target || Object.create(null);\n        target[key] = intersection;\n      }\n      // Depth 3 is the 'subjects', 'predicates' and 'objects' keys.\n      // If the 'subjects' index is empty, so will the 'predicates' and 'objects' index.\n      else if (depth === 3) {\n        return false;\n      }\n    }\n  }\n\n  return target;\n}\n\n/**\n * Determines the difference of the `_graphs` index s1 and s2.\n * s1 and s2 *must* belong to Stores that share an `_entityIndex`.\n *\n * False is returned when there is no difference; this should\n * *not* be set as the value for an index.\n */\nfunction difference(s1, s2, depth = 4) {\n  let target = false;\n\n  for (const key in s1) {\n    // When the key is not in the index, then none of the triples defined by s1[key] are\n    // in s2 and so we want to copy them over to the resultant store.\n    if (!(key in s2)) {\n      target = target || Object.create(null);\n      target[key] = depth === 0 ? null : merge({}, s1[key], depth - 1);\n    }\n    else if (depth !== 0) {\n      const diff = difference(s1[key], s2[key], depth - 1);\n      if (diff !== false) {\n        target = target || Object.create(null);\n        target[key] = diff;\n      }\n      // Depth 3 is the 'subjects', 'predicates' and 'objects' keys.\n      // If the 'subjects' index is empty, so will the 'predicates' and 'objects' index.\n      else if (depth === 3) {\n        return false;\n      }\n    }\n  }\n\n  return target;\n}\n\n// ## Constructor\nexport class N3EntityIndex {\n  constructor(options = {}) {\n    this._id = 1;\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._ids = Object.create(null);\n    this._ids[''] = 1;\n     // inverse of `_ids`\n    this._entities = Object.create(null);\n    this._entities[1] = '';\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n    this._factory = options.factory || N3DataFactory;\n  }\n\n  _termFromId(id) {\n    if (id[0] === '.') {\n      const entities = this._entities;\n      const terms = id.split('.');\n      const q = this._factory.quad(\n        this._termFromId(entities[terms[1]]),\n        this._termFromId(entities[terms[2]]),\n        this._termFromId(entities[terms[3]]),\n        terms[4] && this._termFromId(entities[terms[4]]),\n      );\n      return q;\n    }\n    return termFromId(id, this._factory);\n  }\n\n  _termToNumericId(term) {\n    if (term.termType === 'Quad') {\n      const s = this._termToNumericId(term.subject),\n          p = this._termToNumericId(term.predicate),\n          o = this._termToNumericId(term.object);\n      let g;\n\n      return s && p && o && (isDefaultGraph(term.graph) || (g = this._termToNumericId(term.graph))) &&\n        this._ids[g ? `.${s}.${p}.${o}.${g}` : `.${s}.${p}.${o}`];\n    }\n    return this._ids[termToId(term)];\n  }\n\n  _termToNewNumericId(term) {\n    // This assumes that no graph term is present - we may wish to error if there is one\n    const str = term && term.termType === 'Quad' ?\n      `.${this._termToNewNumericId(term.subject)}.${this._termToNewNumericId(term.predicate)}.${this._termToNewNumericId(term.object)}${\n        isDefaultGraph(term.graph) ? '' : `.${this._termToNewNumericId(term.graph)}`\n      }`\n      : termToId(term);\n\n    return this._ids[str] || (this._ids[this._entities[++this._id] = str] = this._id);\n  }\n\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n}\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0] && !(typeof quads.match === 'function'))\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n    this._entityIndex = options.entityIndex || new N3EntityIndex({ factory: this._factory });\n    this._entities = this._entityIndex._entities;\n    this._termFromId = this._entityIndex._termFromId.bind(this._entityIndex);\n    this._termToNumericId = this._entityIndex._termToNumericId.bind(this._entityIndex);\n    this._termToNewNumericId = this._entityIndex._termToNewNumericId.bind(this._entityIndex);\n\n    // Add quads if passed\n    if (quads)\n      this.addAll(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graphId` will be the graph of the created quads.\n  *_findInIndex(index0, key0, key1, key2, name0, name1, name2, graphId) {\n    let tmp, index1, index2;\n    const entityKeys = this._entities;\n    const graph = this._termFromId(entityKeys[graphId]);\n    const parts = { subject: null, predicate: null, object: null };\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        parts[name0] = this._termFromId(entityKeys[value0]);\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            parts[name1] = this._termFromId(entityKeys[value1]);\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              parts[name2] = this._termFromId(entityKeys[values[l]]);\n              yield this._factory.quad(parts.subject, parts.predicate, parts.object, graph);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    graph = graph === '' ? 1 : (graph && (this._termToNumericId(graph) || -1));\n    return typeof graph !== 'number' ? this._graphs : { [graph]: this._graphs[graph] };\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(this._termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `add` adds the specified quad to the dataset.\n  // Returns the dataset instance it was called on.\n  // Existing quads, as defined in Quad.equals, will be ignored.\n  add(quad) {\n    this.addQuad(quad);\n    return this;\n  }\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    graph = graph ? this._termToNewNumericId(graph) : 1;\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    subject   = this._termToNewNumericId(subject);\n    predicate = this._termToNewNumericId(predicate);\n    object    = this._termToNewNumericId(object);\n\n    if (!this._addToIndex(graphItem.subjects,   subject,   predicate, object))\n      return false;\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return true;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `delete` removes the specified quad from the dataset.\n  // Returns the dataset instance it was called on.\n  delete(quad) {\n    this.removeQuad(quad);\n    return this;\n  }\n\n  // ### `has` determines whether a dataset includes a certain quad or quad pattern.\n  has(subjectOrQuad, predicate, object, graph) {\n    if (subjectOrQuad && subjectOrQuad.subject)\n      ({ subject: subjectOrQuad, predicate, object, graph } = subjectOrQuad);\n    return !this.readQuads(subjectOrQuad, predicate, object, graph).next().done;\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      ({ subject, predicate, object, graph } = subject);\n    // Convert terms to internal string representation\n    graph = graph ? this._termToNumericId(graph) : 1;\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = subject && this._termToNumericId(subject)) || !(predicate = predicate && this._termToNumericId(predicate)) ||\n        !(object     = object && this._termToNumericId(object))  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    const iterable = this.readQuads(subject, predicate, object, graph);\n    stream._read = size => {\n      while (--size >= 0) {\n        const { done, value } = iterable.next();\n        if (done) {\n          stream.push(null);\n          return;\n        }\n        stream.push(value);\n      }\n    };\n\n    return this.remove(stream);\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    return [...this.readQuads(subject, predicate, object, graph)];\n  }\n\n  /**\n   * `readQuads` returns a generator of quads matching a pattern.\n   * Setting any field to `undefined` or `null` indicates a wildcard.\n   * @deprecated Use `match` instead.\n   */\n  *readQuads(subject, predicate, object, graph) {\n    const graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (subject   && !(subjectId   = this._termToNumericId(subject))   ||\n        predicate && !(predicateId = this._termToNumericId(predicate)) ||\n        object    && !(objectId    = this._termToNumericId(object)))\n      return;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            yield* this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            yield* this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          yield* this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          yield* this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          yield* this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId);\n      }\n    }\n  }\n\n  // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.\n  // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.\n  // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.\n  // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  // For backwards compatibility, the object return also implements the Readable stream interface.\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph, { entityIndex: this._entityIndex });\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    const graphs = this._getGraphs(graph);\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (subject   && !(subjectId   = this._termToNumericId(subject))   ||\n        predicate && !(predicateId = this._termToNumericId(predicate)) ||\n        object    && !(objectId    = this._termToNumericId(object)))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad, this);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    return !this.some(quad => !callback(quad, this), subject, predicate, object, graph);\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    for (const quad of this.readQuads(subject, predicate, object, graph))\n      if (callback(quad, this))\n        return true;\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    const graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (predicate && !(predicateId = this._termToNumericId(predicate)) ||\n        object    && !(objectId    = this._termToNumericId(object)))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    const graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (subject   && !(subjectId   = this._termToNumericId(subject))   ||\n        object    && !(objectId    = this._termToNumericId(object)))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    const graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (subject   && !(subjectId   = this._termToNumericId(subject))   ||\n        predicate && !(predicateId = this._termToNumericId(predicate)))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, this._termFromId(this._entities[graph]));\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    return this._entityIndex.createBlankNode(suggestedName);\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n\n  /**\n   * Returns `true` if the current dataset is a superset of the given dataset; in other words, returns `true` if\n   * the given dataset is a subset of, i.e., is contained within, the current dataset.\n   *\n   * Blank Nodes will be normalized.\n   */\n  addAll(quads) {\n    if (quads instanceof DatasetCoreAndReadableStream)\n      quads = quads.filtered;\n\n    if (Array.isArray(quads))\n      this.addQuads(quads);\n    else if (quads instanceof N3Store && quads._entityIndex === this._entityIndex) {\n      if (quads._size !== 0) {\n        this._graphs = merge(this._graphs, quads._graphs);\n        this._size = null; // Invalidate the cached size\n      }\n    }\n    else {\n      for (const quad of quads)\n        this.add(quad);\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if the current dataset is a superset of the given dataset; in other words, returns `true` if\n   * the given dataset is a subset of, i.e., is contained within, the current dataset.\n   *\n   * Blank Nodes will be normalized.\n   */\n  contains(other) {\n    if (other instanceof DatasetCoreAndReadableStream)\n      other = other.filtered;\n\n    if (other === this)\n      return true;\n\n    if (!(other instanceof N3Store) || this._entityIndex !== other._entityIndex)\n      return other.every(quad => this.has(quad));\n\n    const g1 = this._graphs, g2 = other._graphs;\n    let s1, s2, p1, p2, o1;\n    for (const graph in g2) {\n      if (!(s1 = g1[graph])) return false;\n      s1 = s1.subjects;\n      for (const subject in (s2 = g2[graph].subjects)) {\n        if (!(p1 = s1[subject])) return false;\n        for (const predicate in (p2 = s2[subject])) {\n          if (!(o1 = p1[predicate])) return false;\n          for (const object in p2[predicate])\n            if (!(object in o1)) return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * This method removes the quads in the current dataset that match the given arguments.\n   *\n   * The logic described in {@link https://rdf.js.org/dataset-spec/#quad-matching|Quad Matching} is applied for each\n   * quad in this dataset, to select the quads which will be deleted.\n   *\n   * @param subject   The optional exact subject to match.\n   * @param predicate The optional exact predicate to match.\n   * @param object    The optional exact object to match.\n   * @param graph     The optional exact graph to match.\n   */\n  deleteMatches(subject, predicate, object, graph) {\n    for (const quad of this.match(subject, predicate, object, graph))\n      this.removeQuad(quad);\n    return this;\n  }\n\n  /**\n   * Returns a new dataset that contains all quads from the current dataset that are not included in the given dataset.\n   */\n  difference(other) {\n    if (other && other instanceof DatasetCoreAndReadableStream)\n      other = other.filtered;\n\n    if (other === this)\n      return new N3Store({ entityIndex: this._entityIndex });\n\n    if ((other instanceof N3Store) && other._entityIndex === this._entityIndex) {\n      const store = new N3Store({ entityIndex: this._entityIndex });\n      const graphs = difference(this._graphs, other._graphs);\n      if (graphs) {\n        store._graphs = graphs;\n        store._size = null;\n      }\n      return store;\n    }\n\n    return this.filter(quad => !other.has(quad));\n  }\n\n  /**\n   * Returns true if the current dataset contains the same graph structure as the given dataset.\n   *\n   * Blank Nodes will be normalized.\n   */\n  equals(other) {\n    if (other instanceof DatasetCoreAndReadableStream)\n      other = other.filtered;\n\n    return other === this || (this.size === other.size && this.contains(other));\n  }\n\n  /**\n   * Creates a new dataset with all the quads that pass the test implemented by the provided `iteratee`.\n   *\n   * This method is aligned with Array.prototype.filter() in ECMAScript-262.\n   */\n  filter(iteratee) {\n    const store = new N3Store({ entityIndex: this._entityIndex });\n    for (const quad of this)\n      if (iteratee(quad, this))\n        store.add(quad);\n    return store;\n  }\n\n  /**\n   * Returns a new dataset containing all quads from the current dataset that are also included in the given dataset.\n   */\n  intersection(other) {\n    if (other instanceof DatasetCoreAndReadableStream)\n      other = other.filtered;\n\n    if (other === this) {\n      const store = new N3Store({ entityIndex: this._entityIndex });\n      store._graphs = merge(Object.create(null), this._graphs);\n      store._size = this._size;\n      return store;\n    }\n    else if ((other instanceof N3Store) && this._entityIndex === other._entityIndex) {\n      const store = new N3Store({ entityIndex: this._entityIndex });\n      const graphs = intersect(other._graphs, this._graphs);\n      if (graphs) {\n        store._graphs = graphs;\n        store._size = null;\n      }\n      return store;\n    }\n\n    return this.filter(quad => other.has(quad));\n  }\n\n  /**\n   * Returns a new dataset containing all quads returned by applying `iteratee` to each quad in the current dataset.\n   */\n  map(iteratee) {\n    const store = new N3Store({ entityIndex: this._entityIndex });\n    for (const quad of this)\n      store.add(iteratee(quad, this));\n    return store;\n  }\n\n  /**\n   * This method calls the `iteratee` method on each `quad` of the `Dataset`. The first time the `iteratee` method\n   * is called, the `accumulator` value is the `initialValue`, or, if not given, equals the first quad of the `Dataset`.\n   * The return value of each call to the `iteratee` method is used as the `accumulator` value for the next call.\n   *\n   * This method returns the return value of the last `iteratee` call.\n   *\n   * This method is aligned with `Array.prototype.reduce()` in ECMAScript-262.\n   */\n  reduce(callback, initialValue) {\n    const iter = this.readQuads();\n    let accumulator = initialValue === undefined ? iter.next().value : initialValue;\n    for (const quad of iter)\n      accumulator = callback(accumulator, quad, this);\n    return accumulator;\n  }\n\n  /**\n   * Returns the set of quads within the dataset as a host-language-native sequence, for example an `Array` in\n   * ECMAScript-262.\n   *\n   * Since a `Dataset` is an unordered set, the order of the quads within the returned sequence is arbitrary.\n   */\n  toArray() {\n    return this.getQuads();\n  }\n\n  /**\n   * Returns an N-Quads string representation of the dataset, preprocessed with the\n   * {@link https://json-ld.github.io/normalization/spec/|RDF Dataset Normalization} algorithm.\n   */\n  toCanonical() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns a stream that contains all quads of the dataset.\n   */\n  toStream() {\n    return this.match();\n  }\n\n  /**\n   * Returns an N-Quads string representation of the dataset.\n   *\n   * No prior normalization is required, therefore the results for the same quads may vary depending on the `Dataset`\n   * implementation.\n   */\n  toString() {\n    return (new N3Writer()).quadsToString(this);\n  }\n\n  /**\n   * Returns a new `Dataset` that is a concatenation of this dataset and the quads given as an argument.\n   */\n  union(quads) {\n    const store = new N3Store({ entityIndex: this._entityIndex });\n    store._graphs = merge(Object.create(null), this._graphs);\n    store._size = this._size;\n\n    store.addAll(quads);\n    return store;\n  }\n\n  // ### Store is an iterable.\n  // Can be used where iterables are expected: for...of loops, array spread operator,\n  // `yield*`, and destructuring assignment (order is not guaranteed).\n  *[Symbol.iterator]() {\n    yield* this.readQuads();\n  }\n}\n\n/**\n * Returns a subset of the `index` with that part of the index\n * matching the `ids` array. `ids` contains 3 elements that are\n * either numerical ids; or `null`.\n *\n * `false` is returned when there are no matching indices; this should\n * *not* be set as the value for an index.\n */\nfunction indexMatch(index, ids, depth = 0) {\n  const ind = ids[depth];\n  if (ind && !(ind in index))\n    return false;\n\n  let target = false;\n  for (const key in (ind ? { [ind]: index[ind] } : index)) {\n    const result = depth === 2 ? null : indexMatch(index[key], ids, depth + 1);\n\n    if (result !== false) {\n      target = target || Object.create(null);\n      target[key] = result;\n    }\n  }\n  return target;\n}\n\n/**\n * A class that implements both DatasetCore and Readable.\n */\nclass DatasetCoreAndReadableStream extends Readable {\n  constructor(n3Store, subject, predicate, object, graph, options) {\n    super({ objectMode: true });\n    Object.assign(this, { n3Store, subject, predicate, object, graph, options });\n  }\n\n  get filtered() {\n    if (!this._filtered) {\n      const { n3Store, graph, object, predicate, subject } = this;\n      const newStore = this._filtered = new N3Store({ factory: n3Store._factory, entityIndex: this.options.entityIndex });\n\n      let subjectId, predicateId, objectId;\n\n      // Translate IRIs to internal index keys.\n      if (subject   && !(subjectId   = newStore._termToNumericId(subject))   ||\n          predicate && !(predicateId = newStore._termToNumericId(predicate)) ||\n          object    && !(objectId    = newStore._termToNumericId(object)))\n        return newStore;\n\n      const graphs = n3Store._getGraphs(graph);\n      for (const graphKey in graphs) {\n        let subjects, predicates, objects, content;\n        if (content = graphs[graphKey]) {\n          if (!subjectId && predicateId) {\n            if (predicates = indexMatch(content.predicates, [predicateId, objectId, subjectId])) {\n              subjects = indexMatch(content.subjects, [subjectId, predicateId, objectId]);\n              objects = indexMatch(content.objects, [objectId, subjectId, predicateId]);\n            }\n          }\n          else if (objectId) {\n            if (objects = indexMatch(content.objects, [objectId, subjectId, predicateId])) {\n              subjects = indexMatch(content.subjects, [subjectId, predicateId, objectId]);\n              predicates = indexMatch(content.predicates, [predicateId, objectId, subjectId]);\n            }\n          }\n          else if (subjects = indexMatch(content.subjects, [subjectId, predicateId, objectId])) {\n            predicates = indexMatch(content.predicates, [predicateId, objectId, subjectId]);\n            objects = indexMatch(content.objects, [objectId, subjectId, predicateId]);\n          }\n\n          if (subjects)\n            newStore._graphs[graphKey] = { subjects, predicates, objects };\n        }\n      }\n      newStore._size = null;\n    }\n    return this._filtered;\n  }\n\n  get size() {\n    return this.filtered.size;\n  }\n\n  _read(size) {\n    if (size > 0 && !this[ITERATOR])\n      this[ITERATOR] = this[Symbol.iterator]();\n    const iterable = this[ITERATOR];\n    while (--size >= 0) {\n      const { done, value } = iterable.next();\n      if (done) {\n        this.push(null);\n        return;\n      }\n      this.push(value);\n    }\n  }\n\n  addAll(quads) {\n    return this.filtered.addAll(quads);\n  }\n\n  contains(other) {\n    return this.filtered.contains(other);\n  }\n\n  deleteMatches(subject, predicate, object, graph) {\n    return this.filtered.deleteMatches(subject, predicate, object, graph);\n  }\n\n  difference(other) {\n    return this.filtered.difference(other);\n  }\n\n  equals(other) {\n    return this.filtered.equals(other);\n  }\n\n  every(callback, subject, predicate, object, graph) {\n    return this.filtered.every(callback, subject, predicate, object, graph);\n  }\n\n  filter(iteratee) {\n    return this.filtered.filter(iteratee);\n  }\n\n  forEach(callback, subject, predicate, object, graph) {\n    return this.filtered.forEach(callback, subject, predicate, object, graph);\n  }\n\n  import(stream) {\n    return this.filtered.import(stream);\n  }\n\n  intersection(other) {\n    return this.filtered.intersection(other);\n  }\n\n  map(iteratee) {\n    return this.filtered.map(iteratee);\n  }\n\n  some(callback, subject, predicate, object, graph) {\n    return this.filtered.some(callback, subject, predicate, object, graph);\n  }\n\n  toCanonical() {\n    return this.filtered.toCanonical();\n  }\n\n  toStream() {\n    return this._filtered ?\n      this._filtered.toStream()\n      : this.n3Store.match(this.subject, this.predicate, this.object, this.graph);\n  }\n\n  union(quads) {\n    return this._filtered ?\n      this._filtered.union(quads)\n      : this.n3Store.match(this.subject, this.predicate, this.object, this.graph).addAll(quads);\n  }\n\n  toArray() {\n    return this._filtered ? this._filtered.toArray() : this.n3Store.getQuads(this.subject, this.predicate, this.object, this.graph);\n  }\n\n  reduce(callback, initialValue) {\n    return this.filtered.reduce(callback, initialValue);\n  }\n\n  toString() {\n    return (new N3Writer()).quadsToString(this);\n  }\n\n  add(quad) {\n    return this.filtered.add(quad);\n  }\n\n  delete(quad) {\n    return this.filtered.delete(quad);\n  }\n\n  has(quad) {\n    return this.filtered.has(quad);\n  }\n\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph, this.options);\n  }\n\n  *[Symbol.iterator]() {\n    yield* this._filtered || this.n3Store.readQuads(this.subject, this.predicate, this.object, this.graph);\n  }\n}\n","import N3Store from './N3Store';\n\nexport default class N3DatasetCoreFactory {\n  dataset(quads) {\n    return new N3Store(quads);\n  }\n}\n","import DF from './N3DataFactory';\n\n/**\n * Gets rules from a dataset. This will only collect horn rules declared using log:implies.\n */\nexport function getRulesFromDataset(dataset) {\n  const rules = [];\n  for (const { subject, object } of dataset.match(null, DF.namedNode('http://www.w3.org/2000/10/swap/log#implies'), null, DF.defaultGraph())) {\n    const premise = [...dataset.match(null, null, null, subject)];\n    const conclusion = [...dataset.match(null, null, null, object)];\n    rules.push({ premise, conclusion });\n  }\n  return rules;\n}\n\nexport default class N3Reasoner {\n  constructor(store) {\n    this._store = store;\n  }\n\n  _add(subject, predicate, object, graphItem, cb) {\n    // Only add to the remaining indexes if there is not already a value in the index\n    if (!this._store._addToIndex(graphItem.subjects,   subject,   predicate, object)) return;\n    this._store._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._store._addToIndex(graphItem.objects,    object,    subject,   predicate);\n    cb();\n  }\n\n  // eslint-disable-next-line no-warning-comments\n  _evaluatePremise(rule, content, cb, i = 0) {\n    let v1, v2, value, index1, index2;\n    const [val0, val1, val2] = rule.premise[i].value, index = content[rule.premise[i].content];\n    const v0 = !(value = val0.value);\n    for (value in v0 ? index : { [value]: index[value] }) {\n      if (index1 = index[value]) {\n        if (v0) val0.value = Number(value);\n        v1 = !(value = val1.value);\n        for (value in v1 ? index1 : { [value]: index1[value] }) {\n          if (index2 = index1[value]) {\n            if (v1) val1.value = Number(value);\n            v2 = !(value = val2.value);\n            for (value in v2 ? index2 : { [value]: index2[value] }) {\n              if (v2) val2.value = Number(value);\n\n              if (i === rule.premise.length - 1)\n                rule.conclusion.forEach(c => {\n                  // eslint-disable-next-line max-nested-callbacks\n                  this._add(c.subject.value, c.predicate.value, c.object.value, content, () => { cb(c); });\n                });\n              else\n                this._evaluatePremise(rule, content, cb, i + 1);\n            }\n            if (v2) val2.value = null;\n          }\n        }\n        if (v1) val1.value = null;\n      }\n    }\n    if (v0) val0.value = null;\n  }\n\n  _evaluateRules(rules, content, cb) {\n    for (let i = 0; i < rules.length; i++) {\n      this._evaluatePremise(rules[i], content, cb);\n    }\n  }\n\n  // A naive reasoning algorithm where rules are just applied by repeatedly applying rules\n  // until no more evaluations are made\n  _reasonGraphNaive(rules, content) {\n    const newRules = [];\n\n    function addRule(conclusion) {\n      if (conclusion.next)\n        conclusion.next.forEach(rule => {\n          newRules.push([conclusion.subject.value, conclusion.predicate.value, conclusion.object.value, rule]);\n        });\n    }\n\n    // eslint-disable-next-line func-style\n    const addConclusions = conclusion => {\n      conclusion.forEach(c => {\n        // eslint-disable-next-line max-nested-callbacks\n        this._add(c.subject.value, c.predicate.value, c.object.value, content, () => { addRule(c); });\n      });\n    };\n\n    this._evaluateRules(rules, content, addRule);\n\n    let r;\n    while ((r = newRules.pop()) !== undefined) {\n      const [subject, predicate, object, rule] = r;\n      const v1 = rule.basePremise.subject.value;\n      if (!v1) rule.basePremise.subject.value = subject;\n      const v2 = rule.basePremise.predicate.value;\n      if (!v2) rule.basePremise.predicate.value = predicate;\n      const v3 = rule.basePremise.object.value;\n      if (!v3) rule.basePremise.object.value = object;\n\n      if (rule.premise.length === 0) {\n        addConclusions(rule.conclusion);\n      }\n      else {\n        this._evaluatePremise(rule, content, addRule);\n      }\n\n      if (!v1) rule.basePremise.subject.value = null;\n      if (!v2) rule.basePremise.predicate.value = null;\n      if (!v3) rule.basePremise.object.value = null;\n    }\n  }\n\n  _createRule({ premise, conclusion }) {\n    const varMapping = {};\n\n    const toId = value => value.termType === 'Variable' ?\n      // If the term is a variable, then create an empty object that values can be placed into\n      (varMapping[value.value] = varMapping[value.value] || {}) :\n      // If the term is not a variable, then set the ID value\n      { value: this._store._termToNewNumericId(value) };\n\n    // eslint-disable-next-line func-style\n    const t = term => ({ subject: toId(term.subject), predicate: toId(term.predicate), object: toId(term.object) });\n\n    return {\n      premise: premise.map(p => t(p)),\n      conclusion: conclusion.map(p => t(p)),\n      variables: Object.values(varMapping),\n    };\n  }\n\n  reason(rules) {\n    if (!Array.isArray(rules)) {\n      rules = getRulesFromDataset(rules);\n    }\n    rules = rules.map(rule => this._createRule(rule));\n\n    for (const r1 of rules) {\n      for (const r2 of rules) {\n        for (let i = 0; i < r2.premise.length; i++) {\n          const p = r2.premise[i];\n          for (const c of r1.conclusion) {\n            if (termEq(p.subject, c.subject) && termEq(p.predicate, c.predicate) && termEq(p.object, c.object)) {\n              const set = new Set();\n\n              const premise = [];\n\n              // Since these *will* be substituted when we apply the rule,\n              // we need to do this, so that we index correctly in the subsequent section\n              p.subject.value = p.subject.value || 1;\n              p.object.value = p.object.value || 1;\n              p.predicate.value = p.predicate.value || 1;\n\n              for (let j = 0; j < r2.premise.length; j++) {\n                if (j !== i) {\n                  premise.push(getIndex(r2.premise[j], set));\n                }\n              }\n\n              // eslint-disable-next-line no-warning-comments\n              // TODO: Create new rule, with new indexing\n              //       Future, 'collapse' the next statements when they share a premise/base-premise\n              (c.next = c.next || []).push({\n                premise,\n                conclusion: r2.conclusion,\n                // This is a single premise of the form { subject, predicate, object },\n                // which we can use to instantiate the rule using the new data that was emitted\n                basePremise: p,\n              });\n            }\n            r2.variables.forEach(v => { v.value = null; });\n          }\n        }\n      }\n    }\n\n    for (const rule of rules) {\n      const set = new Set();\n      rule.premise = rule.premise.map(p => getIndex(p, set));\n    }\n\n    const graphs = this._store._getGraphs();\n    for (const graphId in graphs) {\n      this._reasonGraphNaive(rules, graphs[graphId]);\n    }\n\n    this._store._size = null;\n  }\n}\n\nfunction getIndex({ subject, predicate, object }, set) {\n  const s = subject.value   || set.has(subject)   || (set.add(subject), false);\n  const p = predicate.value || set.has(predicate) || (set.add(predicate), false);\n  const o = object.value    || set.has(object)    || (set.add(object), false);\n\n  return (!s && p) ? { content: 'predicates', value: [predicate, object, subject] } :\n    o ? { content: 'objects', value: [object, subject, predicate] } :\n        { content: 'subjects', value: [subject, predicate, object] };\n}\n\nfunction termEq(t1, t2) {\n  if (t1.value === null) {\n    t1.value = t2.value;\n  }\n  return t1.value === t2.value;\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n","import Lexer from './N3Lexer';\nimport Parser from './N3Parser';\nimport Writer from './N3Writer';\nimport Store, { N3EntityIndex as EntityIndex } from './N3Store';\nimport StoreFactory from './N3StoreFactory';\nimport Reasoner, { getRulesFromDataset } from './N3Reasoner';\nimport StreamParser from './N3StreamParser';\nimport StreamWriter from './N3StreamWriter';\nimport * as Util from './N3Util';\n\nimport {\n  default as DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n} from './N3DataFactory';\n\n// Named exports\nexport {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StoreFactory,\n  EntityIndex,\n  StreamParser,\n  StreamWriter,\n  Util,\n  Reasoner,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n  getRulesFromDataset,\n};\n\n// Export all named exports as a default object for backward compatibility\nexport default {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StoreFactory,\n  EntityIndex,\n  StreamParser,\n  StreamWriter,\n  Util,\n  Reasoner,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n};\n"],"names":["isNamedNode","term","termType","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","quad","graph","prefix","iri","factory","prefixes","value","defaultPrefixes","Object","create","processPrefix","cache","local","namedNode","Error","N3DataFactory","DEFAULTGRAPH","defaultGraph","rdf","xsd","escapeAll","escapedCharacters","SerializedTerm","equals","other","this","N3Writer","constructor","outputStream","options","_prefixRegex","write","_lists","lists","_outputStream","_endStream","undefined","end","output","chunk","encoding","done","_subject","test","format","_lineMode","_writeQuad","_writeQuadLine","_graph","_prefixIRIs","addPrefixes","baseIRI","_baseMatcher","RegExp","escapeRegex","endsWith","_baseLength","length","_inDefaultGraph","_write","string","callback","subject","predicate","object","_encodeIriOrBlank","_predicate","_encodeObject","_encodePredicate","_encodeSubject","error","_prefixMatch","quadToString","quadsToString","quads","quadsString","entity","_encodeQuad","list","id","substr","replace","characterReplacer","prefixMatch","exec","_encodeLiteral","literal","language","datatype","boolean","integer","decimal","double","type","_blockedWrite","addQuad","addQuads","i","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","child","children","contents","elements","Array","join","singleDone","result","character","charCodeAt","toString","regex","ITERATOR","Symbol","merge","target","source","depth","assign","key","intersect","s1","s2","intersection","difference","diff","N3EntityIndex","_id","_ids","_entities","_blankNodeIndex","_factory","_termFromId","entities","terms","split","q","_termToNumericId","s","p","o","g","_termToNewNumericId","str","createBlankNode","suggestedName","name","index","blankNode","N3Store","_size","_graphs","match","_entityIndex","entityIndex","bind","addAll","size","graphs","subjects","graphKey","subjectKey","predicateKey","keys","_addToIndex","index0","key0","key1","key2","index1","index2","existed","_removeFromIndex","_findInIndex","name0","name1","name2","graphId","tmp","entityKeys","parts","value0","value1","values","l","_loop","_loopByKey0","_loopByKey1","_loopBy2Keys","_countInIndex","count","_getGraphs","_uniqueEntities","uniqueIds","add","graphItem","predicates","objects","freeze","removeQuad","has","subjectOrQuad","readQuads","next","import","stream","on","removeQuads","remove","removeMatches","Readable","objectMode","iterable","_read","push","deleteGraph","getQuads","content","subjectId","predicateId","objectId","DatasetCoreAndReadableStream","countQuads","forEach","some","every","getSubjects","results","forSubjects","getPredicates","forPredicates","getObjects","forObjects","getGraphs","forGraphs","extractLists","ignoreErrors","onError","node","message","tails","rest","nil","toRemove","tailQuad","items","head","headPos","malformed","current","objectQuads","subjectQuads","first","parent","unshift","filtered","isArray","contains","g1","g2","p1","p2","o1","deleteMatches","store","filter","iteratee","map","reduce","initialValue","iter","accumulator","toArray","toCanonical","toStream","union","iterator","indexMatch","ids","ind","n3Store","super","_filtered","newStore","delete","N3DatasetCoreFactory","dataset","getRulesFromDataset","rules","premise","conclusion","N3Reasoner","_store","_add","cb","_evaluatePremise","rule","v1","v2","val0","val1","val2","v0","Number","c","_evaluateRules","_reasonGraphNaive","newRules","addRule","addConclusions","r","pop","basePremise","v3","_createRule","varMapping","toId","t","variables","reason","r1","r2","termEq","set","Set","j","getIndex","v","t1","t2","N3StreamWriter","Transform","writableObjectMode","writer","_writer","_transform","_flush","emit","Lexer","Parser","Writer","Store","StoreFactory","EntityIndex","StreamParser","StreamWriter","Util","Reasoner","DataFactory","Term","NamedNode","Literal","BlankNode","Variable","DefaultGraph","Quad","Triple","termFromId","termToId"],"sourceRoot":""}