{"version":3,"file":"js/611.2f8ec3f9.js","mappings":"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","sources":["webpack://pko-rapid-triples/./node_modules/rdfxml-streaming-parser/lib/ParseError.js","webpack://pko-rapid-triples/./node_modules/relative-to-absolute-iri/lib/Resolve.js","webpack://pko-rapid-triples/./node_modules/rdf-data-factory/lib/Quad.js","webpack://pko-rapid-triples/./node_modules/rdf-data-factory/lib/NamedNode.js","webpack://pko-rapid-triples/./node_modules/rdf-data-factory/index.js","webpack://pko-rapid-triples/./node_modules/rdf-data-factory/lib/BlankNode.js","webpack://pko-rapid-triples/./node_modules/rdf-data-factory/lib/Literal.js","webpack://pko-rapid-triples/./node_modules/sax/lib/sax.js","webpack://pko-rapid-triples/./node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","webpack://pko-rapid-triples/./node_modules/relative-to-absolute-iri/index.js","webpack://pko-rapid-triples/./node_modules/rdfxml-streaming-parser/index.js","webpack://pko-rapid-triples/./node_modules/rdf-data-factory/lib/Variable.js","webpack://pko-rapid-triples/./node_modules/rdf-data-factory/lib/DataFactory.js","webpack://pko-rapid-triples/./node_modules/rdf-data-factory/lib/DefaultGraph.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseError = void 0;\n/**\n * An error that includes line and column in the error message.\n */\nclass ParseError extends Error {\n    constructor(parser, message) {\n        const saxParser = parser.saxStream._parser;\n        super(parser.trackPosition ? `Line ${saxParser.line + 1} column ${saxParser.column + 1}: ${message}` : message);\n    }\n}\nexports.ParseError = ParseError;\n//# sourceMappingURL=ParseError.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeDotSegmentsOfPath = exports.removeDotSegments = exports.resolve = void 0;\n/**\n * Convert the given relative IRI to an absolute IRI\n * by taking into account the given optional baseIRI.\n *\n * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.\n * @param {string} baseIRI The optional base IRI.\n * @return {string} an absolute IRI.\n */\nfunction resolve(relativeIRI, baseIRI) {\n    baseIRI = baseIRI || '';\n    const baseFragmentPos = baseIRI.indexOf('#');\n    // Ignore any fragments in the base IRI\n    if (baseFragmentPos > 0) {\n        baseIRI = baseIRI.substr(0, baseFragmentPos);\n    }\n    // Convert empty value directly to base IRI\n    if (!relativeIRI.length) {\n        // At this point, the baseIRI MUST be absolute, otherwise we error\n        if (baseIRI.indexOf(':') < 0) {\n            throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n        }\n        return baseIRI;\n    }\n    // If the value starts with a query character, concat directly (but strip the existing query)\n    if (relativeIRI.startsWith('?')) {\n        const baseQueryPos = baseIRI.indexOf('?');\n        if (baseQueryPos > 0) {\n            baseIRI = baseIRI.substr(0, baseQueryPos);\n        }\n        return baseIRI + relativeIRI;\n    }\n    // If the value starts with a fragment character, concat directly\n    if (relativeIRI.startsWith('#')) {\n        return baseIRI + relativeIRI;\n    }\n    // Ignore baseIRI if it is empty\n    if (!baseIRI.length) {\n        const relativeColonPos = relativeIRI.indexOf(':');\n        if (relativeColonPos < 0) {\n            throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);\n        }\n        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);\n    }\n    // Ignore baseIRI if the value is absolute\n    const valueColonPos = relativeIRI.indexOf(':');\n    if (valueColonPos >= 0) {\n        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // At this point, the baseIRI MUST be absolute, otherwise we error\n    const baseColonPos = baseIRI.indexOf(':');\n    if (baseColonPos < 0) {\n        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n    }\n    const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);\n    // Inherit the baseIRI scheme if the value starts with '//'\n    if (relativeIRI.indexOf('//') === 0) {\n        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.\n    let baseSlashAfterColonPos;\n    if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {\n        // If there is no additional '/' after the '//'.\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);\n        if (baseSlashAfterColonPos < 0) {\n            // If something other than a '/' follows the '://', append the value after a '/',\n            // otherwise, prefix the value with only the baseIRI scheme.\n            if (baseIRI.length > baseColonPos + 3) {\n                return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n            else {\n                return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n        }\n    }\n    else {\n        // If there is not even a single '/' after the ':'\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);\n        if (baseSlashAfterColonPos < 0) {\n            // If we don't have a '/' after the ':',\n            // prefix the value with only the baseIRI scheme.\n            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n        }\n    }\n    // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.\n    if (relativeIRI.indexOf('/') === 0) {\n        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);\n    }\n    let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);\n    const baseIRILastSlashPos = baseIRIPath.lastIndexOf('/');\n    // Ignore everything after the last '/' in the baseIRI path\n    if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {\n        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);\n        // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')\n        // This change is only allowed if there is something else following the path\n        if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {\n            relativeIRI = relativeIRI.substr(1);\n        }\n    }\n    // Prefix the value with the baseIRI path where\n    relativeIRI = baseIRIPath + relativeIRI;\n    // Remove dot segment from the IRI\n    relativeIRI = removeDotSegments(relativeIRI);\n    // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.\n    return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;\n}\nexports.resolve = resolve;\n/**\n * Remove dot segments from the given path,\n * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).\n * @param {string} path An IRI path.\n * @return {string} A path, will always start with a '/'.\n */\nfunction removeDotSegments(path) {\n    // Prepare a buffer with segments between each '/.\n    // Each segment represents an array of characters.\n    const segmentBuffers = [];\n    let i = 0;\n    while (i < path.length) {\n        // Remove '/.' or '/..'\n        switch (path[i]) {\n            case '/':\n                if (path[i + 1] === '.') {\n                    if (path[i + 2] === '.') {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Go to parent directory,\n                        // so we remove a parent segment\n                        segmentBuffers.pop();\n                        // Ensure that we end with a slash if there is a trailing '/..'\n                        if (!path[i + 3]) {\n                            segmentBuffers.push([]);\n                        }\n                        i += 3;\n                    }\n                    else {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Ensure that we end with a slash if there is a trailing '/.'\n                        if (!path[i + 2]) {\n                            segmentBuffers.push([]);\n                        }\n                        // Go to the current directory,\n                        // so we do nothing\n                        i += 2;\n                    }\n                }\n                else {\n                    // Start a new segment\n                    segmentBuffers.push([]);\n                    i++;\n                }\n                break;\n            case '#':\n            case '?':\n                // Query and fragment string should be appended unchanged\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n                // Break the while loop\n                i = path.length;\n                break;\n            default:\n                // Not a special character, just append it to our buffer\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path[i]);\n                i++;\n                break;\n        }\n    }\n    return '/' + segmentBuffers.map((buffer) => buffer.join('')).join('/');\n}\nexports.removeDotSegments = removeDotSegments;\n/**\n * Removes dot segments of the given IRI.\n * @param {string} iri An IRI (or part of IRI).\n * @param {number} colonPosition The position of the first ':' in the IRI.\n * @return {string} The IRI where dot segments were removed.\n */\nfunction removeDotSegmentsOfPath(iri, colonPosition) {\n    // Determine where we should start looking for the first '/' that indicates the start of the path\n    let searchOffset = colonPosition + 1;\n    if (colonPosition >= 0) {\n        if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {\n            searchOffset = colonPosition + 3;\n        }\n    }\n    else {\n        if (iri[0] === '/' && iri[1] === '/') {\n            searchOffset = 2;\n        }\n    }\n    // Determine the path\n    const pathSeparator = iri.indexOf('/', searchOffset);\n    if (pathSeparator < 0) {\n        return iri;\n    }\n    const base = iri.substr(0, pathSeparator);\n    const path = iri.substr(pathSeparator);\n    // Remove dot segments from the path\n    return base + removeDotSegments(path);\n}\nexports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;\nfunction isCharacterAllowedAfterRelativePathSegment(character) {\n    return !character || character === '#' || character === '?' || character === '/';\n}\n//# sourceMappingURL=Resolve.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n//# sourceMappingURL=Quad.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedNode = void 0;\n/**\n * A term that contains an IRI.\n */\nclass NamedNode {\n    constructor(value) {\n        this.termType = 'NamedNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'NamedNode' && other.value === this.value;\n    }\n}\nexports.NamedNode = NamedNode;\n//# sourceMappingURL=NamedNode.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/BlankNode\"), exports);\n__exportStar(require(\"./lib/DataFactory\"), exports);\n__exportStar(require(\"./lib/DefaultGraph\"), exports);\n__exportStar(require(\"./lib/Literal\"), exports);\n__exportStar(require(\"./lib/NamedNode\"), exports);\n__exportStar(require(\"./lib/Quad\"), exports);\n__exportStar(require(\"./lib/Variable\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlankNode = void 0;\n/**\n * A term that represents an RDF blank node with a label.\n */\nclass BlankNode {\n    constructor(value) {\n        this.termType = 'BlankNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'BlankNode' && other.value === this.value;\n    }\n}\nexports.BlankNode = BlankNode;\n//# sourceMappingURL=BlankNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Literal = void 0;\nconst NamedNode_1 = require(\"./NamedNode\");\n/**\n * A term that represents an RDF literal, containing a string with an optional language tag or datatype.\n */\nclass Literal {\n    constructor(value, languageOrDatatype) {\n        this.termType = 'Literal';\n        this.value = value;\n        if (typeof languageOrDatatype === 'string') {\n            this.language = languageOrDatatype;\n            this.datatype = Literal.RDF_LANGUAGE_STRING;\n        }\n        else if (languageOrDatatype) {\n            this.language = '';\n            this.datatype = languageOrDatatype;\n        }\n        else {\n            this.language = '';\n            this.datatype = Literal.XSD_STRING;\n        }\n    }\n    equals(other) {\n        return !!other && other.termType === 'Literal' && other.value === this.value &&\n            other.language === this.language && this.datatype.equals(other.datatype);\n    }\n}\nexports.Literal = Literal;\nLiteral.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nLiteral.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');\n//# sourceMappingURL=Literal.js.map",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // disallow unquoted attribute values if not otherwise configured\n    // and strict mode is true\n    if (parser.opt.unquotedAttributeValues === undefined) {\n      parser.opt.unquotedAttributeValues = !strict;\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n  if (!Stream) Stream = function () {}\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n            continue;\n          }\n\n          if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {\n            parser.state = S.DOCTYPE_DTD\n            parser.doctype += '<!' + parser.sgmlDecl + c\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          if (c === ']') {\n            parser.doctype += c\n            parser.state = S.DOCTYPE\n          } else if (c === '<') {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else if (isQuote(c)) {\n            parser.doctype += c\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          } else {\n            parser.doctype += c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else if (parser.doctype && parser.doctype !== true) {\n            parser.state = S.DOCTYPE_DTD\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            if (!parser.opt.unquotedAttributeValues) {\n              error(parser, 'Unquoted attribute value')\n            }\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            var parsedEntity = parseEntity(parser)\n            if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {\n              parser.entity = ''\n              parser.state = returnState\n              parser.write(parsedEntity)\n            } else {\n              parser[buffer] += parsedEntity\n              parser.entity = ''\n              parser.state = returnState\n            }\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default: /* istanbul ignore next */ {\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n        }\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseType = exports.RdfXmlParser = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst sax_1 = require(\"sax\");\nconst stream_1 = require(\"stream\");\nconst ParseError_1 = require(\"./ParseError\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nclass RdfXmlParser extends stream_1.Transform {\n    constructor(args) {\n        super({ readableObjectMode: true });\n        this.activeTagStack = [];\n        this.nodeIds = {};\n        if (args) {\n            Object.assign(this, args);\n            this.options = args;\n        }\n        if (!this.dataFactory) {\n            this.dataFactory = new rdf_data_factory_1.DataFactory();\n        }\n        if (!this.baseIRI) {\n            this.baseIRI = '';\n        }\n        if (!this.defaultGraph) {\n            this.defaultGraph = this.dataFactory.defaultGraph();\n        }\n        this.saxStream = sax_1.createStream(this.strict, { xmlns: false, position: this.trackPosition });\n        // Workaround for an issue in SAX where non-strict mode either lower- or upper-cases all tags.\n        if (!this.strict) {\n            this.saxStream._parser.looseCase = 'toString';\n        }\n        this.attachSaxListeners();\n    }\n    /**\n     * Parse the namespace of the given tag,\n     * and take into account the namespace of the parent tag that was already parsed.\n     * @param {Tag} tag A tag to parse the namespace from.\n     * @param {IActiveTag} parentTag The parent tag, or null if this tag is the root.\n     * @return {{[p: string]: string}[]} An array of namespaces,\n     *                                   where the last ones have a priority over the first ones.\n     */\n    static parseNamespace(tag, parentTag) {\n        const thisNs = {};\n        let hasNs = false;\n        for (const attributeKey in tag.attributes) {\n            if (attributeKey.startsWith('xmlns')) {\n                if (attributeKey.length === 5) {\n                    // Set default namespace\n                    hasNs = true;\n                    thisNs[''] = tag.attributes[attributeKey];\n                }\n                else if (attributeKey.charAt(5) === ':') {\n                    // Definition of a prefix\n                    hasNs = true;\n                    thisNs[attributeKey.substr(6)] = tag.attributes[attributeKey];\n                }\n            }\n        }\n        const parentNs = parentTag && parentTag.ns ? parentTag.ns : [RdfXmlParser.DEFAULT_NS];\n        return hasNs ? parentNs.concat([thisNs]) : parentNs;\n    }\n    /**\n     * Expand the given term value based on the given namespaces.\n     * @param {string} term A term value.\n     * @param {{[p: string]: string}[]} ns An array of namespaces,\n     *                                     where the last ones have a priority over the first ones.\n     * @param {RdfXmlParser} parser The RDF/XML parser instance.\n     * @return {IExpandedPrefix} An expanded prefix object.\n     */\n    static expandPrefixedTerm(term, ns, parser) {\n        const colonIndex = term.indexOf(':');\n        let prefix;\n        let local;\n        if (colonIndex >= 0) {\n            // Prefix is set\n            prefix = term.substr(0, colonIndex);\n            local = term.substr(colonIndex + 1);\n        }\n        else {\n            // Prefix is not set, fallback to default namespace\n            prefix = '';\n            local = term;\n        }\n        let uri = null;\n        let defaultNamespace = null;\n        for (let i = ns.length - 1; i >= 0; i--) {\n            const nsElement = ns[i][prefix];\n            if (nsElement) {\n                uri = nsElement;\n                break;\n            }\n            else if (!defaultNamespace) {\n                defaultNamespace = ns[i][''];\n            }\n        }\n        if (!uri) {\n            // Error on unbound prefix\n            if (prefix && prefix !== 'xmlns') {\n                throw new ParseError_1.ParseError(parser, `The prefix '${prefix}' in term '${term}' was not bound.`);\n            }\n            // Fallback to default namespace if no match was found\n            uri = defaultNamespace || '';\n        }\n        return { prefix, local, uri };\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return RdfXmlParser.IRI_REGEX.test(iri);\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new RdfXmlParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        try {\n            this.saxStream.write(chunk, encoding);\n        }\n        catch (e) {\n            return callback(e);\n        }\n        callback();\n    }\n    /**\n     * Create a new parse error instance.\n     * @param {string} message An error message.\n     * @return {Error} An error instance.\n     */\n    newParseError(message) {\n        return new ParseError_1.ParseError(this, message);\n    }\n    /**\n     * Convert the given value to a IRI by taking into account the baseIRI.\n     *\n     * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.\n     *\n     * @param {string} value The value to convert to an IRI.\n     * @param {IActiveTag} activeTag The active tag.\n     * @return {NamedNode} an IRI.\n     */\n    valueToUri(value, activeTag) {\n        return this.uriToNamedNode(relative_to_absolute_iri_1.resolve(value, activeTag.baseIRI));\n    }\n    /**\n     * Convert the given value URI string to a named node.\n     *\n     * This throw an error if the URI is invalid.\n     *\n     * @param {string} uri A URI string.\n     * @return {NamedNode} a named node.\n     */\n    uriToNamedNode(uri) {\n        // Validate URI\n        if (!RdfXmlParser.isValidIri(uri)) {\n            throw this.newParseError(`Invalid URI: ${uri}`);\n        }\n        return this.dataFactory.namedNode(uri);\n    }\n    /**\n     * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n     * If it is invalid, an error will thrown emitted.\n     * @param {string} value A value.\n     */\n    validateNcname(value) {\n        // Validate term as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n        if (!RdfXmlParser.NCNAME_MATCHER.test(value)) {\n            throw this.newParseError(`Not a valid NCName: ${value}`);\n        }\n    }\n    attachSaxListeners() {\n        this.saxStream.on('error', (error) => this.emit('error', error));\n        this.saxStream.on('opentag', this.onTag.bind(this));\n        this.saxStream.on('text', this.onText.bind(this));\n        this.saxStream.on('closetag', this.onCloseTag.bind(this));\n        this.saxStream.on('doctype', this.onDoctype.bind(this));\n    }\n    /**\n     * Handle the given tag.\n     * @param {QualifiedTag} tag A SAX tag.\n     */\n    onTag(tag) {\n        // Get parent tag\n        const parentTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        let currentParseType = ParseType.RESOURCE;\n        if (parentTag) {\n            parentTag.hadChildren = true;\n            currentParseType = parentTag.childrenParseType;\n        }\n        // Check if this tag needs to be converted to a string\n        if (parentTag && parentTag.childrenStringTags) {\n            // Convert this tag to a string\n            const tagName = tag.name;\n            let attributes = '';\n            for (const attributeKey in tag.attributes) {\n                attributes += ` ${attributeKey}=\"${tag.attributes[attributeKey]}\"`;\n            }\n            const tagContents = `${tagName}${attributes}`;\n            const tagString = `<${tagContents}>`;\n            parentTag.childrenStringTags.push(tagString);\n            // Inherit the array, so that deeper tags are appended to this same array\n            const stringActiveTag = { childrenStringTags: parentTag.childrenStringTags };\n            stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;\n            this.activeTagStack.push(stringActiveTag);\n            // Halt any further processing\n            return;\n        }\n        const activeTag = {};\n        if (parentTag) {\n            // Inherit language scope and baseIRI from parent\n            activeTag.language = parentTag.language;\n            activeTag.baseIRI = parentTag.baseIRI;\n        }\n        else {\n            activeTag.baseIRI = this.baseIRI;\n        }\n        this.activeTagStack.push(activeTag);\n        activeTag.ns = RdfXmlParser.parseNamespace(tag, parentTag);\n        if (currentParseType === ParseType.RESOURCE) {\n            this.onTagResource(tag, activeTag, parentTag, !parentTag);\n        }\n        else { // currentParseType === ParseType.PROPERTY\n            this.onTagProperty(tag, activeTag, parentTag);\n        }\n    }\n    /**\n     * Handle the given node element in resource-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     * @param {boolean} rootTag If we are currently processing the root tag.\n     */\n    onTagResource(tag, activeTag, parentTag, rootTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.PROPERTY;\n        // Assume that the current node is a _typed_ node (2.13), unless we find an rdf:Description as node name\n        let typedNode = true;\n        if (tagExpanded.uri === RdfXmlParser.RDF) {\n            // Check forbidden property element names\n            if (!rootTag && RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n                throw this.newParseError(`Illegal node element name: ${tagExpanded.local}`);\n            }\n            switch (tagExpanded.local) {\n                case 'RDF':\n                    // Tags under <rdf:RDF> must always be resources\n                    activeTag.childrenParseType = ParseType.RESOURCE;\n                case 'Description':\n                    typedNode = false;\n            }\n        }\n        const predicates = [];\n        const objects = [];\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubjectValue = null;\n        let claimSubjectNodeId = false;\n        let subjectValueBlank = false;\n        let explicitType = null;\n        for (const attributeKey in tag.attributes) {\n            const attributeValue = tag.attributes[attributeKey];\n            const attributeKeyExpanded = RdfXmlParser.expandPrefixedTerm(attributeKey, activeTag.ns, this);\n            if (parentTag && attributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (attributeKeyExpanded.local) {\n                    case 'about':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        activeSubjectValue = attributeValue;\n                        continue;\n                    case 'ID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = '#' + attributeValue;\n                        claimSubjectNodeId = true;\n                        continue;\n                    case 'nodeID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = attributeValue;\n                        subjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'type':\n                        // Emit the rdf:type later as named node instead of the default literal\n                        explicitType = attributeValue;\n                        continue;\n                    case 'aboutEach':\n                        throw this.newParseError(`rdf:aboutEach is not supported.`);\n                    case 'aboutEachPrefix':\n                        throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);\n                    case 'li':\n                        throw this.newParseError(`rdf:li on node elements are not supported.`);\n                }\n            }\n            else if (attributeKeyExpanded.uri === RdfXmlParser.XML) {\n                if (attributeKeyExpanded.local === 'lang') {\n                    activeTag.language = attributeValue === '' ? null : attributeValue.toLowerCase();\n                    continue;\n                }\n                else if (attributeKeyExpanded.local === 'base') {\n                    // SAX Parser does not expand xml:base, based on DOCTYPE, so we have to do it manually\n                    activeTag.baseIRI = relative_to_absolute_iri_1.resolve(attributeValue, activeTag.baseIRI);\n                    continue;\n                }\n            }\n            // Interpret attributes at this point as properties on this node,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (attributeKeyExpanded.prefix !== 'xml' && attributeKeyExpanded.uri) {\n                predicates.push(this.uriToNamedNode(attributeKeyExpanded.uri + attributeKeyExpanded.local));\n                objects.push(attributeValue);\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubjectValue !== null) {\n            activeTag.subject = subjectValueBlank\n                ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);\n            if (claimSubjectNodeId) {\n                this.claimNodeId(activeTag.subject);\n            }\n        }\n        // Force the creation of a subject if it doesn't exist yet\n        if (!activeTag.subject) {\n            activeTag.subject = this.dataFactory.blankNode();\n        }\n        // Emit the type if we're at a typed node\n        if (typedNode) {\n            const type = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n            this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), type, parentTag ? parentTag.reifiedStatementId : null);\n        }\n        if (parentTag) {\n            // If the parent tag defined a predicate, add the current tag as property value\n            if (parentTag.predicate) {\n                if (parentTag.childrenCollectionSubject) {\n                    // RDF:List-based properties\n                    const linkTerm = this.dataFactory.blankNode();\n                    // Emit <x> <p> <current-chain> OR <previous-chain> <rdf:rest> <current-chain>\n                    this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId);\n                    // Emit <current-chain> <rdf:first> value\n                    this.emitTriple(linkTerm, this.dataFactory.namedNode(RdfXmlParser.RDF + 'first'), activeTag.subject, activeTag.reifiedStatementId);\n                    // Store <current-chain> in the parent node\n                    parentTag.childrenCollectionSubject = linkTerm;\n                    parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(RdfXmlParser.RDF + 'rest');\n                }\n                else { // !parentTag.predicateEmitted\n                    // Set-based properties\n                    this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId);\n                    // Emit pending properties on the parent tag that had no defined subject yet.\n                    for (let i = 0; i < parentTag.predicateSubPredicates.length; i++) {\n                        this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i], parentTag.predicateSubObjects[i], null);\n                    }\n                    // Cleanup so we don't emit them again when the parent tag is closed\n                    parentTag.predicateSubPredicates = [];\n                    parentTag.predicateSubObjects = [];\n                    parentTag.predicateEmitted = true;\n                }\n            }\n            // Emit all collected triples\n            for (let i = 0; i < predicates.length; i++) {\n                const object = this.dataFactory.literal(objects[i], activeTag.datatype || activeTag.language);\n                this.emitTriple(activeTag.subject, predicates[i], object, parentTag.reifiedStatementId);\n            }\n            // Emit the rdf:type as named node instead of literal\n            if (explicitType) {\n                this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.uriToNamedNode(explicitType), null);\n            }\n        }\n    }\n    /**\n     * Handle the given property element in property-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     */\n    onTagProperty(tag, activeTag, parentTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.RESOURCE;\n        activeTag.subject = parentTag.subject; // Inherit parent subject\n        if (tagExpanded.uri === RdfXmlParser.RDF && tagExpanded.local === 'li') {\n            // Convert rdf:li to rdf:_x\n            if (!parentTag.listItemCounter) {\n                parentTag.listItemCounter = 1;\n            }\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + '_' + parentTag.listItemCounter++);\n        }\n        else {\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n        }\n        // Check forbidden property element names\n        if (tagExpanded.uri === RdfXmlParser.RDF\n            && RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n            throw this.newParseError(`Illegal property element name: ${tagExpanded.local}`);\n        }\n        activeTag.predicateSubPredicates = [];\n        activeTag.predicateSubObjects = [];\n        let parseType = false;\n        let attributedProperty = false;\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubSubjectValue = null;\n        let subSubjectValueBlank = true;\n        const predicates = [];\n        const objects = [];\n        for (const propertyAttributeKey in tag.attributes) {\n            const propertyAttributeValue = tag.attributes[propertyAttributeKey];\n            const propertyAttributeKeyExpanded = RdfXmlParser\n                .expandPrefixedTerm(propertyAttributeKey, activeTag.ns, this);\n            if (propertyAttributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (propertyAttributeKeyExpanded.local) {\n                    case 'resource':\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`Found both rdf:resource (${propertyAttributeValue}) and rdf:nodeID (${activeSubSubjectValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttributeValue})`);\n                        }\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = false;\n                        continue;\n                    case 'datatype':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttributeValue})`);\n                        }\n                        activeTag.datatype = this.valueToUri(propertyAttributeValue, activeTag);\n                        continue;\n                    case 'nodeID':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (activeTag.hadChildren) {\n                            throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttributeValue})`);\n                        }\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'parseType':\n                        // Validation\n                        if (attributedProperty) {\n                            throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);\n                        }\n                        if (activeTag.datatype) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);\n                        }\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);\n                        }\n                        if (propertyAttributeValue === 'Resource') {\n                            parseType = true;\n                            activeTag.childrenParseType = ParseType.PROPERTY;\n                            // Turn this property element into a node element\n                            const nestedBNode = this.dataFactory.blankNode();\n                            this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);\n                            activeTag.subject = nestedBNode;\n                            activeTag.predicate = null;\n                        }\n                        else if (propertyAttributeValue === 'Collection') {\n                            parseType = true;\n                            // Interpret children as being part of an rdf:List\n                            activeTag.hadChildren = true;\n                            activeTag.childrenCollectionSubject = activeTag.subject;\n                            activeTag.childrenCollectionPredicate = activeTag.predicate;\n                            subSubjectValueBlank = false;\n                        }\n                        else if (propertyAttributeValue === 'Literal') {\n                            parseType = true;\n                            // Interpret children as being part of a literal string\n                            activeTag.childrenTagsToString = true;\n                            activeTag.childrenStringTags = [];\n                        }\n                        continue;\n                    case 'ID':\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.reifiedStatementId = this.valueToUri('#' + propertyAttributeValue, activeTag);\n                        this.claimNodeId(activeTag.reifiedStatementId);\n                        continue;\n                }\n            }\n            else if (propertyAttributeKeyExpanded.uri === RdfXmlParser.XML\n                && propertyAttributeKeyExpanded.local === 'lang') {\n                activeTag.language = propertyAttributeValue === ''\n                    ? null : propertyAttributeValue.toLowerCase();\n                continue;\n            }\n            // Interpret attributes at this point as properties via implicit blank nodes on the property,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (propertyAttributeKeyExpanded.prefix !== 'xml' && propertyAttributeKeyExpanded.prefix !== 'xmlns'\n                && propertyAttributeKeyExpanded.uri) {\n                if (parseType || activeTag.datatype) {\n                    throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttributeValue}`);\n                }\n                activeTag.hadChildren = true;\n                attributedProperty = true;\n                predicates.push(this.uriToNamedNode(propertyAttributeKeyExpanded.uri + propertyAttributeKeyExpanded.local));\n                objects.push(this.dataFactory.literal(propertyAttributeValue, activeTag.datatype || activeTag.language));\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubSubjectValue !== null) {\n            const subjectParent = activeTag.subject;\n            activeTag.subject = subSubjectValueBlank\n                ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);\n            this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId);\n            // Emit our buffered triples\n            for (let i = 0; i < predicates.length; i++) {\n                this.emitTriple(activeTag.subject, predicates[i], objects[i], null);\n            }\n            activeTag.predicateEmitted = true;\n        }\n        else if (subSubjectValueBlank) {\n            // The current property element has no defined subject\n            // Let's buffer the properties until the child node defines a subject,\n            // or if the tag closes.\n            activeTag.predicateSubPredicates = predicates;\n            activeTag.predicateSubObjects = objects;\n            activeTag.predicateEmitted = false;\n        }\n    }\n    /**\n     * Emit the given triple to the stream.\n     * @param {Term} subject A subject term.\n     * @param {Term} predicate A predicate term.\n     * @param {Term} object An object term.\n     * @param {Term} statementId An optional resource that identifies the triple.\n     *                           If truthy, then the given triple will also be emitted reified.\n     */\n    emitTriple(subject, predicate, object, statementId) {\n        this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph));\n        // Reify triple\n        if (statementId) {\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.dataFactory.namedNode(RdfXmlParser.RDF + 'Statement'), this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'subject'), subject, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'predicate'), predicate, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'object'), object, this.defaultGraph));\n        }\n    }\n    /**\n     * Register the given term as a node ID.\n     * If one was already registered, this will emit an error.\n     *\n     * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.\n     * @param {Term} term An RDF term.\n     */\n    claimNodeId(term) {\n        if (!this.allowDuplicateRdfIds) {\n            if (this.nodeIds[term.value]) {\n                throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);\n            }\n            this.nodeIds[term.value] = true;\n        }\n    }\n    /**\n     * Handle the given text string.\n     * @param {string} text A parsed text string.\n     */\n    onText(text) {\n        const activeTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        if (activeTag) {\n            if (activeTag.childrenStringTags) {\n                activeTag.childrenStringTags.push(text);\n            }\n            else if (activeTag.predicate) {\n                activeTag.text = text;\n            }\n        }\n    }\n    /**\n     * Handle the closing of the last tag.\n     */\n    onCloseTag() {\n        const poppedTag = this.activeTagStack.pop();\n        // If we were converting a tag to a string, and the tag was not self-closing, close it here.\n        if (poppedTag.childrenStringEmitClosingTag) {\n            poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);\n        }\n        // Set the literal value if we were collecting XML tags to string\n        if (poppedTag.childrenTagsToString) {\n            poppedTag.datatype = this.dataFactory.namedNode(RdfXmlParser.RDF + 'XMLLiteral');\n            poppedTag.text = poppedTag.childrenStringTags.join('');\n            poppedTag.hadChildren = false; // Force a literal triple to be emitted hereafter\n        }\n        if (poppedTag.childrenCollectionSubject) {\n            // Terminate the rdf:List\n            this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(RdfXmlParser.RDF + 'nil'), poppedTag.reifiedStatementId);\n        }\n        else if (poppedTag.predicate) {\n            if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {\n                // Property element contains text\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || '', poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);\n            }\n            else if (!poppedTag.predicateEmitted) {\n                // Emit remaining properties on an anonymous property element\n                const subject = this.dataFactory.blankNode();\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);\n                for (let i = 0; i < poppedTag.predicateSubPredicates.length; i++) {\n                    this.emitTriple(subject, poppedTag.predicateSubPredicates[i], poppedTag.predicateSubObjects[i], null);\n                }\n            }\n        }\n    }\n    /**\n     * Fetch local DOCTYPE ENTITY's and make the parser recognise them.\n     * @param {string} doctype The read doctype.\n     */\n    onDoctype(doctype) {\n        doctype.replace(/<!ENTITY\\s+([^\\s]+)\\s+[\"']([^\"']+)[\"']\\s*>/g, (match, prefix, uri) => {\n            this.saxStream._parser.ENTITIES[prefix] = uri;\n            return '';\n        });\n    }\n}\nexports.RdfXmlParser = RdfXmlParser;\n// Regex for valid IRIs\nRdfXmlParser.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*):[^ \"<>{}|\\\\\\[\\]`]*$/;\nRdfXmlParser.MIME_TYPE = 'application/rdf+xml';\nRdfXmlParser.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nRdfXmlParser.XML = 'http://www.w3.org/XML/1998/namespace';\nRdfXmlParser.XMLNS = 'http://www.w3.org/2000/xmlns/';\nRdfXmlParser.DEFAULT_NS = {\n    xml: RdfXmlParser.XML,\n};\nRdfXmlParser.FORBIDDEN_NODE_ELEMENTS = [\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'li',\n    'aboutEach',\n    'aboutEachPrefix',\n];\nRdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS = [\n    'Description',\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'aboutEach',\n    'aboutEachPrefix',\n];\n// tslint:disable-next-line:max-line-length\nRdfXmlParser.NCNAME_MATCHER = /^([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_])([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_\\-.0-9#xB7\\u{0300}-\\u{036F}\\u{203F}-\\u{2040}])*$/u;\nvar ParseType;\n(function (ParseType) {\n    ParseType[ParseType[\"RESOURCE\"] = 0] = \"RESOURCE\";\n    ParseType[ParseType[\"PROPERTY\"] = 1] = \"PROPERTY\";\n})(ParseType = exports.ParseType || (exports.ParseType = {}));\n//# sourceMappingURL=RdfXmlParser.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/Resolve\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/RdfXmlParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Variable = void 0;\n/**\n * A term that represents a variable.\n */\nclass Variable {\n    constructor(value) {\n        this.termType = 'Variable';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'Variable' && other.value === this.value;\n    }\n}\nexports.Variable = Variable;\n//# sourceMappingURL=Variable.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n//# sourceMappingURL=DataFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGraph = void 0;\n/**\n * A singleton term instance that represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass DefaultGraph {\n    constructor() {\n        this.termType = 'DefaultGraph';\n        this.value = '';\n        // Private constructor\n    }\n    equals(other) {\n        return !!other && other.termType === 'DefaultGraph';\n    }\n}\nexports.DefaultGraph = DefaultGraph;\nDefaultGraph.INSTANCE = new DefaultGraph();\n//# sourceMappingURL=DefaultGraph.js.map"],"names":["Object","defineProperty","exports","value","ParseError","Error","constructor","parser","message","saxParser","saxStream","_parser","super","trackPosition","line","column","resolve","relativeIRI","baseIRI","baseFragmentPos","indexOf","substr","length","startsWith","baseQueryPos","relativeColonPos","removeDotSegmentsOfPath","valueColonPos","baseColonPos","baseIRIScheme","baseSlashAfterColonPos","removeDotSegments","baseIRIPath","baseIRILastSlashPos","lastIndexOf","path","segmentBuffers","i","isCharacterAllowedAfterRelativePathSegment","push","pop","map","buffer","join","iri","colonPosition","searchOffset","pathSeparator","base","character","Quad","subject","predicate","object","graph","this","termType","equals","other","NamedNode","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar","p","prototype","hasOwnProperty","call","BlankNode","Literal","NamedNode_1","languageOrDatatype","language","datatype","RDF_LANGUAGE_STRING","XSD_STRING","sax","strict","opt","SAXParser","SAXStream","createStream","MAX_BUFFER_LENGTH","Stream","buffers","clearBuffers","q","c","bufferCheckPosition","lowercase","lowercasetags","looseCase","tags","closed","closedRoot","sawRoot","tag","error","noscript","state","S","BEGIN","strictEntities","ENTITIES","XML_ENTITIES","attribList","xmlns","ns","rootNS","unquotedAttributeValues","position","emit","checkBufferLength","maxAllowed","Math","max","maxActual","l","len","closeText","emitNode","cdata","script","flushBuffers","EVENTS","F","newf","keys","a","end","write","resume","close","flush","ex","streamWraps","filter","ev","apply","readable","me","onend","onerror","er","_decoder","forEach","set","h","removeAllListeners","on","data","Buffer","isBuffer","SD","toString","chunk","handler","args","arguments","Array","splice","CDATA","DOCTYPE","XML_NAMESPACE","XMLNS_NAMESPACE","xml","nameStart","nameBody","entityStart","entityBody","isWhitespace","isQuote","isAttribEnd","isMatch","regex","test","notMatch","s","STATE","BEGIN_WHITESPACE","TEXT","TEXT_ENTITY","OPEN_WAKA","SGML_DECL","SGML_DECL_QUOTED","DOCTYPE_QUOTED","DOCTYPE_DTD","DOCTYPE_DTD_QUOTED","COMMENT_STARTING","COMMENT","COMMENT_ENDING","COMMENT_ENDED","CDATA_ENDING","CDATA_ENDING_2","PROC_INST","PROC_INST_BODY","PROC_INST_ENDING","OPEN_TAG","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG","CLOSE_TAG_SAW_WHITE","SCRIPT","SCRIPT_ENDING","key","e","String","fromCharCode","event","nodeType","textNode","textopts","text","trim","normalize","replace","strictFail","newTag","tagName","parent","name","attributes","qname","attribute","qualName","split","prefix","local","attrib","attribName","attribValue","qn","openTag","selfClosing","uri","JSON","stringify","nv","isSelfClosing","toLowerCase","closeTag","t","closeTo","x","n","parseEntity","num","entity","entityLC","numStr","charAt","slice","parseInt","isNaN","fromCodePoint","beginWhiteSpace","startTagPosition","result","starti","substring","sgmlDecl","procInstName","procInstBody","pad","comment","doctype","toUpperCase","body","returnState","parsedEntity","unparsedEntities","values","includes","stringFromCharCode","floor","highSurrogate","lowSurrogate","MAX_SIZE","codeUnits","index","codePoint","Number","isFinite","RangeError","ParseType","RdfXmlParser","relative_to_absolute_iri_1","sax_1","stream_1","ParseError_1","rdf_data_factory_1","Transform","readableObjectMode","activeTagStack","nodeIds","assign","options","dataFactory","DataFactory","defaultGraph","attachSaxListeners","parseNamespace","parentTag","thisNs","hasNs","attributeKey","parentNs","DEFAULT_NS","concat","expandPrefixedTerm","term","colonIndex","defaultNamespace","nsElement","isValidIri","IRI_REGEX","import","stream","output","PassThrough","parsed","pipe","_transform","encoding","callback","newParseError","valueToUri","activeTag","uriToNamedNode","namedNode","validateNcname","NCNAME_MATCHER","onTag","bind","onText","onCloseTag","onDoctype","currentParseType","RESOURCE","hadChildren","childrenParseType","childrenStringTags","tagContents","tagString","stringActiveTag","childrenStringEmitClosingTag","onTagResource","onTagProperty","rootTag","tagExpanded","PROPERTY","typedNode","RDF","FORBIDDEN_NODE_ELEMENTS","predicates","objects","activeSubjectValue","claimSubjectNodeId","subjectValueBlank","explicitType","attributeValue","attributeKeyExpanded","XML","blankNode","claimNodeId","type","emitTriple","reifiedStatementId","childrenCollectionSubject","linkTerm","childrenCollectionPredicate","predicateSubPredicates","predicateSubObjects","predicateEmitted","literal","listItemCounter","FORBIDDEN_PROPERTY_ELEMENTS","parseType","attributedProperty","activeSubSubjectValue","subSubjectValueBlank","propertyAttributeKey","propertyAttributeValue","propertyAttributeKeyExpanded","nestedBNode","childrenTagsToString","subjectParent","statementId","quad","allowDuplicateRdfIds","poppedTag","match","MIME_TYPE","XMLNS","Variable","BlankNode_1","DefaultGraph_1","Literal_1","Quad_1","Variable_1","dataFactoryCounter","blankNodeCounter","blankNodePrefix","variable","DefaultGraph","INSTANCE","fromTerm","original","fromQuad","resetBlankNodeCounter"],"sourceRoot":""}