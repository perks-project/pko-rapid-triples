{"version":3,"file":"js/699.4be6427a.js","mappings":"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","sources":["webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerArrayValue.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/ContextTree.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIndex.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordNest.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerInvalidFallback.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordContext.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerContainer.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/node_modules/rdf-data-factory/lib/Quad.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/node_modules/rdf-data-factory/lib/Literal.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordUnknownFallback.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerIdentifier.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordType.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/node_modules/rdf-data-factory/lib/DefaultGraph.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/ContextParser.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordIncluded.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeyword.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/JsonLdParser.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/node_modules/rdf-data-factory/lib/BlankNode.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/node_modules/rdf-data-factory/lib/DataFactory.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/Util.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/index.js","webpack://pko-rapid-triples/./node_modules/duplex-to/readable.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/IDocumentLoader.js","webpack://pko-rapid-triples/./node_modules/@bergos/jsonparse/jsonparse.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/index.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/JsonLdContextNormalized.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/FetchDocumentLoader.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/ParsingContext.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/Util.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/EntryHandlerPredicate.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/JsonLdContext.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/node_modules/rdf-data-factory/lib/NamedNode.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordId.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerLanguage.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordValue.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-context-parser/lib/ErrorCoded.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/containerhandler/ContainerHandlerType.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/node_modules/rdf-data-factory/lib/Variable.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordAnnotation.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/lib/entryhandler/keyword/EntryHandlerKeywordGraph.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/sink/index.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/jsonld-streaming-parser/node_modules/rdf-data-factory/index.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/parser-jsonld/lib/ParserStream.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/parser-jsonld/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerArrayValue = void 0;\nconst Util_1 = require(\"../Util\");\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Handles values that are part of an array.\n */\nclass EntryHandlerArrayValue {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return typeof keys[depth] === 'number';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        let parentKey = await util.unaliasKeywordParent(keys, depth);\n        // Check if we have an anonymous list\n        if (parentKey === '@list') {\n            // Our value is part of an array\n            // Determine the list root key\n            let listRootKey = null;\n            let listRootDepth = 0;\n            for (let i = depth - 2; i > 0; i--) {\n                const keyOption = keys[i];\n                if (typeof keyOption === 'string' || typeof keyOption === 'number') {\n                    listRootDepth = i;\n                    listRootKey = keyOption;\n                    break;\n                }\n            }\n            if (listRootKey !== null) {\n                // Emit the given objects as list elements\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), listRootKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, listRootDepth), listRootDepth);\n                }\n            }\n        }\n        else if (parentKey === '@set') {\n            // Our value is part of a set, so we just add it to the parent-parent\n            await parsingContext.newOnValueJob(keys.slice(0, -2), value, depth - 2, false);\n        }\n        else if (parentKey !== undefined && parentKey !== '@type') {\n            // Buffer our value using the parent key as predicate\n            // Determine the first parent key that is *not* an array key\n            // This is needed in case we have an @list container with nested arrays,\n            // where each of them should produce nested RDF lists.\n            for (let i = depth - 1; i > 0; i--) {\n                if (typeof keys[i] !== 'number') {\n                    parentKey = await util.unaliasKeyword(keys[i], keys, i);\n                    break;\n                }\n            }\n            // Check if the predicate is marked as an @list in the context\n            const parentContext = await parsingContext.getContext(keys.slice(0, -1));\n            if ('@list' in Util_1.Util.getContextValueContainer(parentContext, parentKey)) {\n                // Our value is part of an array\n                // Emit the given objects as list elements\n                parsingContext.emittedStack[depth + 1] = true; // Ensure the creation of bnodes for empty nodes\n                const values = await util.valueToTerm(await parsingContext.getContext(keys), parentKey, value, depth, keys);\n                for (const object of values) {\n                    await this.handleListElement(parsingContext, util, object, value, depth, keys.slice(0, -1), depth - 1);\n                }\n                // If no values were found, emit a falsy list element to force an empty RDF list to be emitted.\n                if (values.length === 0) {\n                    await this.handleListElement(parsingContext, util, null, value, depth, keys.slice(0, -1), depth - 1);\n                }\n            }\n            else {\n                // Copy the stack values up one level so that the next job can access them.\n                parsingContext.shiftStack(depth, 1);\n                // Execute the job one level higher\n                await parsingContext.newOnValueJob(keys.slice(0, -1), value, depth - 1, false);\n                // Remove any defined contexts at this level to avoid it to propagate to the next array element.\n                parsingContext.contextTree.removeContext(keys.slice(0, -1));\n            }\n        }\n    }\n    async handleListElement(parsingContext, util, value, valueOriginal, depth, listRootKeys, listRootDepth) {\n        // Buffer our value as an RDF list using the listRootKey as predicate\n        let listPointer = parsingContext.listPointerStack[depth];\n        if (valueOriginal !== null && (await util.unaliasKeywords(valueOriginal, listRootKeys, depth))['@value'] !== null) {\n            if (!listPointer || !listPointer.value) {\n                const linkTerm = util.dataFactory.blankNode();\n                listPointer = { value: linkTerm, listRootDepth, listId: linkTerm };\n            }\n            else {\n                // rdf:rest links are always emitted before the next element,\n                // as the blank node identifier is only created at that point.\n                // Because of this reason, the final rdf:nil is emitted when the stack depth is decreased.\n                const newLinkTerm = util.dataFactory.blankNode();\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfRest, newLinkTerm, util.getDefaultGraph()));\n                // Update the list pointer for the next element\n                listPointer.value = newLinkTerm;\n            }\n            // Emit a list element for the current value\n            // Omit rdf:first if the value is invalid\n            if (value) {\n                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer.value, util.rdfFirst, value, util.getDefaultGraph()));\n            }\n        }\n        else {\n            // A falsy list element if found.\n            // Mark it as an rdf:nil list until another valid list element comes in\n            if (!listPointer) {\n                listPointer = { listRootDepth, listId: util.rdfNil };\n            }\n        }\n        parsingContext.listPointerStack[depth] = listPointer;\n        // Error if an annotation was defined\n        if (parsingContext.rdfstar && parsingContext.annotationsBuffer[depth]) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal annotation inside a list`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n        }\n    }\n}\nexports.EntryHandlerArrayValue = EntryHandlerArrayValue;\n//# sourceMappingURL=EntryHandlerArrayValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextTree = void 0;\n/**\n * A tree structure that holds all contexts,\n * based on their position in the JSON object.\n *\n * Positions are identified by a path of keys.\n */\nclass ContextTree {\n    constructor() {\n        this.subTrees = {};\n    }\n    getContext(keys) {\n        if (keys.length > 0) {\n            const [head, ...tail] = keys;\n            const subTree = this.subTrees[head];\n            if (subTree) {\n                const subContext = subTree.getContext(tail);\n                if (subContext) {\n                    return subContext.then(({ context, depth }) => ({ context, depth: depth + 1 }));\n                }\n            }\n        }\n        return this.context ? this.context.then((context) => ({ context, depth: 0 })) : null;\n    }\n    setContext(keys, context) {\n        if (keys.length === 0) {\n            this.context = context;\n        }\n        else {\n            const [head, ...tail] = keys;\n            let subTree = this.subTrees[head];\n            if (!subTree) {\n                subTree = this.subTrees[head] = new ContextTree();\n            }\n            subTree.setContext(tail, context);\n        }\n    }\n    removeContext(path) {\n        this.setContext(path, null);\n    }\n}\nexports.ContextTree = ContextTree;\n//# sourceMappingURL=ContextTree.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIndex = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @index.\n *\n * This will ignore the current key and add this entry to the parent node.\n */\nclass ContainerHandlerIndex {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            const graphContainer = '@graph' in containers;\n            // Check if the container is a property-based container by checking if there is a valid @index.\n            const context = await parsingContext.getContext(keys);\n            const indexKey = keys[depth - 1];\n            const indexPropertyRaw = Util_1.Util.getContextValueIndex(context, indexKey);\n            if (indexPropertyRaw) {\n                // Validate the @index value\n                if (jsonld_context_parser_1.Util.isPotentialKeyword(indexPropertyRaw)) {\n                    throw new jsonld_context_parser_1.ErrorCoded(`Keywords can not be used as @index value, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                if (typeof indexPropertyRaw !== 'string') {\n                    throw new jsonld_context_parser_1.ErrorCoded(`@index values must be strings, got: ${indexPropertyRaw}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // When @index is used, values must be node values, unless @type: @id is defined in the context\n                if (typeof value !== 'object') {\n                    // Error if we don't have @type: @id\n                    if (Util_1.Util.getContextValueType(context, indexKey) !== '@id') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Property-based index containers require nodes as values or strings with @type: @id, but got: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                    }\n                    // Add an @id to the stack, so our expanded @index value can make use of it\n                    const id = util.resourceToTerm(context, value);\n                    if (id) {\n                        parsingContext.idStack[depth + 1] = [id];\n                    }\n                }\n                // Expand the @index value\n                const indexProperty = util.createVocabOrBaseTerm(context, indexPropertyRaw);\n                if (indexProperty) {\n                    const indexValues = await util.valueToTerm(context, indexPropertyRaw, await util.getContainerKey(keys[depth], keys, depth), depth, keys);\n                    if (graphContainer) {\n                        // When we're in a graph container, attach the index to the graph identifier\n                        const graphId = await util.getGraphContainerValue(keys, depth + 1);\n                        for (const indexValue of indexValues) {\n                            parsingContext.emitQuad(depth, util.dataFactory.quad(graphId, indexProperty, indexValue, util.getDefaultGraph()));\n                        }\n                    }\n                    else {\n                        // Otherwise, attach the index to the node identifier\n                        for (const indexValue of indexValues) {\n                            await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, indexProperty, indexValue, false, false, false);\n                        }\n                    }\n                }\n            }\n            const depthOffset = graphContainer ? 2 : 1;\n            await parsingContext.newOnValueJob(keys.slice(0, keys.length - depthOffset), value, depth - depthOffset, true);\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerIndex = ContainerHandlerIndex;\n//# sourceMappingURL=ContainerHandlerIndex.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordNest = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @nest entries.\n */\nclass EntryHandlerKeywordNest extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@nest');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found invalid @nest entry for '${key}': '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        if ('@value' in await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys))) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an invalid @value node for '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_NEST_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordNest = EntryHandlerKeywordNest;\n//# sourceMappingURL=EntryHandlerKeywordNest.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerInvalidFallback = void 0;\n/**\n * A catch-all for properties, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerInvalidFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return true;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerInvalidFallback = EntryHandlerInvalidFallback;\n//# sourceMappingURL=EntryHandlerInvalidFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @context entries.\n */\nclass EntryHandlerKeywordContext extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@context');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Error if an out-of-order context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (parsingContext.processingStack[depth]\n                || parsingContext.processingType[depth]\n                || parsingContext.idStack[depth] !== undefined)) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // Find the parent context to inherit from.\n        // We actually request a context for the current depth (with fallback to parent)\n        // because we want to take into account any property-scoped contexts that are defined for this depth.\n        const parentContext = parsingContext.getContext(keys);\n        // Set the context for this scope\n        const context = parsingContext.parseContext(value, (await parentContext).getContextRaw());\n        parsingContext.contextTree.setContext(keys.slice(0, -1), context);\n        parsingContext.emitContext(value);\n        await parsingContext.validateContext(await context);\n    }\n}\nexports.EntryHandlerKeywordContext = EntryHandlerKeywordContext;\n//# sourceMappingURL=EntryHandlerKeywordContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerContainer = void 0;\nconst ContainerHandlerIdentifier_1 = require(\"../containerhandler/ContainerHandlerIdentifier\");\nconst ContainerHandlerIndex_1 = require(\"../containerhandler/ContainerHandlerIndex\");\nconst ContainerHandlerLanguage_1 = require(\"../containerhandler/ContainerHandlerLanguage\");\nconst ContainerHandlerType_1 = require(\"../containerhandler/ContainerHandlerType\");\nconst Util_1 = require(\"../Util\");\n/**\n * Handles values that are part of a container type (like @index),\n * as specified by {@link IContainerHandler}.\n */\nclass EntryHandlerContainer {\n    /**\n     * Check fit the given container is a simple @graph container.\n     * Concretely, it will check if no @index or @id is active as well.\n     * @param containers A container hash.\n     */\n    static isSimpleGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length === 2) || Object.keys(containers).length === 1);\n    }\n    /**\n     * Check fit the given container is a complex @graph container.\n     * Concretely, it will check if @index or @id is active as well next to @graph.\n     * @param containers A container hash.\n     */\n    static isComplexGraphContainer(containers) {\n        return '@graph' in containers\n            && (('@set' in containers && Object.keys(containers).length > 2)\n                || (!('@set' in containers) && Object.keys(containers).length > 1));\n    }\n    /**\n     * Create an graph container index that can be used for identifying a graph term inside the graphContainerTermStack.\n     * @param containers The applicable containers.\n     * @param depth The container depth.\n     * @param keys The array of keys.\n     * @return The graph index.\n     */\n    static getContainerGraphIndex(containers, depth, keys) {\n        let isSimpleGraphContainer = EntryHandlerContainer.isSimpleGraphContainer(containers);\n        let index = '';\n        for (let i = depth; i < keys.length; i++) {\n            if (!isSimpleGraphContainer || typeof keys[i] === 'number') {\n                index += ':' + keys[i];\n            }\n            // Only allow a second 'real' key if in a non-simple graph container.\n            if (!isSimpleGraphContainer && typeof keys[i] !== 'number') {\n                isSimpleGraphContainer = true;\n            }\n        }\n        return index;\n    }\n    /**\n     * Return the applicable container type at the given depth.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<{ containers: {[typeName: string]: boolean}, depth: number, fallback: boolean }>}\n     *          All applicable containers for the given depth,\n     *          the `depth` of the container root (can change when arrays are in the key chain),\n     *          and the `fallback` flag that indicates if the default container type was returned\n     *            (i.e., no dedicated container type is defined).\n     */\n    static async getContainerHandler(parsingContext, keys, depth) {\n        const fallback = {\n            containers: { '@set': true },\n            depth,\n            fallback: true,\n        };\n        // A flag that is enabled when @graph container should be tested in next iteration\n        let checkGraphContainer = false;\n        // Iterate from deeper to higher\n        const context = await parsingContext.getContext(keys, 2);\n        for (let i = depth - 1; i >= 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                // @graph containers without any other types are one level less deep, and require special handling\n                const containersSelf = Util_1.Util.getContextValue(context, '@container', keys[i], false);\n                if (containersSelf && EntryHandlerContainer.isSimpleGraphContainer(containersSelf)) {\n                    return {\n                        containers: containersSelf,\n                        depth: i + 1,\n                        fallback: false,\n                    };\n                }\n                const containersParent = Util_1.Util.getContextValue(context, '@container', keys[i - 1], false);\n                if (!containersParent) { // If we have the fallback container value\n                    if (checkGraphContainer) {\n                        // Return false if we were already expecting a @graph-@id of @graph-@index container\n                        return fallback;\n                    }\n                    // Check parent-parent, we may be in a @graph-@id of @graph-@index container, which have two levels\n                    checkGraphContainer = true;\n                }\n                else {\n                    // We had an invalid container next iteration, so we now have to check if we were in an @graph container\n                    const graphContainer = '@graph' in containersParent;\n                    // We're in a regular container\n                    for (const containerHandleName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n                        if (containersParent[containerHandleName]) {\n                            if (graphContainer) {\n                                // Only accept graph containers if their combined handlers can handle them.\n                                if (EntryHandlerContainer.CONTAINER_HANDLERS[containerHandleName].canCombineWithGraph()) {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                                else {\n                                    return fallback;\n                                }\n                            }\n                            else {\n                                // Only accept if we were not expecting a @graph-@id of @graph-@index container\n                                if (checkGraphContainer) {\n                                    return fallback;\n                                }\n                                else {\n                                    return {\n                                        containers: containersParent,\n                                        depth: i,\n                                        fallback: false,\n                                    };\n                                }\n                            }\n                        }\n                    }\n                    // Fail if no valid container handlers were found\n                    return fallback;\n                }\n            }\n        }\n        return fallback;\n    }\n    /**\n     * Check if we are handling a value at the given depth\n     * that is part of something that should be handled as a container,\n     * AND if this container should be buffered, so that it can be handled by a dedicated container handler.\n     *\n     * For instance, any container with @graph will NOT be buffered.\n     *\n     * This will ignore any arrays in the key chain.\n     *\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {any[]} keys The array of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<boolean>} If we are in the scope of a container handler.\n     */\n    static async isBufferableContainerHandler(parsingContext, keys, depth) {\n        const handler = await EntryHandlerContainer.getContainerHandler(parsingContext, keys, depth);\n        return !handler.fallback && !('@graph' in handler.containers);\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return !!await this.test(parsingContext, util, null, keys, depth);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        const containers = Util_1.Util.getContextValueContainer(await parsingContext.getContext(keys, 2), keys[depth - 1]);\n        for (const containerName in EntryHandlerContainer.CONTAINER_HANDLERS) {\n            if (containers[containerName]) {\n                return {\n                    containers,\n                    handler: EntryHandlerContainer.CONTAINER_HANDLERS[containerName],\n                };\n            }\n        }\n        return null;\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        return testResult.handler.handle(testResult.containers, parsingContext, util, keys, value, depth);\n    }\n}\nexports.EntryHandlerContainer = EntryHandlerContainer;\nEntryHandlerContainer.CONTAINER_HANDLERS = {\n    '@id': new ContainerHandlerIdentifier_1.ContainerHandlerIdentifier(),\n    '@index': new ContainerHandlerIndex_1.ContainerHandlerIndex(),\n    '@language': new ContainerHandlerLanguage_1.ContainerHandlerLanguage(),\n    '@type': new ContainerHandlerType_1.ContainerHandlerType(),\n};\n//# sourceMappingURL=EntryHandlerContainer.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n//# sourceMappingURL=Quad.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Literal = void 0;\nconst NamedNode_1 = require(\"./NamedNode\");\n/**\n * A term that represents an RDF literal,\n * containing a string with an optional language tag and optional direction\n * or datatype.\n */\nclass Literal {\n    constructor(value, languageOrDatatype) {\n        this.termType = 'Literal';\n        this.value = value;\n        if (typeof languageOrDatatype === 'string') {\n            this.language = languageOrDatatype;\n            this.datatype = Literal.RDF_LANGUAGE_STRING;\n            this.direction = '';\n        }\n        else if (languageOrDatatype) {\n            if ('termType' in languageOrDatatype) {\n                this.language = '';\n                this.datatype = languageOrDatatype;\n                this.direction = '';\n            }\n            else {\n                this.language = languageOrDatatype.language;\n                this.datatype = languageOrDatatype.direction ?\n                    Literal.RDF_DIRECTIONAL_LANGUAGE_STRING :\n                    Literal.RDF_LANGUAGE_STRING;\n                this.direction = languageOrDatatype.direction || '';\n            }\n        }\n        else {\n            this.language = '';\n            this.datatype = Literal.XSD_STRING;\n            this.direction = '';\n        }\n    }\n    equals(other) {\n        return !!other && other.termType === 'Literal' && other.value === this.value &&\n            other.language === this.language &&\n            ((other.direction === this.direction) || (!other.direction && this.direction === '')) &&\n            this.datatype.equals(other.datatype);\n    }\n}\nexports.Literal = Literal;\nLiteral.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nLiteral.RDF_DIRECTIONAL_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#dirLangString');\nLiteral.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');\n//# sourceMappingURL=Literal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordUnknownFallback = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * A catch-all for keywords, that will either emit an error or ignore,\n * depending on whether or not the `strictValues` property is set.\n */\nclass EntryHandlerKeywordUnknownFallback {\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = await util.unaliasKeyword(keys[depth], keys, depth);\n        if (jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            // Don't emit anything inside free-floating lists\n            if (!inProperty) {\n                if (key === '@list') {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return jsonld_context_parser_1.Util.isPotentialKeyword(key);\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keywordType = EntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES[key];\n        if (keywordType !== undefined) {\n            if (keywordType && typeof value !== keywordType.type) {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid value type for '${key}' with value '${value}'`, keywordType.errorCode));\n            }\n        }\n        else if (parsingContext.strictValues) {\n            parsingContext.emitError(new Error(`Unknown keyword '${key}' with value '${value}'`));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordUnknownFallback = EntryHandlerKeywordUnknownFallback;\nEntryHandlerKeywordUnknownFallback.VALID_KEYWORDS_TYPES = {\n    '@index': { type: 'string', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE },\n    '@list': null,\n    '@reverse': { type: 'object', errorCode: jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_VALUE },\n    '@set': null,\n    '@value': null,\n};\n//# sourceMappingURL=EntryHandlerKeywordUnknownFallback.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerIdentifier = void 0;\n/**\n * Container handler for @id.\n *\n * It assumes that the current key is the identifier of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerIdentifier {\n    canCombineWithGraph() {\n        return true;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        let id;\n        // First check if the child node already has a defined id.\n        if (parsingContext.emittedStack[depth + 1] && parsingContext.idStack[depth + 1]) {\n            // Use the existing identifier\n            id = parsingContext.idStack[depth + 1][0];\n        }\n        else {\n            // Create the identifier\n            const keyUnaliased = await util.getContainerKey(keys[depth], keys, depth);\n            const maybeId = keyUnaliased !== null\n                ? await util.resourceToTerm(await parsingContext.getContext(keys), keys[depth])\n                : util.dataFactory.blankNode();\n            // Do nothing if the id is invalid\n            if (!maybeId) {\n                parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n                return;\n            }\n            id = maybeId;\n            // Insert the id into the stack so that buffered children can make us of it.\n            parsingContext.idStack[depth + 1] = [id];\n        }\n        // Insert the id into the stack so that parents can make use of it.\n        // Insert it as an array because multiple id container entries may exist\n        let ids = parsingContext.idStack[depth];\n        if (!ids) {\n            ids = parsingContext.idStack[depth] = [];\n        }\n        // Only insert the term if it does not exist yet in the array.\n        if (!ids.some((term) => term.equals(id))) {\n            ids.push(id);\n        }\n        // Flush any pending flush buffers\n        if (!await parsingContext.handlePendingContainerFlushBuffers()) {\n            parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n        }\n    }\n}\nexports.ContainerHandlerIdentifier = ContainerHandlerIdentifier;\n//# sourceMappingURL=ContainerHandlerIdentifier.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordType = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../../Util\");\nconst EntryHandlerPredicate_1 = require(\"../EntryHandlerPredicate\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordType extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@type');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        const keyOriginal = keys[depth];\n        // The current identifier identifies an rdf:type predicate.\n        // But we only emit it once the node closes,\n        // as it's possible that the @type is used to identify the datatype of a literal, which we ignore here.\n        const context = await parsingContext.getContext(keys);\n        const predicate = util.rdfType;\n        const parentKey = await util.unaliasKeywordParent(keys, depth);\n        const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, parentKey);\n        const isEmbedded = Util_1.Util.isPropertyInEmbeddedNode(parentKey);\n        util.validateReverseInEmbeddedNode(key, reverse, isEmbedded);\n        const isAnnotation = Util_1.Util.isPropertyInAnnotationObject(parentKey);\n        // Handle multiple values if the value is an array\n        const elements = Array.isArray(value) ? value : [value];\n        for (const element of elements) {\n            if (typeof element !== 'string') {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @type '${element}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPE_VALUE));\n            }\n            const type = util.createVocabOrBaseTerm(context, element);\n            if (type) {\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, type, reverse, isEmbedded, isAnnotation);\n            }\n        }\n        // Collect type-scoped contexts if they exist\n        let scopedContext = Promise.resolve(context);\n        let hasTypedScopedContext = false;\n        for (const element of elements.sort()) { // Spec requires lexicographical ordering\n            const typeContext = Util_1.Util.getContextValue(context, '@context', element, null);\n            if (typeContext) {\n                hasTypedScopedContext = true;\n                scopedContext = scopedContext.then((c) => parsingContext.parseContext(typeContext, c.getContextRaw()));\n            }\n        }\n        // Error if an out-of-order type-scoped context was found when support is not enabled.\n        if (parsingContext.streamingProfile\n            && (hasTypedScopedContext || !parsingContext.streamingProfileAllowOutOfOrderPlainType)\n            && (parsingContext.processingStack[depth] || parsingContext.idStack[depth])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded('Found an out-of-order type-scoped context, while streaming is enabled.' +\n                '(disable `streamingProfile`)', jsonld_context_parser_1.ERROR_CODES.INVALID_STREAMING_KEY_ORDER));\n        }\n        // If at least least one type-scoped context applies, set them in the tree.\n        if (hasTypedScopedContext) {\n            // Do not propagate by default\n            scopedContext = scopedContext.then((c) => {\n                // Set the original context at this depth as a fallback\n                // This is needed when a context was already defined at the given depth,\n                // and this context needs to remain accessible from child nodes when propagation is disabled.\n                if (c.getContextRaw()['@propagate'] !== true) {\n                    return new jsonld_context_parser_1.JsonLdContextNormalized(Object.assign(Object.assign({}, c.getContextRaw()), { '@propagate': false, '@__propagateFallback': context.getContextRaw() }));\n                }\n                return c;\n            });\n            // Set the new context in the context tree\n            parsingContext.contextTree.setContext(keys.slice(0, keys.length - 1), scopedContext);\n        }\n        // Flag that type has been processed at this depth\n        parsingContext.processingType[depth] = true;\n    }\n}\nexports.EntryHandlerKeywordType = EntryHandlerKeywordType;\n//# sourceMappingURL=EntryHandlerKeywordType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGraph = void 0;\n/**\n * A singleton term instance that represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass DefaultGraph {\n    constructor() {\n        this.termType = 'DefaultGraph';\n        this.value = '';\n        // Private constructor\n    }\n    equals(other) {\n        return !!other && other.termType === 'DefaultGraph';\n    }\n}\nexports.DefaultGraph = DefaultGraph;\nDefaultGraph.INSTANCE = new DefaultGraph();\n//# sourceMappingURL=DefaultGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextParser = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst FetchDocumentLoader_1 = require(\"./FetchDocumentLoader\");\nconst JsonLdContextNormalized_1 = require(\"./JsonLdContextNormalized\");\nconst Util_1 = require(\"./Util\");\n/**\n * Parses JSON-LD contexts.\n */\nclass ContextParser {\n    constructor(options) {\n        options = options || {};\n        this.documentLoader = options.documentLoader || new FetchDocumentLoader_1.FetchDocumentLoader();\n        this.documentCache = {};\n        this.validateContext = !options.skipValidation;\n        this.expandContentTypeToBase = !!options.expandContentTypeToBase;\n        this.remoteContextsDepthLimit = options.remoteContextsDepthLimit || 32;\n        this.redirectSchemaOrgHttps = 'redirectSchemaOrgHttps' in options ? !!options.redirectSchemaOrgHttps : true;\n    }\n    /**\n     * Validate the given @language value.\n     * An error will be thrown if it is invalid.\n     * @param value An @language value.\n     * @param {boolean} strictRange If the string value should be strictly checked against a regex.\n     * @param {string} errorCode The error code to emit on errors.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateLanguage(value, strictRange, errorCode) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a string, got '${JSON.stringify(value)}'`, errorCode);\n        }\n        if (!Util_1.Util.REGEX_LANGUAGE_TAG.test(value)) {\n            if (strictRange) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@language' must be a valid language tag, got '${JSON.stringify(value)}'`, errorCode);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Validate the given @direction value.\n     * An error will be thrown if it is invalid.\n     * @param value An @direction value.\n     * @param {boolean} strictValues If the string value should be strictly checked against a regex.\n     * @return {boolean} If validation passed.\n     *                   Can only be false if strictRange is false and the string value did not pass the regex.\n     */\n    static validateDirection(value, strictValues) {\n        if (typeof value !== 'string') {\n            throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be a string, got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n        }\n        if (!Util_1.Util.REGEX_DIRECTION_TAG.test(value)) {\n            if (strictValues) {\n                throw new ErrorCoded_1.ErrorCoded(`The value of an '@direction' must be 'ltr' or 'rtl', got '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_DIRECTION);\n            }\n            else {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Add an @id term for all @reverse terms.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     */\n    idifyReverseTerms(context) {\n        for (const key of Object.keys(context)) {\n            let value = context[key];\n            if (value && typeof value === 'object') {\n                if (value['@reverse'] && !value['@id']) {\n                    if (typeof value['@reverse'] !== 'string' || Util_1.Util.isValidKeyword(value['@reverse'])) {\n                        throw new ErrorCoded_1.ErrorCoded(`Invalid @reverse value, must be absolute IRI or blank node: '${value['@reverse']}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                    }\n                    value = context[key] = Object.assign(Object.assign({}, value), { '@id': value['@reverse'] });\n                    value['@id'] = value['@reverse'];\n                    if (Util_1.Util.isPotentialKeyword(value['@reverse'])) {\n                        delete value['@reverse'];\n                    }\n                    else {\n                        value['@reverse'] = true;\n                    }\n                }\n            }\n        }\n        return context;\n    }\n    /**\n     * Expand all prefixed terms in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {boolean} expandContentTypeToBase If @type inside the context may be expanded\n     *                                          via @base if @vocab is set to null.\n     * @param {string[]} keys Optional set of keys from the context to expand. If left undefined, all\n     * keys in the context will be expanded.\n     */\n    expandPrefixedTerms(context, expandContentTypeToBase, keys) {\n        const contextRaw = context.getContextRaw();\n        for (const key of (keys || Object.keys(contextRaw))) {\n            // Only expand allowed keys\n            if (Util_1.Util.EXPAND_KEYS_BLACKLIST.indexOf(key) < 0 && !Util_1.Util.isReservedInternalKeyword(key)) {\n                // Error if we try to alias a keyword to something else.\n                const keyValue = contextRaw[key];\n                if (Util_1.Util.isPotentialKeyword(key) && Util_1.Util.ALIAS_DOMAIN_BLACKLIST.indexOf(key) >= 0) {\n                    if (key !== '@type' || typeof contextRaw[key] === 'object'\n                        && !(contextRaw[key]['@protected'] || contextRaw[key]['@container'] === '@set')) {\n                        throw new ErrorCoded_1.ErrorCoded(`Keywords can not be aliased to something else.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                    }\n                }\n                // Error if we try to alias to an illegal keyword\n                if (Util_1.Util.ALIAS_RANGE_BLACKLIST.indexOf(Util_1.Util.getContextValueId(keyValue)) >= 0) {\n                    throw new ErrorCoded_1.ErrorCoded(`Aliasing to certain keywords is not allowed.\nTried mapping ${key} to ${JSON.stringify(keyValue)}`, ErrorCoded_1.ERROR_CODES.INVALID_KEYWORD_ALIAS);\n                }\n                // Error if this term was marked as prefix as well\n                if (keyValue && Util_1.Util.isPotentialKeyword(Util_1.Util.getContextValueId(keyValue))\n                    && keyValue['@prefix'] === true) {\n                    throw new ErrorCoded_1.ErrorCoded(`Tried to use keyword aliases as prefix: '${key}': '${JSON.stringify(keyValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n                // Loop because prefixes might be nested\n                while (Util_1.Util.isPrefixValue(contextRaw[key])) {\n                    const value = contextRaw[key];\n                    let changed = false;\n                    if (typeof value === 'string') {\n                        contextRaw[key] = context.expandTerm(value, true);\n                        changed = changed || value !== contextRaw[key];\n                    }\n                    else {\n                        const id = value['@id'];\n                        const type = value['@type'];\n                        // If @id is missing, don't allow @id to be added if @prefix: true and key not being a valid IRI.\n                        const canAddIdEntry = !('@prefix' in value) || Util_1.Util.isValidIri(key);\n                        if ('@id' in value) {\n                            // Use @id value for expansion\n                            if (id !== undefined && id !== null && typeof id === 'string') {\n                                contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { '@id': context.expandTerm(id, true) });\n                                changed = changed || id !== contextRaw[key]['@id'];\n                            }\n                        }\n                        else if (!Util_1.Util.isPotentialKeyword(key) && canAddIdEntry) {\n                            // Add an explicit @id value based on the expanded key value\n                            const newId = context.expandTerm(key, true);\n                            if (newId !== key) {\n                                // Don't set @id if expansion failed\n                                contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { '@id': newId });\n                                changed = true;\n                            }\n                        }\n                        if (type && typeof type === 'string' && type !== '@vocab'\n                            && (!value['@container'] || !value['@container']['@type'])\n                            && canAddIdEntry) {\n                            // First check @vocab, then fallback to @base\n                            let expandedType = context.expandTerm(type, true);\n                            if (expandContentTypeToBase && type === expandedType) {\n                                expandedType = context.expandTerm(type, false);\n                            }\n                            if (expandedType !== type) {\n                                changed = true;\n                                contextRaw[key] = Object.assign(Object.assign({}, contextRaw[key]), { '@type': expandedType });\n                            }\n                        }\n                    }\n                    if (!changed) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Normalize the @language entries in the given context to lowercase.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} parseOptions The parsing options.\n     */\n    normalize(context, { processingMode, normalizeLanguageTags }) {\n        // Lowercase language keys in 1.0\n        if (normalizeLanguageTags || processingMode === 1.0) {\n            for (const key of Object.keys(context)) {\n                if (key === '@language' && typeof context[key] === 'string') {\n                    context[key] = context[key].toLowerCase();\n                }\n                else {\n                    const value = context[key];\n                    if (value && typeof value === 'object') {\n                        if (typeof value['@language'] === 'string') {\n                            const lowercase = value['@language'].toLowerCase();\n                            if (lowercase !== value['@language']) {\n                                context[key] = Object.assign(Object.assign({}, value), { '@language': lowercase });\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert all @container strings and array values to hash-based values.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     */\n    containersToHash(context) {\n        for (const key of Object.keys(context)) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if (typeof value['@container'] === 'string') {\n                    context[key] = Object.assign(Object.assign({}, value), { '@container': { [value['@container']]: true } });\n                }\n                else if (Array.isArray(value['@container'])) {\n                    const newValue = {};\n                    for (const containerValue of value['@container']) {\n                        newValue[containerValue] = true;\n                    }\n                    context[key] = Object.assign(Object.assign({}, value), { '@container': newValue });\n                }\n            }\n        }\n    }\n    /**\n     * Normalize and apply context-level @protected terms onto each term separately.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {number} processingMode The processing mode.\n     */\n    applyScopedProtected(context, { processingMode }, expandOptions) {\n        if (processingMode && processingMode >= 1.1) {\n            if (context['@protected']) {\n                for (const key of Object.keys(context)) {\n                    if (Util_1.Util.isReservedInternalKeyword(key)) {\n                        continue;\n                    }\n                    if (!Util_1.Util.isPotentialKeyword(key) && !Util_1.Util.isTermProtected(context, key)) {\n                        const value = context[key];\n                        if (value && typeof value === 'object') {\n                            if (!('@protected' in context[key])) {\n                                // Mark terms with object values as protected if they don't have an @protected: false annotation\n                                context[key] = Object.assign(Object.assign({}, context[key]), { '@protected': true });\n                            }\n                        }\n                        else {\n                            // Convert string-based term values to object-based values with @protected: true\n                            context[key] = {\n                                '@id': value,\n                                '@protected': true,\n                            };\n                            if (Util_1.Util.isSimpleTermDefinitionPrefix(value, expandOptions)) {\n                                context[key] = Object.assign(Object.assign({}, context[key]), { '@prefix': true });\n                            }\n                        }\n                    }\n                }\n                delete context['@protected'];\n            }\n        }\n    }\n    /**\n     * Check if the given context inheritance does not contain any overrides of protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextBefore The context that may contain some protected terms.\n     * @param {IJsonLdContextNormalizedRaw} contextAfter A new context that is being applied on the first one.\n     * @param {IExpandOptions} expandOptions Options that are needed for any expansions during this validation.\n     * @param {string[]} keys Optional set of keys from the context to validate. If left undefined, all\n     * keys defined in contextAfter will be checked.\n     */\n    validateKeywordRedefinitions(contextBefore, contextAfter, expandOptions, keys) {\n        for (const key of (keys !== null && keys !== void 0 ? keys : Object.keys(contextAfter))) {\n            if (Util_1.Util.isTermProtected(contextBefore, key)) {\n                // The entry in the context before will always be in object-mode\n                // If the new entry is in string-mode, convert it to object-mode\n                // before checking if it is identical.\n                if (typeof contextAfter[key] === 'string') {\n                    contextAfter[key] = { '@id': contextAfter[key], '@protected': true };\n                }\n                else {\n                    // We modify this deliberately,\n                    // as we need it for the value comparison (they must be identical modulo '@protected')),\n                    // and for the fact that this new value will override the first one.\n                    contextAfter[key] = Object.assign(Object.assign({}, contextAfter[key]), { '@protected': true });\n                }\n                // Error if they are not identical\n                if (!Util_1.Util.deepEqual(contextBefore[key], contextAfter[key])) {\n                    throw new ErrorCoded_1.ErrorCoded(`Attempted to override the protected keyword ${key} from ${JSON.stringify(Util_1.Util.getContextValueId(contextBefore[key]))} to ${JSON.stringify(Util_1.Util.getContextValueId(contextAfter[key]))}`, ErrorCoded_1.ERROR_CODES.PROTECTED_TERM_REDEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Validate the entries of the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options The parse options.\n     */\n    validate(context, { processingMode }) {\n        for (const key of Object.keys(context)) {\n            // Ignore reserved internal keywords.\n            if (Util_1.Util.isReservedInternalKeyword(key)) {\n                continue;\n            }\n            // Do not allow empty term\n            if (key === '') {\n                throw new ErrorCoded_1.ErrorCoded(`The empty term is not allowed, got: '${key}': '${JSON.stringify(context[key])}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n            }\n            const value = context[key];\n            const valueType = typeof value;\n            // First check if the key is a keyword\n            if (Util_1.Util.isPotentialKeyword(key)) {\n                switch (key.substr(1)) {\n                    case 'vocab':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @vocab IRI: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                        }\n                        break;\n                    case 'base':\n                        if (value !== null && valueType !== 'string') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @base IRI: ${context[key]}`, ErrorCoded_1.ERROR_CODES.INVALID_BASE_IRI);\n                        }\n                        break;\n                    case 'language':\n                        if (value !== null) {\n                            ContextParser.validateLanguage(value, true, ErrorCoded_1.ERROR_CODES.INVALID_DEFAULT_LANGUAGE);\n                        }\n                        break;\n                    case 'version':\n                        if (value !== null && valueType !== 'number') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @version number: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                        }\n                        break;\n                    case 'direction':\n                        if (value !== null) {\n                            ContextParser.validateDirection(value, true);\n                        }\n                        break;\n                    case 'propagate':\n                        if (processingMode === 1.0) {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an illegal @propagate keyword: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                        }\n                        if (value !== null && valueType !== 'boolean') {\n                            throw new ErrorCoded_1.ErrorCoded(`Found an invalid @propagate value: ${value}`, ErrorCoded_1.ERROR_CODES.INVALID_PROPAGATE_VALUE);\n                        }\n                        break;\n                }\n                // Don't allow keywords to be overridden\n                if (Util_1.Util.isValidKeyword(key) && Util_1.Util.isValidKeyword(Util_1.Util.getContextValueId(value))) {\n                    throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${Util_1.Util\n                        .getContextValueId(value)}'`, ErrorCoded_1.ERROR_CODES.KEYWORD_REDEFINITION);\n                }\n                continue;\n            }\n            // Otherwise, consider the key a term\n            if (value !== null) {\n                switch (valueType) {\n                    case 'string':\n                        if (Util_1.Util.getPrefix(value, context) === key) {\n                            throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                        }\n                        if (Util_1.Util.isValidIriWeak(key)) {\n                            if (value === '@type') {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                            else if (Util_1.Util.isValidIri(value) && value !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                            }\n                        }\n                        break;\n                    case 'object':\n                        if (!Util_1.Util.isCompactIri(key) && !('@id' in value)\n                            && (value['@type'] === '@id' ? !context['@base'] : !context['@vocab'])) {\n                            throw new ErrorCoded_1.ErrorCoded(`Missing @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                        }\n                        for (const objectKey of Object.keys(value)) {\n                            const objectValue = value[objectKey];\n                            if (!objectValue) {\n                                continue;\n                            }\n                            switch (objectKey) {\n                                case '@id':\n                                    if (Util_1.Util.isValidKeyword(objectValue)\n                                        && objectValue !== '@type' && objectValue !== '@id' && objectValue !== '@graph' && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Illegal keyword alias in term value, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.isValidIriWeak(key)) {\n                                        if (objectValue === '@type') {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to @type, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                        else if (Util_1.Util.isValidIri(objectValue)\n                                            && objectValue !== new JsonLdContextNormalized_1.JsonLdContextNormalized(context).expandTerm(key)) {\n                                            throw new ErrorCoded_1.ErrorCoded(`IRIs can not be mapped to other IRIs, found: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                        }\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected non-string @id in context entry: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n                                    }\n                                    if (Util_1.Util.getPrefix(objectValue, context) === key) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Detected cyclical IRI mapping in context entry: '${key}': '${JSON\n                                            .stringify(value)}'`, ErrorCoded_1.ERROR_CODES.CYCLIC_IRI_MAPPING);\n                                    }\n                                    break;\n                                case '@type':\n                                    if (value['@container'] === '@type' && objectValue !== '@id' && objectValue !== '@vocab') {\n                                        throw new ErrorCoded_1.ErrorCoded(`@container: @type only allows @type: @id or @vocab, but got: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (typeof objectValue !== 'string') {\n                                        throw new ErrorCoded_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    if (objectValue !== '@id' && objectValue !== '@vocab'\n                                        && (processingMode === 1.0 || objectValue !== '@json')\n                                        && (processingMode === 1.0 || objectValue !== '@none')\n                                        && (objectValue[0] === '_' || !Util_1.Util.isValidIri(objectValue))) {\n                                        throw new ErrorCoded_1.ErrorCoded(`A context @type must be an absolute IRI, found: '${key}': '${objectValue}'`, ErrorCoded_1.ERROR_CODES.INVALID_TYPE_MAPPING);\n                                    }\n                                    break;\n                                case '@reverse':\n                                    if (typeof objectValue === 'string' && value['@id'] && value['@id'] !== objectValue) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found non-matching @id and @reverse term values in '${key}':\\\n'${objectValue}' and '${value['@id']}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    if ('@nest' in value) {\n                                        throw new ErrorCoded_1.ErrorCoded(`@nest is not allowed in the reverse property '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                    }\n                                    break;\n                                case '@container':\n                                    if (processingMode === 1.0) {\n                                        if (Object.keys(objectValue).length > 1\n                                            || Util_1.Util.CONTAINERS_1_0.indexOf(Object.keys(objectValue)[0]) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${Object.keys(objectValue)}') in 1.0, \\\nmust be only one of ${Util_1.Util.CONTAINERS_1_0.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    for (const containerValue of Object.keys(objectValue)) {\n                                        if (containerValue === '@list' && value['@reverse']) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Term value can not be @container: @list and @reverse at the same time on '${key}'`, ErrorCoded_1.ERROR_CODES.INVALID_REVERSE_PROPERTY);\n                                        }\n                                        if (Util_1.Util.CONTAINERS.indexOf(containerValue) < 0) {\n                                            throw new ErrorCoded_1.ErrorCoded(`Invalid term @container for '${key}' ('${containerValue}'), \\\nmust be one of ${Util_1.Util.CONTAINERS.join(', ')}`, ErrorCoded_1.ERROR_CODES.INVALID_CONTAINER_MAPPING);\n                                        }\n                                    }\n                                    break;\n                                case '@language':\n                                    ContextParser.validateLanguage(objectValue, true, ErrorCoded_1.ERROR_CODES.INVALID_LANGUAGE_MAPPING);\n                                    break;\n                                case '@direction':\n                                    ContextParser.validateDirection(objectValue, true);\n                                    break;\n                                case '@prefix':\n                                    if (objectValue !== null && typeof objectValue !== 'boolean') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @prefix boolean in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_PREFIX_VALUE);\n                                    }\n                                    if (!('@id' in value) && !Util_1.Util.isValidIri(key)) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Invalid @prefix definition for '${key}' ('${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@index':\n                                    if (processingMode === 1.0 || !value['@container'] || !value['@container']['@index']) {\n                                        throw new ErrorCoded_1.ErrorCoded(`Attempt to add illegal key to value object: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                                    }\n                                    break;\n                                case '@nest':\n                                    if (Util_1.Util.isPotentialKeyword(objectValue) && objectValue !== '@nest') {\n                                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term @nest value in: '${key}': '${JSON.stringify(value)}'`, ErrorCoded_1.ERROR_CODES.INVALID_NEST_VALUE);\n                                    }\n                            }\n                        }\n                        break;\n                    default:\n                        throw new ErrorCoded_1.ErrorCoded(`Found an invalid term value: '${key}': '${value}'`, ErrorCoded_1.ERROR_CODES.INVALID_TERM_DEFINITION);\n                }\n            }\n        }\n    }\n    /**\n     * Apply the @base context entry to the given context under certain circumstances.\n     * @param context A context.\n     * @param options Parsing options.\n     * @param inheritFromParent If the @base value from the parent context can be inherited.\n     * @return The given context.\n     */\n    applyBaseEntry(context, options, inheritFromParent) {\n        // In some special cases, this can be a string, so ignore those.\n        if (typeof context === 'string') {\n            return context;\n        }\n        // Give priority to @base in the parent context\n        if (inheritFromParent && !('@base' in context) && options.parentContext\n            && typeof options.parentContext === 'object' && '@base' in options.parentContext) {\n            context['@base'] = options.parentContext['@base'];\n            if (options.parentContext['@__baseDocument']) {\n                context['@__baseDocument'] = true;\n            }\n        }\n        // Override the base IRI if provided.\n        if (options.baseIRI && !options.external) {\n            if (!('@base' in context)) {\n                // The context base is the document base\n                context['@base'] = options.baseIRI;\n                context['@__baseDocument'] = true;\n            }\n            else if (context['@base'] !== null && typeof context['@base'] === 'string'\n                && !Util_1.Util.isValidIri(context['@base'])) {\n                // The context base is relative to the document base\n                context['@base'] = (0, relative_to_absolute_iri_1.resolve)(context['@base'], options.parentContext && options.parentContext['@base'] || options.baseIRI);\n            }\n        }\n        return context;\n    }\n    /**\n     * Resolve relative context IRIs, or return full IRIs as-is.\n     * @param {string} contextIri A context IRI.\n     * @param {string} baseIRI A base IRI.\n     * @return {string} The normalized context IRI.\n     */\n    normalizeContextIri(contextIri, baseIRI) {\n        if (!Util_1.Util.isValidIri(contextIri)) {\n            try {\n                contextIri = (0, relative_to_absolute_iri_1.resolve)(contextIri, baseIRI);\n            }\n            catch (_a) {\n                throw new Error(`Invalid context IRI: ${contextIri}`);\n            }\n        }\n        // TODO: Temporary workaround for fixing schema.org CORS issues (https://github.com/schemaorg/schemaorg/issues/2578#issuecomment-652324465)\n        if (this.redirectSchemaOrgHttps && contextIri.startsWith('http://schema.org')) {\n            contextIri = 'https://schema.org/';\n        }\n        return contextIri;\n    }\n    /**\n     * Parse scoped contexts in the given context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {IParseOptions} options Parsing options.\n     * @return {IJsonLdContextNormalizedRaw} The mutated input context.\n     * @param {string[]} keys Optional set of keys from the context to parseInnerContexts of. If left undefined, all\n     * keys in the context will be iterated over.\n     */\n    async parseInnerContexts(context, options, keys) {\n        for (const key of (keys !== null && keys !== void 0 ? keys : Object.keys(context))) {\n            const value = context[key];\n            if (value && typeof value === 'object') {\n                if ('@context' in value && value['@context'] !== null && !options.ignoreScopedContexts) {\n                    // Simulate a processing based on the parent context to check if there are any (potential errors).\n                    // Honestly, I find it a bit weird to do this here, as the context may be unused,\n                    // and the final effective context may differ based on any other embedded/scoped contexts.\n                    // But hey, it's part of the spec, so we have no choice...\n                    // https://w3c.github.io/json-ld-api/#h-note-10\n                    if (this.validateContext) {\n                        try {\n                            const parentContext = Object.assign(Object.assign({}, context), { [key]: Object.assign({}, context[key]) });\n                            delete parentContext[key]['@context'];\n                            await this.parse(value['@context'], Object.assign(Object.assign({}, options), { external: false, parentContext, ignoreProtection: true, ignoreRemoteScopedContexts: true, ignoreScopedContexts: true }));\n                        }\n                        catch (e) {\n                            throw new ErrorCoded_1.ErrorCoded(e.message, ErrorCoded_1.ERROR_CODES.INVALID_SCOPED_CONTEXT);\n                        }\n                    }\n                    context[key] = Object.assign(Object.assign({}, value), { '@context': (await this.parse(value['@context'], Object.assign(Object.assign({}, options), { external: false, minimalProcessing: true, ignoreRemoteScopedContexts: true, parentContext: context })))\n                            .getContextRaw() });\n                }\n            }\n        }\n        return context;\n    }\n    async parse(context, options = {}, \n    // These options are only for internal use on recursive calls and should not be used by\n    // libraries consuming this function\n    internalOptions = {}) {\n        const { baseIRI, parentContext, external, processingMode = ContextParser.DEFAULT_PROCESSING_MODE, normalizeLanguageTags, ignoreProtection, minimalProcessing, } = options;\n        const remoteContexts = options.remoteContexts || {};\n        // Avoid remote context overflows\n        if (Object.keys(remoteContexts).length >= this.remoteContextsDepthLimit) {\n            throw new ErrorCoded_1.ErrorCoded('Detected an overflow in remote context inclusions: ' + Object.keys(remoteContexts), ErrorCoded_1.ERROR_CODES.CONTEXT_OVERFLOW);\n        }\n        if (context === null || context === undefined) {\n            // Don't allow context nullification and there are protected terms\n            if (!ignoreProtection && parentContext && Util_1.Util.hasProtectedTerms(parentContext)) {\n                throw new ErrorCoded_1.ErrorCoded('Illegal context nullification when terms are protected', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_NULLIFICATION);\n            }\n            // Context that are explicitly set to null are empty.\n            return new JsonLdContextNormalized_1.JsonLdContextNormalized(this.applyBaseEntry({}, options, false));\n        }\n        else if (typeof context === 'string') {\n            const contextIri = this.normalizeContextIri(context, baseIRI);\n            const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n            if (overriddenLoad) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(overriddenLoad);\n            }\n            const parsedStringContext = await this.parse(await this.load(contextIri), Object.assign(Object.assign({}, options), { baseIRI: contextIri, external: true, remoteContexts: Object.assign(Object.assign({}, remoteContexts), { [contextIri]: true }) }));\n            this.applyBaseEntry(parsedStringContext.getContextRaw(), options, true);\n            return parsedStringContext;\n        }\n        else if (Array.isArray(context)) {\n            // As a performance consideration, first load all external contexts in parallel.\n            const contextIris = [];\n            const contexts = await Promise.all(context.map((subContext, i) => {\n                if (typeof subContext === 'string') {\n                    const contextIri = this.normalizeContextIri(subContext, baseIRI);\n                    contextIris[i] = contextIri;\n                    const overriddenLoad = this.getOverriddenLoad(contextIri, options);\n                    if (overriddenLoad) {\n                        return overriddenLoad;\n                    }\n                    return this.load(contextIri);\n                }\n                else {\n                    return subContext;\n                }\n            }));\n            // Don't apply inheritance logic on minimal processing\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(contexts);\n            }\n            const reducedContexts = await contexts.reduce((accContextPromise, contextEntry, i) => accContextPromise\n                .then((accContext) => this.parse(contextEntry, Object.assign(Object.assign({}, options), { baseIRI: contextIris[i] || options.baseIRI, external: !!contextIris[i] || options.external, parentContext: accContext.getContextRaw(), remoteContexts: contextIris[i] ? Object.assign(Object.assign({}, remoteContexts), { [contextIris[i]]: true }) : remoteContexts }), \n            // @ts-expect-error: This third argument causes a type error because we have hidden it from consumers\n            {\n                skipValidation: i < contexts.length - 1,\n            })), Promise.resolve(new JsonLdContextNormalized_1.JsonLdContextNormalized(parentContext || {})));\n            // Override the base IRI if provided.\n            this.applyBaseEntry(reducedContexts.getContextRaw(), options, true);\n            return reducedContexts;\n        }\n        else if (typeof context === 'object') {\n            if ('@context' in context) {\n                return await this.parse(context['@context'], options);\n            }\n            // Make a deep clone of the given context, to avoid modifying it.\n            context = Object.assign({}, context);\n            // According to the JSON-LD spec, @base must be ignored from external contexts.\n            if (external) {\n                delete context['@base'];\n            }\n            // Override the base IRI if provided.\n            this.applyBaseEntry(context, options, true);\n            // Hashify container entries\n            // Do this before protected term validation as that influences term format\n            this.containersToHash(context);\n            // Don't perform any other modifications if only minimal processing is needed.\n            if (minimalProcessing) {\n                return new JsonLdContextNormalized_1.JsonLdContextNormalized(context);\n            }\n            // In JSON-LD 1.1, load @import'ed context prior to processing.\n            let importContext = {};\n            if ('@import' in context) {\n                if (processingMode >= 1.1) {\n                    // Only accept string values\n                    if (typeof context['@import'] !== 'string') {\n                        throw new ErrorCoded_1.ErrorCoded('An @import value must be a string, but got ' + typeof context['@import'], ErrorCoded_1.ERROR_CODES.INVALID_IMPORT_VALUE);\n                    }\n                    // Load context\n                    importContext = await this.loadImportContext(this.normalizeContextIri(context['@import'], baseIRI));\n                    delete context['@import'];\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded('Context importing is not supported in JSON-LD 1.0', ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n                }\n            }\n            this.applyScopedProtected(importContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);\n            const newContext = Object.assign(importContext, context);\n            // Handle terms (before protection checks)\n            this.idifyReverseTerms(newContext);\n            this.normalize(newContext, { processingMode, normalizeLanguageTags });\n            this.applyScopedProtected(newContext, { processingMode }, JsonLdContextNormalized_1.defaultExpandOptions);\n            const keys = Object.keys(newContext);\n            const overlappingKeys = [];\n            if (typeof parentContext === 'object') {\n                // Merge different parts of the final context in order\n                for (const key in parentContext) {\n                    if (key in newContext) {\n                        overlappingKeys.push(key);\n                    }\n                    else {\n                        newContext[key] = parentContext[key];\n                    }\n                }\n            }\n            // Parse inner contexts with minimal processing\n            await this.parseInnerContexts(newContext, options, keys);\n            const newContextWrapped = new JsonLdContextNormalized_1.JsonLdContextNormalized(newContext);\n            // In JSON-LD 1.1, @vocab can be relative to @vocab in the parent context, or a compact IRI.\n            if ((newContext && newContext['@version'] || ContextParser.DEFAULT_PROCESSING_MODE) >= 1.1\n                && ((context['@vocab'] && typeof context['@vocab'] === 'string') || context['@vocab'] === '')) {\n                if (parentContext && '@vocab' in parentContext && context['@vocab'].indexOf(':') < 0) {\n                    newContext['@vocab'] = parentContext['@vocab'] + context['@vocab'];\n                }\n                else if (Util_1.Util.isCompactIri(context['@vocab']) || context['@vocab'] in newContext) {\n                    // @vocab is a compact IRI or refers exactly to a prefix\n                    newContext['@vocab'] = newContextWrapped.expandTerm(context['@vocab'], true);\n                }\n            }\n            this.expandPrefixedTerms(newContextWrapped, this.expandContentTypeToBase, keys);\n            // In JSON-LD 1.1, check if we are not redefining any protected keywords\n            if (!ignoreProtection && parentContext && processingMode >= 1.1) {\n                this.validateKeywordRedefinitions(parentContext, newContext, JsonLdContextNormalized_1.defaultExpandOptions, overlappingKeys);\n            }\n            if (this.validateContext && !internalOptions.skipValidation) {\n                this.validate(newContext, { processingMode });\n            }\n            return newContextWrapped;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Tried parsing a context that is not a string, array or object, but got ${context}`, ErrorCoded_1.ERROR_CODES.INVALID_LOCAL_CONTEXT);\n        }\n    }\n    /**\n     * Fetch the given URL as a raw JSON-LD context.\n     * @param url An URL.\n     * @return A promise resolving to a raw JSON-LD context.\n     */\n    async load(url) {\n        // First try to retrieve the context from cache\n        const cached = this.documentCache[url];\n        if (cached) {\n            return cached;\n        }\n        // If not in cache, load it\n        let document;\n        try {\n            document = await this.documentLoader.load(url);\n        }\n        catch (e) {\n            throw new ErrorCoded_1.ErrorCoded(`Failed to load remote context ${url}: ${e.message}`, ErrorCoded_1.ERROR_CODES.LOADING_REMOTE_CONTEXT_FAILED);\n        }\n        // Validate the context\n        if (!('@context' in document)) {\n            throw new ErrorCoded_1.ErrorCoded(`Missing @context in remote context at ${url}`, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        return this.documentCache[url] = document['@context'];\n    }\n    /**\n     * Override the given context that may be loaded.\n     *\n     * This will check whether or not the url is recursively being loaded.\n     * @param url An URL.\n     * @param options Parsing options.\n     * @return An overridden context, or null.\n     *         Optionally an error can be thrown if a cyclic context is detected.\n     */\n    getOverriddenLoad(url, options) {\n        if (url in (options.remoteContexts || {})) {\n            if (options.ignoreRemoteScopedContexts) {\n                return url;\n            }\n            else {\n                throw new ErrorCoded_1.ErrorCoded('Detected a cyclic context inclusion of ' + url, ErrorCoded_1.ERROR_CODES.RECURSIVE_CONTEXT_INCLUSION);\n            }\n        }\n        return null;\n    }\n    /**\n     * Load an @import'ed context.\n     * @param importContextIri The full URI of an @import value.\n     */\n    async loadImportContext(importContextIri) {\n        // Load the context - and do a deep clone since we are about to mutate it\n        let importContext = await this.load(importContextIri);\n        // Require the context to be a non-array object\n        if (typeof importContext !== 'object' || Array.isArray(importContext)) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context must be a single object: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_REMOTE_CONTEXT);\n        }\n        // Error if the context contains another @import\n        if ('@import' in importContext) {\n            throw new ErrorCoded_1.ErrorCoded('An imported context can not import another context: ' + importContextIri, ErrorCoded_1.ERROR_CODES.INVALID_CONTEXT_ENTRY);\n        }\n        importContext = Object.assign({}, importContext);\n        // Containers have to be converted into hash values the same way as for the importing context\n        // Otherwise context validation will fail for container values\n        this.containersToHash(importContext);\n        return importContext;\n    }\n}\nContextParser.DEFAULT_PROCESSING_MODE = 1.1;\nexports.ContextParser = ContextParser;\n//# sourceMappingURL=ContextParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordIncluded = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @included entries.\n */\nclass EntryHandlerKeywordIncluded extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@included');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'object') {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @included '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        const valueUnliased = await util.unaliasKeywords(value, keys, depth, await parsingContext.getContext(keys));\n        if ('@value' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @value node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        if ('@list' in valueUnliased) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @included @list node '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INCLUDED_VALUE));\n        }\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordIncluded = EntryHandlerKeywordIncluded;\n//# sourceMappingURL=EntryHandlerKeywordIncluded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeyword = void 0;\n/**\n * An abstract keyword entry handler.\n */\nclass EntryHandlerKeyword {\n    constructor(keyword) {\n        this.keyword = keyword;\n    }\n    isPropertyHandler() {\n        return false;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return key === this.keyword;\n    }\n}\nexports.EntryHandlerKeyword = EntryHandlerKeyword;\n//# sourceMappingURL=EntryHandlerKeyword.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonLdParser = void 0;\n// tslint:disable-next-line:no-var-requires\nconst Parser = require('@bergos/jsonparse');\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst readable_stream_1 = require(\"readable-stream\");\nconst EntryHandlerArrayValue_1 = require(\"./entryhandler/EntryHandlerArrayValue\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\nconst EntryHandlerInvalidFallback_1 = require(\"./entryhandler/EntryHandlerInvalidFallback\");\nconst EntryHandlerPredicate_1 = require(\"./entryhandler/EntryHandlerPredicate\");\nconst EntryHandlerKeywordContext_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordContext\");\nconst EntryHandlerKeywordGraph_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordGraph\");\nconst EntryHandlerKeywordId_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordId\");\nconst EntryHandlerKeywordIncluded_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordIncluded\");\nconst EntryHandlerKeywordNest_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordNest\");\nconst EntryHandlerKeywordType_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordType\");\nconst EntryHandlerKeywordUnknownFallback_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordUnknownFallback\");\nconst EntryHandlerKeywordValue_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordValue\");\nconst ParsingContext_1 = require(\"./ParsingContext\");\nconst Util_1 = require(\"./Util\");\nconst http_link_header_1 = require(\"http-link-header\");\nconst EntryHandlerKeywordAnnotation_1 = require(\"./entryhandler/keyword/EntryHandlerKeywordAnnotation\");\n/**\n * A stream transformer that parses JSON-LD (text) streams to an {@link RDF.Stream}.\n */\nclass JsonLdParser extends readable_stream_1.Transform {\n    constructor(options) {\n        super({ readableObjectMode: true });\n        options = options || {};\n        this.options = options;\n        this.parsingContext = new ParsingContext_1.ParsingContext(Object.assign({ parser: this }, options));\n        this.util = new Util_1.Util({ dataFactory: options.dataFactory, parsingContext: this.parsingContext });\n        this.jsonParser = new Parser();\n        this.contextJobs = [];\n        this.typeJobs = [];\n        this.contextAwaitingJobs = [];\n        this.lastDepth = 0;\n        this.lastKeys = [];\n        this.lastOnValueJob = Promise.resolve();\n        this.attachJsonParserListeners();\n        this.on('end', () => {\n            if (typeof this.jsonParser.mode !== 'undefined') {\n                this.emit('error', new Error('Unclosed document'));\n            }\n        });\n    }\n    /**\n     * Construct a JsonLdParser from the given HTTP response.\n     *\n     * This will throw an error if no valid JSON response is received\n     * (application/ld+json, application/json, or something+json).\n     *\n     * For raw JSON responses, exactly one link header pointing to a JSON-LD context is required.\n     *\n     * This method is not responsible for handling redirects.\n     *\n     * @param baseIRI The URI of the received response.\n     * @param mediaType The received content type.\n     * @param headers Optional HTTP headers.\n     * @param options Optional parser options.\n     */\n    static fromHttpResponse(baseIRI, mediaType, headers, options) {\n        let context;\n        let wellKnownMediaTypes = ['application/activity+json'];\n        if (options && options.wellKnownMediaTypes) {\n            wellKnownMediaTypes = options.wellKnownMediaTypes;\n        }\n        // Special cases when receiving something else than the JSON-LD media type or the wellKnownMediaTypes\n        if (mediaType !== 'application/ld+json' && !wellKnownMediaTypes.includes(mediaType)) {\n            // Only accept JSON or JSON extension types\n            if (mediaType !== 'application/json' && !mediaType.endsWith('+json')) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n            // We need exactly one JSON-LD context in the link header\n            if (headers && headers.has('Link')) {\n                headers.forEach((value, key) => {\n                    if (key === 'link') {\n                        const linkHeader = (0, http_link_header_1.parse)(value);\n                        for (const link of linkHeader.get('rel', 'http://www.w3.org/ns/json-ld#context')) {\n                            if (context) {\n                                throw new jsonld_context_parser_1.ErrorCoded('Multiple JSON-LD context link headers were found on ' + baseIRI, jsonld_context_parser_1.ERROR_CODES.MULTIPLE_CONTEXT_LINK_HEADERS);\n                            }\n                            context = link.uri;\n                        }\n                    }\n                });\n            }\n            if (!context && !(options === null || options === void 0 ? void 0 : options.ignoreMissingContextLinkHeader)) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Missing context link header for media type ${mediaType} on ${baseIRI}`, jsonld_context_parser_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        // Check if the streaming profile is present\n        let streamingProfile;\n        if (headers && headers.has('Content-Type')) {\n            const contentType = headers.get('Content-Type');\n            const match = /; *profile=([^\"]*)/.exec(contentType);\n            if (match && match[1] === 'http://www.w3.org/ns/json-ld#streaming') {\n                streamingProfile = true;\n            }\n        }\n        return new JsonLdParser(Object.assign({ baseIRI,\n            context,\n            streamingProfile }, options ? options : {}));\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        if ('pipe' in stream) {\n            stream.on('error', (error) => parsed.emit('error', error));\n            const parsed = stream.pipe(new JsonLdParser(this.options));\n            return parsed;\n        }\n        else {\n            const output = new readable_stream_1.PassThrough({ readableObjectMode: true });\n            stream.on('error', (error) => parsed.emit('error', error));\n            stream.on('data', (data) => output.push(data));\n            stream.on('end', () => output.push(null));\n            const parsed = output.pipe(new JsonLdParser(this.options));\n            return parsed;\n        }\n    }\n    _transform(chunk, encoding, callback) {\n        this.jsonParser.write(chunk);\n        this.lastOnValueJob\n            .then(() => callback(), (error) => callback(error));\n    }\n    /**\n     * Start a new job for parsing the given value.\n     *\n     * This will let the first valid {@link IEntryHandler} handle the entry.\n     *\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        let flushStacks = true;\n        // When we go up the stack, emit all unidentified values\n        // We need to do this before the new job, because the new job may require determined values from the flushed jobs.\n        if (lastDepthCheck && depth < this.lastDepth) {\n            // Check if we had any RDF lists that need to be terminated with an rdf:nil\n            const listPointer = this.parsingContext.listPointerStack[this.lastDepth];\n            if (listPointer) {\n                // Terminate the list if the had at least one value\n                if (listPointer.value) {\n                    this.push(this.util.dataFactory.quad(listPointer.value, this.util.rdfRest, this.util.rdfNil, this.util.getDefaultGraph()));\n                }\n                // Add the list id to the id stack, so it can be used higher up in the stack\n                listPointer.listId.listHead = true;\n                this.parsingContext.idStack[listPointer.listRootDepth + 1] = [listPointer.listId];\n                this.parsingContext.listPointerStack.splice(this.lastDepth, 1);\n            }\n            // Flush the buffer for lastDepth\n            // If the parent key is a special type of container, postpone flushing until that parent is handled.\n            if (await EntryHandlerContainer_1.EntryHandlerContainer.isBufferableContainerHandler(this.parsingContext, this.lastKeys, this.lastDepth)) {\n                this.parsingContext.pendingContainerFlushBuffers\n                    .push({ depth: this.lastDepth, keys: this.lastKeys.slice(0, this.lastKeys.length) });\n                flushStacks = false;\n            }\n            else {\n                await this.flushBuffer(this.lastDepth, this.lastKeys);\n            }\n        }\n        const key = await this.util.unaliasKeyword(keys[depth], keys, depth);\n        const parentKey = await this.util.unaliasKeywordParent(keys, depth);\n        this.parsingContext.emittedStack[depth] = true;\n        let handleKey = true;\n        // Keywords inside @reverse is not allowed apart from @context\n        if (jsonld_context_parser_1.Util.isValidKeyword(key) && parentKey === '@reverse' && key !== '@context') {\n            this.emit('error', new jsonld_context_parser_1.ErrorCoded(`Found the @id '${value}' inside an @reverse property`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_MAP));\n        }\n        // Skip further processing if one of the parent nodes are invalid.\n        // We use the validationStack to reuse validation results that were produced before with common key stacks.\n        let inProperty = false;\n        if (this.parsingContext.validationStack.length > 1) {\n            inProperty = this.parsingContext.validationStack[this.parsingContext.validationStack.length - 1].property;\n        }\n        for (let i = Math.max(1, this.parsingContext.validationStack.length - 1); i < keys.length - 1; i++) {\n            const validationResult = this.parsingContext.validationStack[i]\n                || (this.parsingContext.validationStack[i] = await this.validateKey(keys.slice(0, i + 1), i, inProperty));\n            if (!validationResult.valid) {\n                this.parsingContext.emittedStack[depth] = false;\n                handleKey = false;\n                break;\n            }\n            else if (!inProperty && validationResult.property) {\n                inProperty = true;\n            }\n        }\n        // Skip further processing if this node is part of a literal\n        if (await this.util.isLiteral(keys, depth)) {\n            handleKey = false;\n        }\n        // Get handler\n        if (handleKey) {\n            for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n                const testResult = await entryHandler.test(this.parsingContext, this.util, key, keys, depth);\n                if (testResult) {\n                    // Pass processing over to the handler\n                    await entryHandler.handle(this.parsingContext, this.util, key, keys, value, depth, testResult);\n                    // Flag that this depth is processed\n                    if (entryHandler.isStackProcessor()) {\n                        this.parsingContext.processingStack[depth] = true;\n                    }\n                    break;\n                }\n            }\n        }\n        // Validate value indexes on the root.\n        if (depth === 0 && Array.isArray(value)) {\n            await this.util.validateValueIndexes(value);\n        }\n        // When we go up the stack, flush the old stack\n        if (flushStacks && depth < this.lastDepth) {\n            // Reset our stacks\n            this.flushStacks(this.lastDepth);\n        }\n        this.lastDepth = depth;\n        this.lastKeys = keys;\n        // Clear the keyword cache at this depth, and everything underneath.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(depth - 1);\n    }\n    /**\n     * Flush the processing stacks at the given depth.\n     * @param {number} depth A depth.\n     */\n    flushStacks(depth) {\n        this.parsingContext.processingStack.splice(depth, 1);\n        this.parsingContext.processingType.splice(depth, 1);\n        this.parsingContext.emittedStack.splice(depth, 1);\n        this.parsingContext.idStack.splice(depth, 1);\n        this.parsingContext.graphStack.splice(depth + 1, 1);\n        this.parsingContext.graphContainerTermStack.splice(depth, 1);\n        this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        this.parsingContext.validationStack.splice(depth - 1, 2);\n        this.parsingContext.literalStack.splice(depth, this.parsingContext.literalStack.length - depth);\n        this.parsingContext.annotationsBuffer.splice(depth, 1);\n        // TODO: just like the literal stack, splice all other stack until the end as well?\n    }\n    /**\n     * Flush buffers for the given depth.\n     *\n     * This should be called after the last entry at a given depth was processed.\n     *\n     * @param {number} depth A depth.\n     * @param {any[]} keys A stack of keys.\n     * @return {Promise<void>} A promise resolving if flushing is done.\n     */\n    async flushBuffer(depth, keys) {\n        let subjects = this.parsingContext.idStack[depth];\n        const subjectsWasDefined = !!subjects;\n        if (!subjectsWasDefined) {\n            subjects = this.parsingContext.idStack[depth] = [this.util.dataFactory.blankNode()];\n        }\n        // Flush values at this level\n        const valueBuffer = this.parsingContext.unidentifiedValuesBuffer[depth];\n        if (valueBuffer) {\n            for (const subject of subjects) {\n                const depthOffsetGraph = await this.util.getDepthOffsetGraph(depth, keys);\n                const graphs = (this.parsingContext.graphStack[depth] || depthOffsetGraph >= 0)\n                    ? this.parsingContext.idStack[depth - depthOffsetGraph - 1]\n                    : [await this.util.getGraphContainerValue(keys, depth)];\n                if (graphs) {\n                    for (const graph of graphs) {\n                        // Flush values to stream if the graph @id is known\n                        this.parsingContext.emittedStack[depth] = true;\n                        for (const bufferedValue of valueBuffer) {\n                            this.util.emitQuadChecked(depth, subject, bufferedValue.predicate, bufferedValue.object, graph, bufferedValue.reverse, bufferedValue.isEmbedded);\n                        }\n                    }\n                }\n                else {\n                    // Place the values in the graphs buffer if the graph @id is not yet known\n                    const subGraphBuffer = this.parsingContext.getUnidentifiedGraphBufferSafe(depth - await this.util.getDepthOffsetGraph(depth, keys) - 1);\n                    for (const bufferedValue of valueBuffer) {\n                        if (bufferedValue.reverse) {\n                            subGraphBuffer.push({\n                                object: subject,\n                                predicate: bufferedValue.predicate,\n                                subject: bufferedValue.object,\n                                isEmbedded: bufferedValue.isEmbedded,\n                            });\n                        }\n                        else {\n                            subGraphBuffer.push({\n                                object: bufferedValue.object,\n                                predicate: bufferedValue.predicate,\n                                subject,\n                                isEmbedded: bufferedValue.isEmbedded,\n                            });\n                        }\n                    }\n                }\n            }\n            this.parsingContext.unidentifiedValuesBuffer.splice(depth, 1);\n            this.parsingContext.literalStack.splice(depth, 1);\n            this.parsingContext.jsonLiteralStack.splice(depth, 1);\n        }\n        // Flush graphs at this level\n        const graphBuffer = this.parsingContext.unidentifiedGraphsBuffer[depth];\n        if (graphBuffer) {\n            for (const subject of subjects) {\n                // A @graph statement at the root without @id relates to the default graph,\n                // unless there are top-level properties,\n                // others relate to blank nodes.\n                const graph = depth === 1 && subject.termType === 'BlankNode'\n                    && !this.parsingContext.topLevelProperties ? this.util.getDefaultGraph() : subject;\n                this.parsingContext.emittedStack[depth] = true;\n                for (const bufferedValue of graphBuffer) {\n                    this.parsingContext.emitQuad(depth, this.util.dataFactory.quad(bufferedValue.subject, bufferedValue.predicate, bufferedValue.object, graph));\n                }\n            }\n            this.parsingContext.unidentifiedGraphsBuffer.splice(depth, 1);\n        }\n        // Push unhandled annotations up the stack as nested annotations\n        const annotationsBuffer = this.parsingContext.annotationsBuffer[depth];\n        if (annotationsBuffer) {\n            // Throw an error if we reach the top, and still have annotations\n            if (annotationsBuffer.length > 0 && depth === 1) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Annotations can not be made on top-level nodes`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n            }\n            // Pass the annotations buffer up one level in the stack\n            const annotationsBufferParent = this.parsingContext.getAnnotationsBufferSafe(depth - 1);\n            for (const annotation of annotationsBuffer) {\n                annotationsBufferParent.push(annotation);\n            }\n            delete this.parsingContext.annotationsBuffer[depth];\n        }\n    }\n    /**\n     * Check if at least one {@link IEntryHandler} validates the entry to true.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth A depth.\n     * @param {boolean} inProperty If the current depth is part of a valid property node.\n     * @return {Promise<{ valid: boolean, property: boolean }>} A promise resolving to true or false.\n     */\n    async validateKey(keys, depth, inProperty) {\n        for (const entryHandler of JsonLdParser.ENTRY_HANDLERS) {\n            if (await entryHandler.validate(this.parsingContext, this.util, keys, depth, inProperty)) {\n                return { valid: true, property: inProperty || entryHandler.isPropertyHandler() };\n            }\n        }\n        return { valid: false, property: false };\n    }\n    /**\n     * Attach all required listeners to the JSON parser.\n     *\n     * This should only be called once.\n     */\n    attachJsonParserListeners() {\n        // Listen to json parser events\n        this.jsonParser.onValue = (value) => {\n            const depth = this.jsonParser.stack.length;\n            const keys = (new Array(depth + 1).fill(0)).map((v, i) => {\n                return i === depth ? this.jsonParser.key : this.jsonParser.stack[i].key;\n            });\n            if (!this.isParsingContextInner(depth)) { // Don't parse inner nodes inside @context\n                const valueJobCb = () => this.newOnValueJob(keys, value, depth, true);\n                if (!this.parsingContext.streamingProfile\n                    && !this.parsingContext.contextTree.getContext(keys.slice(0, -1))) {\n                    // If an out-of-order context is allowed,\n                    // we have to buffer everything.\n                    // We store jobs for @context's and @type's separately,\n                    // because at the end, we have to process them first.\n                    // We also handle @type because these *could* introduce a type-scoped context.\n                    if (keys[depth] === '@context') {\n                        let jobs = this.contextJobs[depth];\n                        if (!jobs) {\n                            jobs = this.contextJobs[depth] = [];\n                        }\n                        jobs.push(valueJobCb);\n                    }\n                    else {\n                        this.contextAwaitingJobs.push({ job: valueJobCb, keys, depth });\n                    }\n                }\n                else {\n                    // Make sure that our value jobs are chained synchronously\n                    this.lastOnValueJob = this.lastOnValueJob.then(valueJobCb);\n                }\n                // Execute all buffered jobs on deeper levels\n                if (!this.parsingContext.streamingProfile && depth === 0) {\n                    this.lastOnValueJob = this.lastOnValueJob\n                        .then(() => this.executeBufferedJobs());\n                }\n            }\n        };\n        this.jsonParser.onError = (error) => {\n            this.emit('error', error);\n        };\n    }\n    /**\n     * Check if the parser is currently parsing an element that is part of an @context entry.\n     * @param {number} depth A depth.\n     * @return {boolean} A boolean.\n     */\n    isParsingContextInner(depth) {\n        for (let i = depth; i > 0; i--) {\n            if (this.jsonParser.stack[i - 1].key === '@context') {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Execute all buffered jobs.\n     * @return {Promise<void>} A promise resolving if all jobs are finished.\n     */\n    async executeBufferedJobs() {\n        // Handle context jobs\n        for (const jobs of this.contextJobs) {\n            if (jobs) {\n                for (const job of jobs) {\n                    await job();\n                }\n            }\n        }\n        // Clear the keyword cache.\n        this.parsingContext.unaliasedKeywordCacheStack.splice(0);\n        const contextAwaitingJobs = [];\n        for (const job of this.contextAwaitingJobs) {\n            if ((await this.util.unaliasKeyword(job.keys[job.depth], job.keys, job.depth, true)) === '@type'\n                || typeof job.keys[job.depth] === 'number' && (await this.util.unaliasKeyword(job.keys[job.depth - 1], job.keys, job.depth - 1, true)) === '@type') { // Also capture @type with array values\n                // Remove @type from keys, because we want it to apply to parent later on\n                this.typeJobs.push({ job: job.job, keys: job.keys.slice(0, job.keys.length - 1) });\n            }\n            else {\n                contextAwaitingJobs.push(job);\n            }\n        }\n        // Handle non-context jobs\n        for (const job of contextAwaitingJobs) {\n            // Check if we have a type (with possible type-scoped context) that should be handled before.\n            // We check all possible parent nodes for the current job, from root to leaves.\n            if (this.typeJobs.length > 0) {\n                // First collect all applicable type jobs\n                const applicableTypeJobs = [];\n                const applicableTypeJobIds = [];\n                for (let i = 0; i < this.typeJobs.length; i++) {\n                    const typeJob = this.typeJobs[i];\n                    if (Util_1.Util.isPrefixArray(typeJob.keys, job.keys)) {\n                        applicableTypeJobs.push(typeJob);\n                        applicableTypeJobIds.push(i);\n                    }\n                }\n                // Next, sort the jobs from short to long key length (to ensure types higher up in the tree to be handled first)\n                const sortedTypeJobs = applicableTypeJobs.sort((job1, job2) => job1.keys.length - job2.keys.length);\n                // Finally, execute the jobs in order\n                for (const typeJob of sortedTypeJobs) {\n                    await typeJob.job();\n                }\n                // Remove the executed type jobs\n                // Sort first, so we can efficiently splice\n                const sortedApplicableTypeJobIds = applicableTypeJobIds.sort().reverse();\n                for (const jobId of sortedApplicableTypeJobIds) {\n                    this.typeJobs.splice(jobId, 1);\n                }\n            }\n            await job.job();\n        }\n    }\n}\nexports.JsonLdParser = JsonLdParser;\nJsonLdParser.DEFAULT_PROCESSING_MODE = '1.1';\nJsonLdParser.ENTRY_HANDLERS = [\n    new EntryHandlerArrayValue_1.EntryHandlerArrayValue(),\n    new EntryHandlerKeywordContext_1.EntryHandlerKeywordContext(),\n    new EntryHandlerKeywordId_1.EntryHandlerKeywordId(),\n    new EntryHandlerKeywordIncluded_1.EntryHandlerKeywordIncluded(),\n    new EntryHandlerKeywordGraph_1.EntryHandlerKeywordGraph(),\n    new EntryHandlerKeywordNest_1.EntryHandlerKeywordNest(),\n    new EntryHandlerKeywordType_1.EntryHandlerKeywordType(),\n    new EntryHandlerKeywordValue_1.EntryHandlerKeywordValue(),\n    new EntryHandlerKeywordAnnotation_1.EntryHandlerKeywordAnnotation(),\n    new EntryHandlerContainer_1.EntryHandlerContainer(),\n    new EntryHandlerKeywordUnknownFallback_1.EntryHandlerKeywordUnknownFallback(),\n    new EntryHandlerPredicate_1.EntryHandlerPredicate(),\n    new EntryHandlerInvalidFallback_1.EntryHandlerInvalidFallback(),\n];\n//# sourceMappingURL=JsonLdParser.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlankNode = void 0;\n/**\n * A term that represents an RDF blank node with a label.\n */\nclass BlankNode {\n    constructor(value) {\n        this.termType = 'BlankNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'BlankNode' && other.value === this.value;\n    }\n}\nexports.BlankNode = BlankNode;\n//# sourceMappingURL=BlankNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language, datatype, or directional language.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           If `languageOrDatatype` is a NamedNode, it is used for the value\n     *                           of `NamedNode.language`.\n     *                           Otherwise, it is used as a directional language,\n     *                           from which the language is set to `languageOrDatatype.language`\n     *                           and the direction to `languageOrDatatype.direction`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n//# sourceMappingURL=DataFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nclass Util {\n    /**\n     * Check if the given term is a valid compact IRI.\n     * Otherwise, it may be an IRI.\n     * @param {string} term A term.\n     * @return {boolean} If it is a compact IRI.\n     */\n    static isCompactIri(term) {\n        return term.indexOf(':') > 0 && !(term && term[0] === '#');\n    }\n    /**\n     * Get the prefix from the given term.\n     * @see https://json-ld.org/spec/latest/json-ld/#compact-iris\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @return {string} The prefix or null.\n     */\n    static getPrefix(term, context) {\n        // Do not consider relative IRIs starting with a hash as compact IRIs\n        if (term && term[0] === '#') {\n            return null;\n        }\n        const separatorPos = term.indexOf(':');\n        if (separatorPos >= 0) {\n            // Suffix can not begin with two slashes\n            if (term.length > separatorPos + 1\n                && term.charAt(separatorPos + 1) === '/'\n                && term.charAt(separatorPos + 2) === '/') {\n                return null;\n            }\n            const prefix = term.substr(0, separatorPos);\n            // Prefix can not be an underscore (this is a blank node)\n            if (prefix === '_') {\n                return null;\n            }\n            // Prefix must match a term in the active context\n            if (context[prefix]) {\n                return prefix;\n            }\n        }\n        return null;\n    }\n    /**\n     * From a given context entry value, get the string value, or the @id field.\n     * @param contextValue A value for a term in a context.\n     * @return {string} The id value, or null.\n     */\n    static getContextValueId(contextValue) {\n        if (contextValue === null || typeof contextValue === 'string') {\n            return contextValue;\n        }\n        const id = contextValue['@id'];\n        return id ? id : null;\n    }\n    /**\n     * Check if the given simple term definition (string-based value of a context term)\n     * should be considered a prefix.\n     * @param value A simple term definition value.\n     * @param options Options that define the way how expansion must be done.\n     */\n    static isSimpleTermDefinitionPrefix(value, options) {\n        return !Util.isPotentialKeyword(value)\n            && (options.allowPrefixNonGenDelims || (typeof value === 'string' && (value[0] === '_' || Util.isPrefixIriEndingWithGenDelim(value))));\n    }\n    /**\n     * Check if the given keyword is of the keyword format \"@\"1*ALPHA.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is of the keyword format.\n     */\n    static isPotentialKeyword(keyword) {\n        return typeof keyword === 'string' && Util.KEYWORD_REGEX.test(keyword);\n    }\n    /**\n     * Check if the given prefix ends with a gen-delim character.\n     * @param {string} prefixIri A prefix IRI.\n     * @return {boolean} If the given prefix IRI is valid.\n     */\n    static isPrefixIriEndingWithGenDelim(prefixIri) {\n        return Util.ENDS_WITH_GEN_DELIM.test(prefixIri);\n    }\n    /**\n     * Check if the given context value can be a prefix value.\n     * @param value A context value.\n     * @return {boolean} If it can be a prefix value.\n     */\n    static isPrefixValue(value) {\n        return value && (typeof value === 'string' || (value && typeof value === 'object'));\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return Boolean(iri && Util.IRI_REGEX.test(iri));\n    }\n    /**\n     * Check if the given IRI is valid, this includes the possibility of being a relative IRI.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIriWeak(iri) {\n        return !!iri && iri[0] !== ':' && Util.IRI_REGEX_WEAK.test(iri);\n    }\n    /**\n     * Check if the given keyword is a defined according to the JSON-LD specification.\n     * @param {string} keyword A potential keyword.\n     * @return {boolean} If the given keyword is valid.\n     */\n    static isValidKeyword(keyword) {\n        return Util.VALID_KEYWORDS[keyword];\n    }\n    /**\n     * Check if the given term is protected in the context.\n     * @param {IJsonLdContextNormalizedRaw} context A context.\n     * @param {string} key A context term.\n     * @return {boolean} If the given term has an @protected flag.\n     */\n    static isTermProtected(context, key) {\n        const value = context[key];\n        return !(typeof value === 'string') && value && value['@protected'];\n    }\n    /**\n     * Check if the given context has at least one protected term.\n     * @param context A context.\n     * @return If the context has a protected term.\n     */\n    static hasProtectedTerms(context) {\n        for (const key of Object.keys(context)) {\n            if (Util.isTermProtected(context, key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check if the given key is an internal reserved keyword.\n     * @param key A context key.\n     */\n    static isReservedInternalKeyword(key) {\n        return key.startsWith('@__');\n    }\n    /**\n     * Check if two objects are deepEqual to on another.\n     * @param object1 The first object to test.\n     * @param object2 The second object to test.\n     */\n    static deepEqual(object1, object2) {\n        const objKeys1 = Object.keys(object1);\n        const objKeys2 = Object.keys(object2);\n        if (objKeys1.length !== objKeys2.length)\n            return false;\n        return objKeys1.every((key) => {\n            const value1 = object1[key];\n            const value2 = object2[key];\n            return (value1 === value2) || (value1 !== null &&\n                value2 !== null &&\n                typeof value1 === \"object\" &&\n                typeof value2 === \"object\" &&\n                this.deepEqual(value1, value2));\n        });\n    }\n    ;\n}\n// Regex for valid IRIs\nUtil.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*|_):[^ \"<>{}|\\\\\\[\\]`#]*(#[^#]*)?$/;\n// Weaker regex for valid IRIs, this includes relative IRIs\nUtil.IRI_REGEX_WEAK = /(?::[^:])|\\//;\n// Regex for keyword form\nUtil.KEYWORD_REGEX = /^@[a-z]+$/i;\n// Regex to see if an IRI ends with a gen-delim character (see RFC 3986)\nUtil.ENDS_WITH_GEN_DELIM = /[:/?#\\[\\]@]$/;\n// Regex for language tags\nUtil.REGEX_LANGUAGE_TAG = /^[a-zA-Z]+(-[a-zA-Z0-9]+)*$/;\n// Regex for base directions\nUtil.REGEX_DIRECTION_TAG = /^(ltr)|(rtl)$/;\n// All known valid JSON-LD keywords\n// @see https://www.w3.org/TR/json-ld11/#keywords\nUtil.VALID_KEYWORDS = {\n    '@annotation': true,\n    '@base': true,\n    '@container': true,\n    '@context': true,\n    '@direction': true,\n    '@graph': true,\n    '@id': true,\n    '@import': true,\n    '@included': true,\n    '@index': true,\n    '@json': true,\n    '@language': true,\n    '@list': true,\n    '@nest': true,\n    '@none': true,\n    '@prefix': true,\n    '@propagate': true,\n    '@protected': true,\n    '@reverse': true,\n    '@set': true,\n    '@type': true,\n    '@value': true,\n    '@version': true,\n    '@vocab': true,\n};\n// Keys in the contexts that will not be expanded based on the base IRI\nUtil.EXPAND_KEYS_BLACKLIST = [\n    '@base',\n    '@vocab',\n    '@language',\n    '@version',\n    '@direction',\n];\n// Keys in the contexts that may not be aliased from\nUtil.ALIAS_DOMAIN_BLACKLIST = [\n    '@container',\n    '@graph',\n    '@id',\n    '@index',\n    '@list',\n    '@nest',\n    '@none',\n    '@prefix',\n    '@reverse',\n    '@set',\n    '@type',\n    '@value',\n    '@version',\n];\n// Keys in the contexts that may not be aliased to\nUtil.ALIAS_RANGE_BLACKLIST = [\n    '@context',\n    '@preserve',\n];\n// All valid @container values\nUtil.CONTAINERS = [\n    '@list',\n    '@set',\n    '@index',\n    '@language',\n    '@graph',\n    '@id',\n    '@type',\n];\n// All valid @container values under processing mode 1.0\nUtil.CONTAINERS_1_0 = [\n    '@list',\n    '@set',\n    '@index',\n];\nexports.Util = Util;\n//# sourceMappingURL=Util.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/ContextParser\"), exports);\n__exportStar(require(\"./lib/ErrorCoded\"), exports);\n__exportStar(require(\"./lib/FetchDocumentLoader\"), exports);\n__exportStar(require(\"./lib/IDocumentLoader\"), exports);\n__exportStar(require(\"./lib/JsonLdContext\"), exports);\n__exportStar(require(\"./lib/JsonLdContextNormalized\"), exports);\n__exportStar(require(\"./lib/Util\"), exports);\n//# sourceMappingURL=index.js.map","const blackList = new Set(['_write', '_writableState', 'writable'])\n\nfunction readable (duplex) {\n  return new Proxy(duplex, {\n    has (target, key) {\n      if (blackList.has(key)) {\n        return false\n      }\n\n      return Reflect.has(...arguments)\n    },\n    get (target, key) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      const result = Reflect.get(...arguments)\n\n      if (result && typeof result.bind === 'function') {\n        return result.bind(target)\n      }\n\n      return result\n    },\n    set (target, key, value) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      return Reflect.set(...arguments)\n    }\n  })\n}\n\nexport default readable\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=IDocumentLoader.js.map","var { Buffer } = require('buffer')\n// Named constants with unique integer values\nvar C = {};\n// Tokens\nvar LEFT_BRACE    = C.LEFT_BRACE    = 0x1;\nvar RIGHT_BRACE   = C.RIGHT_BRACE   = 0x2;\nvar LEFT_BRACKET  = C.LEFT_BRACKET  = 0x3;\nvar RIGHT_BRACKET = C.RIGHT_BRACKET = 0x4;\nvar COLON         = C.COLON         = 0x5;\nvar COMMA         = C.COMMA         = 0x6;\nvar TRUE          = C.TRUE          = 0x7;\nvar FALSE         = C.FALSE         = 0x8;\nvar NULL          = C.NULL          = 0x9;\nvar STRING        = C.STRING        = 0xa;\nvar NUMBER        = C.NUMBER        = 0xb;\n// Tokenizer States\nvar START   = C.START   = 0x11;\nvar STOP    = C.STOP    = 0x12;\nvar TRUE1   = C.TRUE1   = 0x21;\nvar TRUE2   = C.TRUE2   = 0x22;\nvar TRUE3   = C.TRUE3   = 0x23;\nvar FALSE1  = C.FALSE1  = 0x31;\nvar FALSE2  = C.FALSE2  = 0x32;\nvar FALSE3  = C.FALSE3  = 0x33;\nvar FALSE4  = C.FALSE4  = 0x34;\nvar NULL1   = C.NULL1   = 0x41;\nvar NULL2   = C.NULL2   = 0x42;\nvar NULL3   = C.NULL3   = 0x43;\nvar NUMBER1 = C.NUMBER1 = 0x51;\nvar NUMBER3 = C.NUMBER3 = 0x53;\nvar STRING1 = C.STRING1 = 0x61;\nvar STRING2 = C.STRING2 = 0x62;\nvar STRING3 = C.STRING3 = 0x63;\nvar STRING4 = C.STRING4 = 0x64;\nvar STRING5 = C.STRING5 = 0x65;\nvar STRING6 = C.STRING6 = 0x66;\n// Parser States\nvar VALUE   = C.VALUE   = 0x71;\nvar KEY     = C.KEY     = 0x72;\n// Parser Modes\nvar OBJECT  = C.OBJECT  = 0x81;\nvar ARRAY   = C.ARRAY   = 0x82;\n// Character constants\nvar BACK_SLASH =      \"\\\\\".charCodeAt(0);\nvar FORWARD_SLASH =   \"\\/\".charCodeAt(0);\nvar BACKSPACE =       \"\\b\".charCodeAt(0);\nvar FORM_FEED =       \"\\f\".charCodeAt(0);\nvar NEWLINE =         \"\\n\".charCodeAt(0);\nvar CARRIAGE_RETURN = \"\\r\".charCodeAt(0);\nvar TAB =             \"\\t\".charCodeAt(0);\n\nvar STRING_BUFFER_SIZE = 64 * 1024;\n\nfunction alloc(size) {\n  return Buffer.alloc ? Buffer.alloc(size) : new Buffer(size);\n}\n\nfunction Parser() {\n  this.tState = START;\n  this.value = undefined;\n\n  this.string = undefined; // string data\n  this.stringBuffer = alloc(STRING_BUFFER_SIZE);\n  this.stringBufferOffset = 0;\n  this.unicode = undefined; // unicode escapes\n  this.highSurrogate = undefined;\n\n  this.key = undefined;\n  this.mode = undefined;\n  this.stack = [];\n  this.state = VALUE;\n  this.bytes_remaining = 0; // number of bytes remaining in multi byte utf8 char to read after split boundary\n  this.bytes_in_sequence = 0; // bytes in multi byte utf8 char to read\n  this.temp_buffs = { \"2\": alloc(2), \"3\": alloc(3), \"4\": alloc(4) }; // for rebuilding chars split before boundary is reached\n\n  // Stream offset\n  this.offset = -1;\n}\n\n// Slow code to string converter (only used when throwing syntax errors)\nParser.toknam = function (code) {\n  var keys = Object.keys(C);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    if (C[key] === code) { return key; }\n  }\n  return code && (\"0x\" + code.toString(16));\n};\n\nvar proto = Parser.prototype;\nproto.onError = function (err) { throw err; };\nproto.charError = function (buffer, i) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + JSON.stringify(String.fromCharCode(buffer[i])) + \" at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n};\nproto.appendStringChar = function (char) {\n  if (this.stringBufferOffset >= STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8');\n    this.stringBufferOffset = 0;\n  }\n\n  this.stringBuffer[this.stringBufferOffset++] = char;\n};\nproto.appendStringBuf = function (buf, start, end) {\n  var size = buf.length;\n  if (typeof start === 'number') {\n    if (typeof end === 'number') {\n      if (end < 0) {\n        // adding a negative end decreeses the size\n        size = buf.length - start + end;\n      } else {\n        size = end - start;\n      }\n    } else {\n      size = buf.length - start;\n    }\n  }\n\n  if (size < 0) {\n    size = 0;\n  }\n\n  if (this.stringBufferOffset + size > STRING_BUFFER_SIZE) {\n    this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n    this.stringBufferOffset = 0;\n  }\n\n  buf.copy(this.stringBuffer, this.stringBufferOffset, start, end);\n  this.stringBufferOffset += size;\n};\nproto.write = function (buffer) {\n  if (typeof buffer === \"string\") buffer = new Buffer(buffer);\n  var n;\n  for (var i = 0, l = buffer.length; i < l; i++) {\n    if (this.tState === START){\n      n = buffer[i];\n      this.offset++;\n      if(n === 0x7b){ this.onToken(LEFT_BRACE, \"{\"); // {\n      }else if(n === 0x7d){ this.onToken(RIGHT_BRACE, \"}\"); // }\n      }else if(n === 0x5b){ this.onToken(LEFT_BRACKET, \"[\"); // [\n      }else if(n === 0x5d){ this.onToken(RIGHT_BRACKET, \"]\"); // ]\n      }else if(n === 0x3a){ this.onToken(COLON, \":\");  // :\n      }else if(n === 0x2c){ this.onToken(COMMA, \",\"); // ,\n      }else if(n === 0x74){ this.tState = TRUE1;  // t\n      }else if(n === 0x66){ this.tState = FALSE1;  // f\n      }else if(n === 0x6e){ this.tState = NULL1; // n\n      }else if(n === 0x22){ // \"\n        this.string = \"\";\n        this.stringBufferOffset = 0;\n        this.tState = STRING1;\n      }else if(n === 0x2d){ this.string = \"-\"; this.tState = NUMBER1; // -\n      }else{\n        if (n >= 0x30 && n < 0x40) { // 1-9\n          this.string = String.fromCharCode(n); this.tState = NUMBER3;\n        } else if (n === 0x20 || n === 0x09 || n === 0x0a || n === 0x0d) {\n          // whitespace\n        } else {\n          return this.charError(buffer, i);\n        }\n      }\n    }else if (this.tState === STRING1){ // After open quote\n      n = buffer[i]; // get current byte from buffer\n      // check for carry over of a multi byte char split between data chunks\n      // & fill temp buffer it with start of this data chunk up to the boundary limit set in the last iteration\n      if (this.bytes_remaining > 0) {\n        for (var j = 0; j < this.bytes_remaining; j++) {\n          this.temp_buffs[this.bytes_in_sequence][this.bytes_in_sequence - this.bytes_remaining + j] = buffer[j];\n        }\n\n        this.appendStringBuf(this.temp_buffs[this.bytes_in_sequence]);\n        this.bytes_in_sequence = this.bytes_remaining = 0;\n        i = i + j - 1;\n      } else if (this.bytes_remaining === 0 && n >= 128) { // else if no remainder bytes carried over, parse multi byte (>=128) chars one at a time\n        if (n <= 193 || n > 244) {\n          return this.onError(new Error(\"Invalid UTF-8 character at position \" + i + \" in state \" + Parser.toknam(this.tState)));\n        }\n        if ((n >= 194) && (n <= 223)) this.bytes_in_sequence = 2;\n        if ((n >= 224) && (n <= 239)) this.bytes_in_sequence = 3;\n        if ((n >= 240) && (n <= 244)) this.bytes_in_sequence = 4;\n        if ((this.bytes_in_sequence + i) > buffer.length) { // if bytes needed to complete char fall outside buffer length, we have a boundary split\n          for (var k = 0; k <= (buffer.length - 1 - i); k++) {\n            this.temp_buffs[this.bytes_in_sequence][k] = buffer[i + k]; // fill temp buffer of correct size with bytes available in this chunk\n          }\n          this.bytes_remaining = (i + this.bytes_in_sequence) - buffer.length;\n          i = buffer.length - 1;\n        } else {\n          this.appendStringBuf(buffer, i, i + this.bytes_in_sequence);\n          i = i + this.bytes_in_sequence - 1;\n        }\n      } else if (n === 0x22) {\n        this.tState = START;\n        this.string += this.stringBuffer.toString('utf8', 0, this.stringBufferOffset);\n        this.stringBufferOffset = 0;\n        this.onToken(STRING, this.string);\n        this.offset += Buffer.byteLength(this.string, 'utf8') + 1;\n        this.string = undefined;\n      }\n      else if (n === 0x5c) {\n        this.tState = STRING2;\n      }\n      else if (n >= 0x20) { this.appendStringChar(n); }\n      else {\n          return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING2){ // After backslash\n      n = buffer[i];\n      if(n === 0x22){ this.appendStringChar(n); this.tState = STRING1;\n      }else if(n === 0x5c){ this.appendStringChar(BACK_SLASH); this.tState = STRING1;\n      }else if(n === 0x2f){ this.appendStringChar(FORWARD_SLASH); this.tState = STRING1;\n      }else if(n === 0x62){ this.appendStringChar(BACKSPACE); this.tState = STRING1;\n      }else if(n === 0x66){ this.appendStringChar(FORM_FEED); this.tState = STRING1;\n      }else if(n === 0x6e){ this.appendStringChar(NEWLINE); this.tState = STRING1;\n      }else if(n === 0x72){ this.appendStringChar(CARRIAGE_RETURN); this.tState = STRING1;\n      }else if(n === 0x74){ this.appendStringChar(TAB); this.tState = STRING1;\n      }else if(n === 0x75){ this.unicode = \"\"; this.tState = STRING3;\n      }else{\n        return this.charError(buffer, i);\n      }\n    }else if (this.tState === STRING3 || this.tState === STRING4 || this.tState === STRING5 || this.tState === STRING6){ // unicode hex codes\n      n = buffer[i];\n      // 0-9 A-F a-f\n      if ((n >= 0x30 && n < 0x40) || (n > 0x40 && n <= 0x46) || (n > 0x60 && n <= 0x66)) {\n        this.unicode += String.fromCharCode(n);\n        if (this.tState++ === STRING6) {\n          var intVal = parseInt(this.unicode, 16);\n          this.unicode = undefined;\n          if (this.highSurrogate !== undefined && intVal >= 0xDC00 && intVal < (0xDFFF + 1)) { //<56320,57343> - lowSurrogate\n            this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate, intVal)));\n            this.highSurrogate = undefined;\n          } else if (this.highSurrogate === undefined && intVal >= 0xD800 && intVal < (0xDBFF + 1)) { //<55296,56319> - highSurrogate\n            this.highSurrogate = intVal;\n          } else {\n            if (this.highSurrogate !== undefined) {\n              this.appendStringBuf(new Buffer(String.fromCharCode(this.highSurrogate)));\n              this.highSurrogate = undefined;\n            }\n            this.appendStringBuf(new Buffer(String.fromCharCode(intVal)));\n          }\n          this.tState = STRING1;\n        }\n      } else {\n        return this.charError(buffer, i);\n      }\n    } else if (this.tState === NUMBER1 || this.tState === NUMBER3) {\n        n = buffer[i];\n\n        switch (n) {\n          case 0x30: // 0\n          case 0x31: // 1\n          case 0x32: // 2\n          case 0x33: // 3\n          case 0x34: // 4\n          case 0x35: // 5\n          case 0x36: // 6\n          case 0x37: // 7\n          case 0x38: // 8\n          case 0x39: // 9\n          case 0x2e: // .\n          case 0x65: // e\n          case 0x45: // E\n          case 0x2b: // +\n          case 0x2d: // -\n            this.string += String.fromCharCode(n);\n            this.tState = NUMBER3;\n            break;\n          default:\n            this.tState = START;\n            var error = this.numberReviver(this.string, buffer, i);\n            if (error){\n              return error;\n            }\n\n            this.offset += this.string.length - 1;\n            this.string = undefined;\n            i--;\n            break;\n        }\n    }else if (this.tState === TRUE1){ // r\n      if (buffer[i] === 0x72) { this.tState = TRUE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE2){ // u\n      if (buffer[i] === 0x75) { this.tState = TRUE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === TRUE3){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(TRUE, true); this.offset+= 3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE1){ // a\n      if (buffer[i] === 0x61) { this.tState = FALSE2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE2){ // l\n      if (buffer[i] === 0x6c) { this.tState = FALSE3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE3){ // s\n      if (buffer[i] === 0x73) { this.tState = FALSE4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === FALSE4){ // e\n      if (buffer[i] === 0x65) { this.tState = START; this.onToken(FALSE, false); this.offset+= 4; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL1){ // u\n      if (buffer[i] === 0x75) { this.tState = NULL2; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL2){ // l\n      if (buffer[i] === 0x6c) { this.tState = NULL3; }\n      else { return this.charError(buffer, i); }\n    }else if (this.tState === NULL3){ // l\n      if (buffer[i] === 0x6c) { this.tState = START; this.onToken(NULL, null); this.offset += 3; }\n      else { return this.charError(buffer, i); }\n    }\n  }\n};\nproto.onToken = function (token, value) {\n  // Override this to get events\n};\n\nproto.parseError = function (token, value) {\n  this.tState = STOP;\n  this.onError(new Error(\"Unexpected \" + Parser.toknam(token) + (value ? (\"(\" + JSON.stringify(value) + \")\") : \"\") + \" in state \" + Parser.toknam(this.state)));\n};\nproto.push = function () {\n  this.stack.push({value: this.value, key: this.key, mode: this.mode});\n};\nproto.pop = function () {\n  var value = this.value;\n  var parent = this.stack.pop();\n  this.value = parent.value;\n  this.key = parent.key;\n  this.mode = parent.mode;\n  this.emit(value);\n  if (!this.mode) { this.state = VALUE; }\n};\nproto.emit = function (value) {\n  if (this.mode) { this.state = COMMA; }\n  this.onValue(value);\n};\nproto.onValue = function (value) {\n  // Override me\n};\nproto.onToken = function (token, value) {\n  if(this.state === VALUE){\n    if(token === STRING || token === NUMBER || token === TRUE || token === FALSE || token === NULL){\n      if (this.value) {\n        this.value[this.key] = value;\n      }\n      this.emit(value);\n    }else if(token === LEFT_BRACE){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = {};\n      } else {\n        this.value = {};\n      }\n      this.key = undefined;\n      this.state = KEY;\n      this.mode = OBJECT;\n    }else if(token === LEFT_BRACKET){\n      this.push();\n      if (this.value) {\n        this.value = this.value[this.key] = [];\n      } else {\n        this.value = [];\n      }\n      this.key = 0;\n      this.mode = ARRAY;\n      this.state = VALUE;\n    }else if(token === RIGHT_BRACE){\n      if (this.mode === OBJECT) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else if(token === RIGHT_BRACKET){\n      if (this.mode === ARRAY) {\n        this.pop();\n      } else {\n        return this.parseError(token, value);\n      }\n    }else{\n      return this.parseError(token, value);\n    }\n  }else if(this.state === KEY){\n    if (token === STRING) {\n      this.key = value;\n      this.state = COLON;\n    } else if (token === RIGHT_BRACE) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else if(this.state === COLON){\n    if (token === COLON) { this.state = VALUE; }\n    else { return this.parseError(token, value); }\n  }else if(this.state === COMMA){\n    if (token === COMMA) {\n      if (this.mode === ARRAY) { this.key++; this.state = VALUE; }\n      else if (this.mode === OBJECT) { this.state = KEY; }\n\n    } else if (token === RIGHT_BRACKET && this.mode === ARRAY || token === RIGHT_BRACE && this.mode === OBJECT) {\n      this.pop();\n    } else {\n      return this.parseError(token, value);\n    }\n  }else{\n    return this.parseError(token, value);\n  }\n};\n\n// Override to implement your own number reviver.\n// Any value returned is treated as error and will interrupt parsing.\nproto.numberReviver = function (text, buffer, i) {\n  var result = Number(text);\n\n  if (isNaN(result)) {\n    return this.charError(buffer, i);\n  }\n\n  if ((text.match(/[0-9]+/) == text) && (result.toString() != text)) {\n    // Long string of digits which is an ID string and not valid and/or safe JavaScript integer Number\n    this.onToken(STRING, text);\n  } else {\n    this.onToken(NUMBER, result);\n  }\n}\n\nParser.C = C;\n\nmodule.exports = Parser;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/JsonLdParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultExpandOptions = exports.JsonLdContextNormalized = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst Util_1 = require(\"./Util\");\n/**\n * A class exposing operations over a normalized JSON-LD context.\n */\nclass JsonLdContextNormalized {\n    constructor(contextRaw) {\n        this.contextRaw = contextRaw;\n    }\n    /**\n     * @return The raw inner context.\n     */\n    getContextRaw() {\n        return this.contextRaw;\n    }\n    /**\n     * Expand the term or prefix of the given term if it has one,\n     * otherwise return the term as-is.\n     *\n     * This will try to expand the IRI as much as possible.\n     *\n     * Iff in vocab-mode, then other references to other terms in the context can be used,\n     * such as to `myTerm`:\n     * ```\n     * {\n     *   \"myTerm\": \"http://example.org/myLongTerm\"\n     * }\n     * ```\n     *\n     * @param {string} term A term that is an URL or a prefixed URL.\n     * @param {boolean} expandVocab If the term is a predicate or type and should be expanded based on @vocab,\n     *                              otherwise it is considered a regular term that is expanded based on @base.\n     * @param {IExpandOptions} options Options that define the way how expansion must be done.\n     * @return {string} The expanded term, the term as-is, or null if it was explicitly disabled in the context.\n     * @throws If the term is aliased to an invalid value (not a string, IRI or keyword).\n     */\n    expandTerm(term, expandVocab, options = exports.defaultExpandOptions) {\n        const contextValue = this.contextRaw[term];\n        // Immediately return if the term was disabled in the context\n        if (contextValue === null || (contextValue && contextValue['@id'] === null)) {\n            return null;\n        }\n        // Check the @id\n        let validIriMapping = true;\n        if (contextValue && expandVocab) {\n            const value = Util_1.Util.getContextValueId(contextValue);\n            if (value && value !== term) {\n                if (typeof value !== 'string' || (!Util_1.Util.isValidIri(value) && !Util_1.Util.isValidKeyword(value))) {\n                    // Don't mark this mapping as invalid if we have an unknown keyword, but of the correct form.\n                    if (!Util_1.Util.isPotentialKeyword(value)) {\n                        validIriMapping = false;\n                    }\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        // Check if the term is prefixed\n        const prefix = Util_1.Util.getPrefix(term, this.contextRaw);\n        const vocab = this.contextRaw['@vocab'];\n        const vocabRelative = (!!vocab || vocab === '') && vocab.indexOf(':') < 0;\n        const base = this.contextRaw['@base'];\n        const potentialKeyword = Util_1.Util.isPotentialKeyword(term);\n        if (prefix) {\n            const contextPrefixValue = this.contextRaw[prefix];\n            const value = Util_1.Util.getContextValueId(contextPrefixValue);\n            if (value) {\n                if (typeof contextPrefixValue === 'string' || !options.allowPrefixForcing) {\n                    // If we have a simple term definition,\n                    // check the last character of the prefix to determine whether or not it is a prefix.\n                    // Validate that prefix ends with gen-delim character, unless @prefix is true\n                    if (!Util_1.Util.isSimpleTermDefinitionPrefix(value, options)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                else {\n                    // If we have an expanded term definition, default to @prefix: false\n                    if (value[0] !== '_' && !potentialKeyword && !contextPrefixValue['@prefix'] && !(term in this.contextRaw)) {\n                        // Treat the term as an absolute IRI\n                        return term;\n                    }\n                }\n                return value + term.substr(prefix.length + 1);\n            }\n        }\n        else if (expandVocab && ((vocab || vocab === '') || (options.allowVocabRelativeToBase && (base && vocabRelative)))\n            && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            if (vocabRelative) {\n                if (options.allowVocabRelativeToBase) {\n                    return ((vocab || base) ? (0, relative_to_absolute_iri_1.resolve)(vocab, base) : '') + term;\n                }\n                else {\n                    throw new ErrorCoded_1.ErrorCoded(`Relative vocab expansion for term '${term}' with vocab '${vocab}' is not allowed.`, ErrorCoded_1.ERROR_CODES.INVALID_VOCAB_MAPPING);\n                }\n            }\n            else {\n                return vocab + term;\n            }\n        }\n        else if (!expandVocab && base && !potentialKeyword && !Util_1.Util.isCompactIri(term)) {\n            return (0, relative_to_absolute_iri_1.resolve)(term, base);\n        }\n        // Return the term as-is, unless we discovered an invalid IRI mapping for this term in the context earlier.\n        if (validIriMapping) {\n            return term;\n        }\n        else {\n            throw new ErrorCoded_1.ErrorCoded(`Invalid IRI mapping found for context entry '${term}': '${JSON.stringify(contextValue)}'`, ErrorCoded_1.ERROR_CODES.INVALID_IRI_MAPPING);\n        }\n    }\n    /**\n     * Compact the given term using @base, @vocab, an aliased term, or a prefixed term.\n     *\n     * This will try to compact the IRI as much as possible.\n     *\n     * @param {string} iri An IRI to compact.\n     * @param {boolean} vocab If the term is a predicate or type and should be compacted based on @vocab,\n     *                        otherwise it is considered a regular term that is compacted based on @base.\n     * @return {string} The compacted term or the IRI as-is.\n     */\n    compactIri(iri, vocab) {\n        // Try @vocab compacting\n        if (vocab && this.contextRaw['@vocab'] && iri.startsWith(this.contextRaw['@vocab'])) {\n            return iri.substr(this.contextRaw['@vocab'].length);\n        }\n        // Try @base compacting\n        if (!vocab && this.contextRaw['@base'] && iri.startsWith(this.contextRaw['@base'])) {\n            return iri.substr(this.contextRaw['@base'].length);\n        }\n        // Loop over all terms in the context\n        // This will try to prefix as short as possible.\n        // Once a fully compacted alias is found, return immediately, as we can not go any shorter.\n        const shortestPrefixing = { prefix: '', suffix: iri };\n        for (const key in this.contextRaw) {\n            const value = this.contextRaw[key];\n            if (value && !Util_1.Util.isPotentialKeyword(key)) {\n                const contextIri = Util_1.Util.getContextValueId(value);\n                if (iri.startsWith(contextIri)) {\n                    const suffix = iri.substr(contextIri.length);\n                    if (!suffix) {\n                        if (vocab) {\n                            // Immediately return on compacted alias\n                            return key;\n                        }\n                    }\n                    else if (suffix.length < shortestPrefixing.suffix.length) {\n                        // Overwrite the shortest prefix\n                        shortestPrefixing.prefix = key;\n                        shortestPrefixing.suffix = suffix;\n                    }\n                }\n            }\n        }\n        // Return the shortest prefix\n        if (shortestPrefixing.prefix) {\n            return shortestPrefixing.prefix + ':' + shortestPrefixing.suffix;\n        }\n        return iri;\n    }\n}\nexports.JsonLdContextNormalized = JsonLdContextNormalized;\nexports.defaultExpandOptions = {\n    allowPrefixForcing: true,\n    allowPrefixNonGenDelims: false,\n    allowVocabRelativeToBase: true,\n};\n//# sourceMappingURL=JsonLdContextNormalized.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FetchDocumentLoader = void 0;\nconst ErrorCoded_1 = require(\"./ErrorCoded\");\nconst http_link_header_1 = require(\"http-link-header\");\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\n/**\n * Loads documents via the fetch API.\n */\nclass FetchDocumentLoader {\n    constructor(fetcher) {\n        this.fetcher = fetcher;\n    }\n    async load(url) {\n        const response = await (this.fetcher || fetch)(url, { headers: new Headers({ accept: 'application/ld+json' }) });\n        if (response.ok && response.headers) {\n            let mediaType = response.headers.get('Content-Type');\n            if (mediaType) {\n                const colonPos = mediaType.indexOf(';');\n                if (colonPos > 0) {\n                    mediaType = mediaType.substr(0, colonPos);\n                }\n            }\n            if (mediaType === 'application/ld+json') {\n                // Return JSON-LD if proper content type was returned\n                return (await response.json());\n            }\n            else {\n                // Check for alternate link for a non-JSON-LD response\n                if (response.headers.has('Link')) {\n                    let alternateUrl;\n                    response.headers.forEach((value, key) => {\n                        if (key === 'link') {\n                            const linkHeader = (0, http_link_header_1.parse)(value);\n                            for (const link of linkHeader.get('type', 'application/ld+json')) {\n                                if (link.rel === 'alternate') {\n                                    if (alternateUrl) {\n                                        throw new Error('Multiple JSON-LD alternate links were found on ' + url);\n                                    }\n                                    alternateUrl = (0, relative_to_absolute_iri_1.resolve)(link.uri, url);\n                                }\n                            }\n                        }\n                    });\n                    if (alternateUrl) {\n                        return this.load(alternateUrl);\n                    }\n                }\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD media type ${mediaType}`, ErrorCoded_1.ERROR_CODES.LOADING_DOCUMENT_FAILED);\n            }\n        }\n        else {\n            throw new Error(response.statusText || `Status code: ${response.status}`);\n        }\n    }\n}\nexports.FetchDocumentLoader = FetchDocumentLoader;\n//# sourceMappingURL=FetchDocumentLoader.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParsingContext = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst ErrorCoded_1 = require(\"jsonld-context-parser/lib/ErrorCoded\");\nconst ContextTree_1 = require(\"./ContextTree\");\nconst JsonLdParser_1 = require(\"./JsonLdParser\");\n/**\n * Data holder for parsing information.\n */\nclass ParsingContext {\n    constructor(options) {\n        // Initialize settings\n        this.contextParser = new jsonld_context_parser_1.ContextParser({ documentLoader: options.documentLoader, skipValidation: options.skipContextValidation });\n        this.streamingProfile = !!options.streamingProfile;\n        this.baseIRI = options.baseIRI;\n        this.produceGeneralizedRdf = !!options.produceGeneralizedRdf;\n        this.allowSubjectList = !!options.allowSubjectList;\n        this.processingMode = options.processingMode || JsonLdParser_1.JsonLdParser.DEFAULT_PROCESSING_MODE;\n        this.strictValues = !!options.strictValues;\n        this.validateValueIndexes = !!options.validateValueIndexes;\n        this.defaultGraph = options.defaultGraph;\n        this.rdfDirection = options.rdfDirection;\n        this.normalizeLanguageTags = options.normalizeLanguageTags;\n        this.streamingProfileAllowOutOfOrderPlainType = options.streamingProfileAllowOutOfOrderPlainType;\n        this.rdfstar = options.rdfstar !== false;\n        this.rdfstarReverseInEmbedded = options.rdfstarReverseInEmbedded;\n        this.topLevelProperties = false;\n        this.activeProcessingMode = parseFloat(this.processingMode);\n        // Initialize stacks\n        this.processingStack = [];\n        this.processingType = [];\n        this.emittedStack = [];\n        this.idStack = [];\n        this.graphStack = [];\n        this.graphContainerTermStack = [];\n        this.listPointerStack = [];\n        this.contextTree = new ContextTree_1.ContextTree();\n        this.literalStack = [];\n        this.validationStack = [];\n        this.unaliasedKeywordCacheStack = [];\n        this.jsonLiteralStack = [];\n        this.unidentifiedValuesBuffer = [];\n        this.unidentifiedGraphsBuffer = [];\n        this.annotationsBuffer = [];\n        this.pendingContainerFlushBuffers = [];\n        this.parser = options.parser;\n        if (options.context) {\n            this.rootContext = this.parseContext(options.context);\n            this.rootContext.then((context) => this.validateContext(context));\n        }\n        else {\n            this.rootContext = Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(this.baseIRI ? { '@base': this.baseIRI, '@__baseDocument': true } : {}));\n        }\n    }\n    /**\n     * Parse the given context with the configured options.\n     * @param {JsonLdContext} context A context to parse.\n     * @param {JsonLdContextNormalized} parentContext An optional parent context.\n     * @param {boolean} ignoreProtection If @protected term checks should be ignored.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to the parsed context.\n     */\n    async parseContext(context, parentContext, ignoreProtection) {\n        return this.contextParser.parse(context, {\n            baseIRI: this.baseIRI,\n            ignoreProtection,\n            normalizeLanguageTags: this.normalizeLanguageTags,\n            parentContext,\n            processingMode: this.activeProcessingMode,\n        });\n    }\n    /**\n     * Check if the given context is valid.\n     * If not, an error will be thrown.\n     * @param {JsonLdContextNormalized} context A context.\n     */\n    validateContext(context) {\n        const activeVersion = context.getContextRaw()['@version'];\n        if (activeVersion) {\n            if (this.activeProcessingMode && activeVersion > this.activeProcessingMode) {\n                throw new ErrorCoded_1.ErrorCoded(`Unsupported JSON-LD version '${activeVersion}' under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.PROCESSING_MODE_CONFLICT);\n            }\n            else {\n                if (this.activeProcessingMode && activeVersion < this.activeProcessingMode) {\n                    throw new ErrorCoded_1.ErrorCoded(`Invalid JSON-LD version ${activeVersion} under active processing mode ${this.activeProcessingMode}.`, ErrorCoded_1.ERROR_CODES.INVALID_VERSION_VALUE);\n                }\n                this.activeProcessingMode = activeVersion;\n            }\n        }\n    }\n    /**\n     * Get the context at the given path.\n     * @param {keys} keys The path of keys to get the context at.\n     * @param {number} offset The path offset, defaults to 1.\n     * @return {Promise<JsonLdContextNormalized>} A promise resolving to a context.\n     */\n    async getContext(keys, offset = 1) {\n        const keysOriginal = keys;\n        // Ignore array keys at the end\n        while (typeof keys[keys.length - 1] === 'number') {\n            keys = keys.slice(0, keys.length - 1);\n        }\n        // Handle offset on keys\n        if (offset) {\n            keys = keys.slice(0, -offset);\n        }\n        // Determine the closest context\n        const contextData = await this.getContextPropagationAware(keys);\n        const context = contextData.context;\n        // Process property-scoped contexts (high-to-low)\n        let contextRaw = context.getContextRaw();\n        for (let i = contextData.depth; i < keysOriginal.length - offset; i++) {\n            const key = keysOriginal[i];\n            const contextKeyEntry = contextRaw[key];\n            if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n                const scopedContext = (await this.parseContext(contextKeyEntry, contextRaw, true)).getContextRaw();\n                const propagate = !(key in scopedContext)\n                    || scopedContext[key]['@context']['@propagate']; // Propagation is true by default\n                if (propagate !== false || i === keysOriginal.length - 1 - offset) {\n                    contextRaw = Object.assign({}, scopedContext);\n                    // Clean up final context\n                    delete contextRaw['@propagate'];\n                    contextRaw[key] = Object.assign({}, contextRaw[key]);\n                    if ('@id' in contextKeyEntry) {\n                        contextRaw[key]['@id'] = contextKeyEntry['@id'];\n                    }\n                    delete contextRaw[key]['@context'];\n                    if (propagate !== false) {\n                        this.contextTree.setContext(keysOriginal.slice(0, i + offset), Promise.resolve(new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw)));\n                    }\n                }\n            }\n        }\n        return new jsonld_context_parser_1.JsonLdContextNormalized(contextRaw);\n    }\n    /**\n     * Get the context at the given path.\n     * Non-propagating contexts will be skipped,\n     * unless the context at that exact depth is retrieved.\n     *\n     * This ONLY takes into account context propagation logic,\n     * so this should usually not be called directly,\n     * call {@link #getContext} instead.\n     *\n     * @param keys The path of keys to get the context at.\n     * @return {Promise<{ context: JsonLdContextNormalized, depth: number }>} A context and its depth.\n     */\n    async getContextPropagationAware(keys) {\n        const originalDepth = keys.length;\n        let contextData = null;\n        let hasApplicablePropertyScopedContext;\n        do {\n            hasApplicablePropertyScopedContext = false;\n            if (contextData && '@__propagateFallback' in contextData.context.getContextRaw()) {\n                // If a propagation fallback context has been set,\n                // fallback to that context and retry for the same depth.\n                contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized(contextData.context.getContextRaw()['@__propagateFallback']);\n            }\n            else {\n                if (contextData) {\n                    // If we had a previous iteration, jump to the parent of context depth.\n                    // We must do this because once we get here, last context had propagation disabled,\n                    // so we check its first parent instead.\n                    keys = keys.slice(0, contextData.depth - 1);\n                }\n                contextData = await this.contextTree.getContext(keys) || { context: await this.rootContext, depth: 0 };\n            }\n            // Allow non-propagating contexts to propagate one level deeper\n            // if it defines a property-scoped context that is applicable for the current key.\n            // @see https://w3c.github.io/json-ld-api/tests/toRdf-manifest#tc012\n            const lastKey = keys[keys.length - 1];\n            if (lastKey in contextData.context.getContextRaw()) {\n                const lastKeyValue = contextData.context.getContextRaw()[lastKey];\n                if (lastKeyValue && typeof lastKeyValue === 'object' && '@context' in lastKeyValue) {\n                    hasApplicablePropertyScopedContext = true;\n                }\n            }\n        } while (contextData.depth > 0 // Root context has a special case\n            && contextData.context.getContextRaw()['@propagate'] === false // Stop loop if propagation is true\n            && contextData.depth !== originalDepth // Stop loop if requesting exact depth of non-propagating\n            && !hasApplicablePropertyScopedContext);\n        // Special case for root context that does not allow propagation.\n        // Fallback to empty context in that case.\n        if (contextData.depth === 0\n            && contextData.context.getContextRaw()['@propagate'] === false\n            && contextData.depth !== originalDepth) {\n            contextData.context = new jsonld_context_parser_1.JsonLdContextNormalized({});\n        }\n        return contextData;\n    }\n    /**\n     * Start a new job for parsing the given value.\n     * @param {any[]} keys The stack of keys.\n     * @param value The value to parse.\n     * @param {number} depth The depth to parse at.\n     * @param {boolean} lastDepthCheck If the lastDepth check should be done for buffer draining.\n     * @return {Promise<void>} A promise resolving when the job is done.\n     */\n    async newOnValueJob(keys, value, depth, lastDepthCheck) {\n        await this.parser.newOnValueJob(keys, value, depth, lastDepthCheck);\n    }\n    /**\n     * Flush the pending container flush buffers\n     * @return {boolean} If any pending buffers were flushed.\n     */\n    async handlePendingContainerFlushBuffers() {\n        if (this.pendingContainerFlushBuffers.length > 0) {\n            for (const pendingFlushBuffer of this.pendingContainerFlushBuffers) {\n                await this.parser.flushBuffer(pendingFlushBuffer.depth, pendingFlushBuffer.keys);\n                this.parser.flushStacks(pendingFlushBuffer.depth);\n            }\n            this.pendingContainerFlushBuffers.splice(0, this.pendingContainerFlushBuffers.length);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Emit the given quad into the output stream.\n     * @param {number} depth The depth the quad was generated at.\n     * @param {Quad} quad A quad to emit.\n     */\n    emitQuad(depth, quad) {\n        if (depth === 1) {\n            this.topLevelProperties = true;\n        }\n        this.parser.push(quad);\n    }\n    /**\n     * Emit the given error into the output stream.\n     * @param {Error} error An error to emit.\n     */\n    emitError(error) {\n        this.parser.emit('error', error);\n    }\n    /**\n     * Emit the given context into the output stream under the 'context' event.\n     * @param {JsonLdContext} context A context to emit.\n     */\n    emitContext(context) {\n        this.parser.emit('context', context);\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedValuesBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedValuesBuffer}.\n     */\n    getUnidentifiedValueBufferSafe(depth) {\n        let buffer = this.unidentifiedValuesBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedValuesBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.unidentifiedGraphsBuffer}.\n     * @param {number} depth A depth.\n     * @return {{predicate: Term; object: Term; reverse: boolean}[]} An element of\n     *                                                               {@link ParsingContext.unidentifiedGraphsBuffer}.\n     */\n    getUnidentifiedGraphBufferSafe(depth) {\n        let buffer = this.unidentifiedGraphsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.unidentifiedGraphsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * Safely get or create the depth value of {@link ParsingContext.annotationsBuffer}.\n     * @param {number} depth A depth.\n     * @return {} An element of {@link ParsingContext.annotationsBuffer}.\n     */\n    getAnnotationsBufferSafe(depth) {\n        let buffer = this.annotationsBuffer[depth];\n        if (!buffer) {\n            buffer = [];\n            this.annotationsBuffer[depth] = buffer;\n        }\n        return buffer;\n    }\n    /**\n     * @return IExpandOptions The expand options for the active processing mode.\n     */\n    getExpandOptions() {\n        return ParsingContext.EXPAND_OPTIONS[this.activeProcessingMode];\n    }\n    /**\n     * Shift the stack at the given offset to the given depth.\n     *\n     * This will override anything in the stack at `depth`,\n     * and this will remove anything at `depth + depthOffset`\n     *\n     * @param depth The target depth.\n     * @param depthOffset The origin depth, relative to `depth`.\n     */\n    shiftStack(depth, depthOffset) {\n        // Copy the id stack value up one level so that the next job can access the id.\n        const deeperIdStack = this.idStack[depth + depthOffset];\n        if (deeperIdStack) {\n            this.idStack[depth] = deeperIdStack;\n            this.emittedStack[depth] = true;\n            delete this.idStack[depth + depthOffset];\n        }\n        // Shorten key stack\n        if (this.pendingContainerFlushBuffers.length) {\n            for (const buffer of this.pendingContainerFlushBuffers) {\n                if (buffer.depth >= depth + depthOffset) {\n                    buffer.depth -= depthOffset;\n                    buffer.keys.splice(depth, depthOffset);\n                }\n            }\n        }\n        // Splice stacks\n        if (this.unidentifiedValuesBuffer[depth + depthOffset]) {\n            this.unidentifiedValuesBuffer[depth] = this.unidentifiedValuesBuffer[depth + depthOffset];\n            delete this.unidentifiedValuesBuffer[depth + depthOffset];\n        }\n        if (this.annotationsBuffer[depth + depthOffset - 1]) {\n            if (!this.annotationsBuffer[depth - 1]) {\n                this.annotationsBuffer[depth - 1] = [];\n            }\n            this.annotationsBuffer[depth - 1] = [\n                ...this.annotationsBuffer[depth - 1],\n                ...this.annotationsBuffer[depth + depthOffset - 1],\n            ];\n            delete this.annotationsBuffer[depth + depthOffset - 1];\n        }\n        // TODO: also do the same for other stacks\n    }\n}\nexports.ParsingContext = ParsingContext;\nParsingContext.EXPAND_OPTIONS = {\n    1.0: {\n        allowPrefixForcing: false,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: false,\n    },\n    1.1: {\n        allowPrefixForcing: true,\n        allowPrefixNonGenDelims: false,\n        allowVocabRelativeToBase: true,\n    },\n};\n//# sourceMappingURL=ParsingContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Util = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nconst EntryHandlerContainer_1 = require(\"./entryhandler/EntryHandlerContainer\");\n// tslint:disable-next-line:no-var-requires\nconst canonicalizeJson = require('canonicalize');\n/**\n * Utility functions and methods.\n */\nclass Util {\n    constructor(options) {\n        this.parsingContext = options.parsingContext;\n        this.dataFactory = options.dataFactory || new rdf_data_factory_1.DataFactory();\n        this.rdfFirst = this.dataFactory.namedNode(Util.RDF + 'first');\n        this.rdfRest = this.dataFactory.namedNode(Util.RDF + 'rest');\n        this.rdfNil = this.dataFactory.namedNode(Util.RDF + 'nil');\n        this.rdfType = this.dataFactory.namedNode(Util.RDF + 'type');\n        this.rdfJson = this.dataFactory.namedNode(Util.RDF + 'JSON');\n    }\n    /**\n     * Helper function to get the value of a context entry,\n     * or fallback to a certain value.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} contextKey A pre-defined JSON-LD key in context entries.\n     * @param {string} key A context entry key.\n     * @param {string} fallback A fallback value for when the given contextKey\n     *                          could not be found in the value with the given key.\n     * @return {string} The value of the given contextKey in the entry behind key in the given context,\n     *                  or the given fallback value.\n     */\n    static getContextValue(context, contextKey, key, fallback) {\n        const entry = context.getContextRaw()[key];\n        if (!entry) {\n            return fallback;\n        }\n        const type = entry[contextKey];\n        return type === undefined ? fallback : type;\n    }\n    /**\n     * Get the container type of the given key in the context.\n     *\n     * Should any context-scoping bugs should occur related to this in the future,\n     * it may be required to increase the offset from the depth at which the context is retrieved by one (to 2).\n     * This is because containers act 2 levels deep.\n     *\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The container type.\n     */\n    static getContextValueContainer(context, key) {\n        return Util.getContextValue(context, '@container', key, { '@set': true });\n    }\n    /**\n     * Get the value type of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueType(context, key) {\n        const valueType = Util.getContextValue(context, '@type', key, null);\n        if (valueType === '@none') {\n            return null;\n        }\n        return valueType;\n    }\n    /**\n     * Get the language of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueLanguage(context, key) {\n        return Util.getContextValue(context, '@language', key, context.getContextRaw()['@language'] || null);\n    }\n    /**\n     * Get the direction of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The node type.\n     */\n    static getContextValueDirection(context, key) {\n        return Util.getContextValue(context, '@direction', key, context.getContextRaw()['@direction'] || null);\n    }\n    /**\n     * Check if the given key in the context is a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {boolean} If the context value has a @reverse key.\n     */\n    static isContextValueReverse(context, key) {\n        return !!Util.getContextValue(context, '@reverse', key, null);\n    }\n    /**\n     * Get the @index of the given key in the context.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key A context entry key.\n     * @return {string} The index.\n     */\n    static getContextValueIndex(context, key) {\n        return Util.getContextValue(context, '@index', key, context.getContextRaw()['@index'] || null);\n    }\n    /**\n     * Check if the given key refers to a reversed property.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The property key.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property must be reversed.\n     */\n    static isPropertyReverse(context, key, parentKey) {\n        // '!==' is needed because reversed properties in a @reverse container should cancel each other out.\n        return parentKey === '@reverse' !== Util.isContextValueReverse(context, key);\n    }\n    /**\n     * Check if the given key exists inside an embedded node as direct child.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property is embedded.\n     */\n    static isPropertyInEmbeddedNode(parentKey) {\n        return parentKey === '@id';\n    }\n    /**\n     * Check if the given key exists inside an annotation object as direct child.\n     * @param {string} parentKey The parent key.\n     * @return {boolean} If the property is an annotation.\n     */\n    static isPropertyInAnnotationObject(parentKey) {\n        return parentKey === '@annotation';\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return iri !== null && jsonld_context_parser_1.Util.isValidIri(iri);\n    }\n    /**\n     * Check if the given first array (needle) is a prefix of the given second array (haystack).\n     * @param needle An array to check if it is a prefix.\n     * @param haystack An array to look in.\n     */\n    static isPrefixArray(needle, haystack) {\n        if (needle.length > haystack.length) {\n            return false;\n        }\n        for (let i = 0; i < needle.length; i++) {\n            if (needle[i] !== haystack[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Make sure that @id-@index pairs are equal over all array values.\n     * Reject otherwise.\n     * @param {any[]} value An array value.\n     * @return {Promise<void>} A promise rejecting if conflicts are present.\n     */\n    async validateValueIndexes(value) {\n        if (this.parsingContext.validateValueIndexes) {\n            const indexHashes = {};\n            for (const entry of value) {\n                if (entry && typeof entry === 'object') {\n                    const id = entry['@id'];\n                    const index = entry['@index'];\n                    if (id && index) {\n                        const existingIndexValue = indexHashes[id];\n                        if (existingIndexValue && existingIndexValue !== index) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Conflicting @index value for ${id}`, jsonld_context_parser_1.ERROR_CODES.CONFLICTING_INDEXES);\n                        }\n                        indexHashes[id] = index;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Convert a given JSON value to an RDF term.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param value A JSON value.\n     * @param {number} depth The depth the value is at.\n     * @param {string[]} keys The path of keys.\n     * @return {Promise<RDF.Term[]>} An RDF term array.\n     */\n    async valueToTerm(context, key, value, depth, keys) {\n        // Skip further processing if we have an @type: @json\n        if (Util.getContextValueType(context, key) === '@json') {\n            return [this.dataFactory.literal(this.valueToJsonString(value), this.rdfJson)];\n        }\n        const type = typeof value;\n        switch (type) {\n            case 'object':\n                // Skip if we have a null or undefined object\n                if (value === null || value === undefined) {\n                    return [];\n                }\n                // Special case for arrays\n                if (Array.isArray(value)) {\n                    // We handle arrays at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty context-based lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if ('@list' in Util.getContextValueContainer(context, key)) {\n                        if (value.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    await this.validateValueIndexes(value);\n                    return [];\n                }\n                // Handle property-scoped contexts\n                context = await this.getContextSelfOrPropertyScoped(context, key);\n                // Handle local context in the value\n                if ('@context' in value) {\n                    context = await this.parsingContext.parseContext(value['@context'], (await this.parsingContext.getContext(keys, 0)).getContextRaw());\n                }\n                // In all other cases, we have a hash\n                value = await this.unaliasKeywords(value, keys, depth, context); // Un-alias potential keywords in this hash\n                if ('@value' in value) {\n                    let val;\n                    let valueLanguage;\n                    let valueDirection;\n                    let valueType;\n                    let valueIndex; // We don't use the index, but we need to check its type for spec-compliance\n                    for (key in value) {\n                        const subValue = value[key];\n                        switch (key) {\n                            case '@value':\n                                val = subValue;\n                                break;\n                            case '@language':\n                                valueLanguage = subValue;\n                                break;\n                            case '@direction':\n                                valueDirection = subValue;\n                                break;\n                            case '@type':\n                                valueType = subValue;\n                                break;\n                            case '@index':\n                                valueIndex = subValue;\n                                break;\n                            case '@annotation':\n                                // This keyword is allowed, but is processed like normal nodes\n                                break;\n                            default:\n                                throw new jsonld_context_parser_1.ErrorCoded(`Unknown value entry '${key}' in @value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                    }\n                    // Skip further processing if we have an @type: @json\n                    if (await this.unaliasKeyword(valueType, keys, depth, true, context) === '@json') {\n                        return [this.dataFactory.literal(this.valueToJsonString(val), this.rdfJson)];\n                    }\n                    // Validate @value\n                    if (val === null) {\n                        return [];\n                    }\n                    if (typeof val === 'object') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@value' can not be an object, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT_VALUE);\n                    }\n                    // Validate @index\n                    if (this.parsingContext.validateValueIndexes && valueIndex && typeof valueIndex !== 'string') {\n                        throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@index' must be a string, got '${JSON.stringify(valueIndex)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_INDEX_VALUE);\n                    }\n                    // Validate @language and @direction\n                    if (valueLanguage) {\n                        if (typeof val !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`When an '@language' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_VALUE);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateLanguage(valueLanguage, this.parsingContext.strictValues, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_TAGGED_STRING)) {\n                            return [];\n                        }\n                        // Language tags are always normalized to lowercase in 1.0.\n                        if (this.parsingContext.normalizeLanguageTags || this.parsingContext.activeProcessingMode === 1.0) {\n                            valueLanguage = valueLanguage.toLowerCase();\n                        }\n                    }\n                    if (valueDirection) {\n                        if (typeof val !== 'string') {\n                            throw new Error(`When an '@direction' is set, the value of '@value' must be a string, got '${JSON.stringify(val)}'`);\n                        }\n                        if (!jsonld_context_parser_1.ContextParser.validateDirection(valueDirection, this.parsingContext.strictValues)) {\n                            return [];\n                        }\n                    }\n                    // Check @language and @direction\n                    if (valueLanguage && valueDirection) {\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have '@language', '@direction' and '@type' in a value: '${JSON\n                                .stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueLanguage) { // Check @language\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@language' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return [this.dataFactory.literal(val, valueLanguage)];\n                    }\n                    else if (valueDirection) { // Check @direction\n                        if (valueType) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Can not have both '@direction' and '@type' in a value: '${JSON.stringify(value)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_VALUE_OBJECT);\n                        }\n                        return this.nullableTermToArray(this\n                            .createLanguageDirectionLiteral(depth, val, valueLanguage, valueDirection));\n                    }\n                    else if (valueType) { // Validate @type\n                        if (typeof valueType !== 'string') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`The value of an '@type' must be a string, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        const typeTerm = this.createVocabOrBaseTerm(context, valueType);\n                        if (!typeTerm) {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Invalid '@type' value, got '${JSON.stringify(valueType)}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        if (typeTerm.termType !== 'NamedNode') {\n                            throw new jsonld_context_parser_1.ErrorCoded(`Illegal value type (${typeTerm.termType}): ${valueType}`, jsonld_context_parser_1.ERROR_CODES.INVALID_TYPED_VALUE);\n                        }\n                        return [this.dataFactory.literal(val, typeTerm)];\n                    }\n                    // We don't pass the context, because context-based things like @language should be ignored\n                    return await this.valueToTerm(new jsonld_context_parser_1.JsonLdContextNormalized({}), key, val, depth, keys);\n                }\n                else if ('@set' in value) {\n                    // No other entries are allow in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @set for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    // No need to do anything here, this is handled at the deeper level.\n                    return [];\n                }\n                else if ('@list' in value) {\n                    // No other entries are allowed in this value\n                    if (Object.keys(value).length > 1) {\n                        throw new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${key}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT);\n                    }\n                    const listValue = value[\"@list\"];\n                    // We handle lists at value level so we can emit earlier, so this is handled already when we get here.\n                    // Empty anonymous lists are emitted at this place, because our streaming algorithm doesn't detect those.\n                    if (Array.isArray(listValue)) {\n                        if (listValue.length === 0) {\n                            return [this.rdfNil];\n                        }\n                        else {\n                            return this.parsingContext.idStack[depth + 1] || [];\n                        }\n                    }\n                    else {\n                        // We only have a single list element here, so emit this directly as single element\n                        return await this.valueToTerm(await this.parsingContext.getContext(keys), key, listValue, depth - 1, keys.slice(0, -1));\n                    }\n                }\n                else if ('@reverse' in value && typeof value['@reverse'] === 'boolean') {\n                    // We handle reverse properties at value level so we can emit earlier,\n                    // so this is handled already when we get here.\n                    return [];\n                }\n                else if ('@graph' in Util.getContextValueContainer(await this.parsingContext.getContext(keys), key)) {\n                    // We are processing a graph container\n                    const graphContainerEntries = this.parsingContext.graphContainerTermStack[depth + 1];\n                    return graphContainerEntries ? Object.values(graphContainerEntries) : [this.dataFactory.blankNode()];\n                }\n                else if (\"@id\" in value) {\n                    // Use deeper context if the value node contains other properties next to @id.\n                    if (Object.keys(value).length > 1) {\n                        context = await this.parsingContext.getContext(keys, 0);\n                    }\n                    // Handle local context in the value\n                    if ('@context' in value) {\n                        context = await this.parsingContext.parseContext(value['@context'], context.getContextRaw());\n                    }\n                    if (value[\"@type\"] === '@vocab') {\n                        return this.nullableTermToArray(this.createVocabOrBaseTerm(context, value[\"@id\"]));\n                    }\n                    else {\n                        const valueId = value[\"@id\"];\n                        let valueTerm;\n                        if (typeof valueId === 'object') {\n                            if (this.parsingContext.rdfstar) {\n                                valueTerm = this.parsingContext.idStack[depth + 1][0];\n                            }\n                            else {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE);\n                            }\n                        }\n                        else {\n                            valueTerm = this.resourceToTerm(context, valueId);\n                        }\n                        return this.nullableTermToArray(valueTerm);\n                    }\n                }\n                else {\n                    // Only make a blank node if at least one triple was emitted at the value's level.\n                    if (this.parsingContext.emittedStack[depth + 1]\n                        || (value && typeof value === 'object' && Object.keys(value).length === 0)) {\n                        return (this.parsingContext.idStack[depth + 1]\n                            || (this.parsingContext.idStack[depth + 1] = [this.dataFactory.blankNode()]));\n                    }\n                    else {\n                        return [];\n                    }\n                }\n            case 'string':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, null));\n            case 'boolean':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, Boolean(value).toString(), this.dataFactory.namedNode(Util.XSD_BOOLEAN)));\n            case 'number':\n                return this.nullableTermToArray(this.stringValueToTerm(depth, await this.getContextSelfOrPropertyScoped(context, key), key, value, this.dataFactory.namedNode(value % 1 === 0 && value < 1e21 ? Util.XSD_INTEGER : Util.XSD_DOUBLE)));\n            default:\n                this.parsingContext.emitError(new Error(`Could not determine the RDF type of a ${type}`));\n                return [];\n        }\n    }\n    /**\n     * If the context defines a property-scoped context for the given key,\n     * that context will be returned.\n     * Otherwise, the given context will be returned as-is.\n     *\n     * This should be used for valueToTerm cases that are not objects.\n     * @param context A context.\n     * @param key A JSON key.\n     */\n    async getContextSelfOrPropertyScoped(context, key) {\n        const contextKeyEntry = context.getContextRaw()[key];\n        if (contextKeyEntry && typeof contextKeyEntry === 'object' && '@context' in contextKeyEntry) {\n            context = await this.parsingContext.parseContext(contextKeyEntry, context.getContextRaw(), true);\n        }\n        return context;\n    }\n    /**\n     * If the given term is null, return an empty array, otherwise return an array with the single given term.\n     * @param term A term.\n     */\n    nullableTermToArray(term) {\n        return term ? [term] : [];\n    }\n    /**\n     * Convert a given JSON key to an RDF predicate term,\n     * based on @vocab.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node.\n     */\n    predicateToTerm(context, key) {\n        const expanded = context.expandTerm(key, true, this.parsingContext.getExpandOptions());\n        // Immediately return if the predicate was disabled in the context\n        if (!expanded) {\n            return null;\n        }\n        // Check if the predicate is a blank node\n        if (expanded[0] === '_' && expanded[1] === ':') {\n            if (this.parsingContext.produceGeneralizedRdf) {\n                return this.dataFactory.blankNode(expanded.substr(2));\n            }\n            else {\n                return null;\n            }\n        }\n        // Check if the predicate is a valid IRI\n        if (Util.isValidIri(expanded)) {\n            return this.dataFactory.namedNode(expanded);\n        }\n        else {\n            if (expanded && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid predicate IRI: ${expanded}`, jsonld_context_parser_1.ERROR_CODES.INVALID_IRI_MAPPING));\n            }\n            else {\n                return null;\n            }\n        }\n        return null;\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term or blank node,\n     * based on @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    resourceToTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const iri = context.expandTerm(key, false, this.parsingContext.getExpandOptions());\n        if (!Util.isValidIri(iri)) {\n            if (iri && this.parsingContext.strictValues) {\n                this.parsingContext.emitError(new Error(`Invalid resource IRI: ${iri}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(iri);\n    }\n    /**\n     * Convert a given JSON key to an RDF resource term.\n     * It will do this based on the @vocab,\n     * and fallback to @base.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param key A JSON key.\n     * @return {RDF.NamedNode} An RDF named node or null.\n     */\n    createVocabOrBaseTerm(context, key) {\n        if (key.startsWith('_:')) {\n            return this.dataFactory.blankNode(key.substr(2));\n        }\n        const expandOptions = this.parsingContext.getExpandOptions();\n        let expanded = context.expandTerm(key, true, expandOptions);\n        if (expanded === key) {\n            expanded = context.expandTerm(key, false, expandOptions);\n        }\n        if (!Util.isValidIri(expanded)) {\n            if (expanded && this.parsingContext.strictValues && !expanded.startsWith('@')) {\n                this.parsingContext.emitError(new Error(`Invalid term IRI: ${expanded}`));\n            }\n            else {\n                return null;\n            }\n        }\n        return this.dataFactory.namedNode(expanded);\n    }\n    /**\n     * Ensure that the given value becomes a string.\n     * @param {string | number} value A string or number.\n     * @param {NamedNode} datatype The intended datatype.\n     * @return {string} The returned string.\n     */\n    intToString(value, datatype) {\n        if (typeof value === 'number') {\n            if (Number.isFinite(value)) {\n                const isInteger = value % 1 === 0;\n                if (isInteger && (!datatype || datatype.value !== Util.XSD_DOUBLE)) {\n                    return Number(value).toString();\n                }\n                else {\n                    return value.toExponential(15).replace(/(\\d)0*e\\+?/, '$1E');\n                }\n            }\n            else {\n                return value > 0 ? 'INF' : '-INF';\n            }\n        }\n        else {\n            return value;\n        }\n    }\n    /**\n     * Convert a given JSON string value to an RDF term.\n     * @param {number} depth The current stack depth.\n     * @param {JsonLdContextNormalized} context A JSON-LD context.\n     * @param {string} key The current JSON key.\n     * @param {string} value A JSON value.\n     * @param {NamedNode} defaultDatatype The default datatype for the given value.\n     * @return {RDF.Term} An RDF term or null.\n     */\n    stringValueToTerm(depth, context, key, value, defaultDatatype) {\n        // Check the datatype from the context\n        const contextType = Util.getContextValueType(context, key);\n        if (contextType) {\n            if (contextType === '@id') {\n                if (!defaultDatatype) {\n                    return this.resourceToTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else if (contextType === '@vocab') {\n                if (!defaultDatatype) {\n                    return this.createVocabOrBaseTerm(context, this.intToString(value, defaultDatatype));\n                }\n            }\n            else {\n                defaultDatatype = this.dataFactory.namedNode(contextType);\n            }\n        }\n        // If we don't find such a datatype, check the language from the context\n        if (!defaultDatatype) {\n            const contextLanguage = Util.getContextValueLanguage(context, key);\n            const contextDirection = Util.getContextValueDirection(context, key);\n            if (contextDirection) {\n                return this.createLanguageDirectionLiteral(depth, this.intToString(value, defaultDatatype), contextLanguage, contextDirection);\n            }\n            else {\n                return this.dataFactory.literal(this.intToString(value, defaultDatatype), contextLanguage);\n            }\n        }\n        // If all else fails, make a literal based on the default content type\n        return this.dataFactory.literal(this.intToString(value, defaultDatatype), defaultDatatype);\n    }\n    /**\n     * Create a literal for the given value with the given language and direction.\n     * Auxiliary quads may be emitted.\n     * @param {number} depth The current stack depth.\n     * @param {string} value A string value.\n     * @param {string} language A language tag.\n     * @param {string} direction A direction.\n     * @return {Term} An RDF term.\n     */\n    createLanguageDirectionLiteral(depth, value, language, direction) {\n        if (this.parsingContext.rdfDirection === 'i18n-datatype') {\n            // Create a datatyped literal, by encoding the language and direction into https://www.w3.org/ns/i18n#.\n            if (!language) {\n                language = '';\n            }\n            return this.dataFactory.literal(value, this.dataFactory.namedNode(`https://www.w3.org/ns/i18n#${language}_${direction}`));\n        }\n        else if (this.parsingContext.rdfDirection === 'compound-literal') {\n            // Reify the literal.\n            const valueNode = this.dataFactory.blankNode();\n            const graph = this.getDefaultGraph();\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'value'), this.dataFactory.literal(value), graph));\n            if (language) {\n                this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'language'), this.dataFactory.literal(language), graph));\n            }\n            this.parsingContext.emitQuad(depth, this.dataFactory.quad(valueNode, this.dataFactory.namedNode(Util.RDF + 'direction'), this.dataFactory.literal(direction), graph));\n            return valueNode;\n        }\n        else {\n            return this.dataFactory.literal(value, { language: language || '', direction: direction });\n        }\n    }\n    /**\n     * Stringify the given JSON object to a canonical JSON string.\n     * @param value Any valid JSON value.\n     * @return {string} A canonical JSON string.\n     */\n    valueToJsonString(value) {\n        return canonicalizeJson(value);\n    }\n    /**\n     * If the key is not a keyword, try to check if it is an alias for a keyword,\n     * and if so, un-alias it.\n     * @param {string} key A key, can be falsy.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth to\n     * @param {boolean} disableCache If the cache should be disabled\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<string>} A promise resolving to the key itself, or another key.\n     */\n    async unaliasKeyword(key, keys, depth, disableCache, context) {\n        // Numbers can not be an alias\n        if (Number.isInteger(key)) {\n            return key;\n        }\n        // Try to grab from cache if it was already un-aliased before.\n        if (!disableCache) {\n            const cachedUnaliasedKeyword = this.parsingContext.unaliasedKeywordCacheStack[depth];\n            if (cachedUnaliasedKeyword) {\n                return cachedUnaliasedKeyword;\n            }\n        }\n        if (!jsonld_context_parser_1.Util.isPotentialKeyword(key)) {\n            context = context || await this.parsingContext.getContext(keys);\n            let unliased = context.getContextRaw()[key];\n            if (unliased && typeof unliased === 'object') {\n                unliased = unliased['@id'];\n            }\n            if (jsonld_context_parser_1.Util.isValidKeyword(unliased)) {\n                key = unliased;\n            }\n        }\n        return disableCache ? key : (this.parsingContext.unaliasedKeywordCacheStack[depth] = key);\n    }\n    /**\n     * Unalias the keyword of the parent.\n     * This adds a safety check if no parent exist.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @return {Promise<any>} A promise resolving to the parent key, or another key.\n     */\n    async unaliasKeywordParent(keys, depth) {\n        return await this.unaliasKeyword(depth > 0 && keys[depth - 1], keys, depth - 1);\n    }\n    /**\n     * Un-alias all keywords in the given hash.\n     * @param {{[p: string]: any}} hash A hash object.\n     * @param {string[]} keys The path of keys.\n     * @param {number} depth The depth.\n     * @param {JsonLdContextNormalized} context A context to unalias with,\n     *                                           will fallback to retrieving the context for the given keys.\n     * @return {Promise<{[p: string]: any}>} A promise resolving to the new hash.\n     */\n    async unaliasKeywords(hash, keys, depth, context) {\n        const newHash = {};\n        for (const key in hash) {\n            newHash[await this.unaliasKeyword(key, keys, depth + 1, true, context)] = hash[key];\n        }\n        return newHash;\n    }\n    /**\n     * Check if we are processing a literal (including JSON literals) at the given depth.\n     * This will also check higher levels,\n     * because if a parent is a literal,\n     * then the deeper levels are definitely a literal as well.\n     * @param {any[]} keys The keys.\n     * @param {number} depth The depth.\n     * @return {boolean} If we are processing a literal.\n     */\n    async isLiteral(keys, depth) {\n        for (let i = depth; i >= 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@annotation') {\n                // Literals may have annotations, which require processing of inner nodes.\n                return false;\n            }\n            if (this.parsingContext.literalStack[i] || this.parsingContext.jsonLiteralStack[i]) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Check how many parents should be skipped for checking the @graph for the given node.\n     *\n     * @param {number} depth The depth of the node.\n     * @param {any[]} keys An array of keys.\n     * @return {number} The graph depth offset.\n     */\n    async getDepthOffsetGraph(depth, keys) {\n        for (let i = depth - 1; i > 0; i--) {\n            if (await this.unaliasKeyword(keys[i], keys, i) === '@graph') {\n                // Skip further processing if we are already in an @graph-@id or @graph-@index container\n                const containers = (await EntryHandlerContainer_1.EntryHandlerContainer.getContainerHandler(this.parsingContext, keys, i)).containers;\n                if (EntryHandlerContainer_1.EntryHandlerContainer.isComplexGraphContainer(containers)) {\n                    return -1;\n                }\n                return depth - i - 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Check if the given subject is of a valid type.\n     * This should be called when applying @reverse'd properties.\n     * @param {Term} subject A subject.\n     */\n    validateReverseSubject(subject) {\n        if (subject.termType === 'Literal') {\n            throw new jsonld_context_parser_1.ErrorCoded(`Found illegal literal in subject position: ${subject.value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n        }\n    }\n    /**\n     * Get the default graph.\n     * @return {Term} An RDF term.\n     */\n    getDefaultGraph() {\n        return this.parsingContext.defaultGraph || this.dataFactory.defaultGraph();\n    }\n    /**\n     * Get the current graph, while taking into account a graph that can be defined via @container: @graph.\n     * If not within a graph container, the default graph will be returned.\n     * @param keys The current keys.\n     * @param depth The current depth.\n     */\n    async getGraphContainerValue(keys, depth) {\n        // Default to default graph\n        let graph = this.getDefaultGraph();\n        // Check if we are in an @container: @graph.\n        const { containers, depth: depthContainer } = await EntryHandlerContainer_1.EntryHandlerContainer\n            .getContainerHandler(this.parsingContext, keys, depth);\n        if ('@graph' in containers) {\n            // Get the graph from the stack.\n            const graphContainerIndex = EntryHandlerContainer_1.EntryHandlerContainer.getContainerGraphIndex(containers, depthContainer, keys);\n            const entry = this.parsingContext.graphContainerTermStack[depthContainer];\n            graph = entry ? entry[graphContainerIndex] : null;\n            // Set the graph in the stack if none has been set yet.\n            if (!graph) {\n                let graphId = null;\n                if ('@id' in containers) {\n                    const keyUnaliased = await this.getContainerKey(keys[depthContainer], keys, depthContainer);\n                    if (keyUnaliased !== null) {\n                        graphId = await this.resourceToTerm(await this.parsingContext.getContext(keys), keyUnaliased);\n                    }\n                }\n                if (!graphId) {\n                    graphId = this.dataFactory.blankNode();\n                }\n                if (!this.parsingContext.graphContainerTermStack[depthContainer]) {\n                    this.parsingContext.graphContainerTermStack[depthContainer] = {};\n                }\n                graph = this.parsingContext.graphContainerTermStack[depthContainer][graphContainerIndex] = graphId;\n            }\n        }\n        return graph;\n    }\n    /**\n     * Get the properties depth for retrieving properties.\n     *\n     * Typically, the properties depth will be identical to the given depth.\n     *\n     * The following exceptions apply:\n     * * When the parent is @reverse, the depth is decremented by one.\n     * * When @nest parents are found, the depth is decremented by the number of @nest parents.\n     * If in combination with the exceptions above an intermediary array is discovered,\n     * the depth is also decremented by this number of arrays.\n     *\n     * @param keys The current key chain.\n     * @param depth The current depth.\n     */\n    async getPropertiesDepth(keys, depth) {\n        let lastValidDepth = depth;\n        for (let i = depth - 1; i > 0; i--) {\n            if (typeof keys[i] !== 'number') { // Skip array keys\n                const parentKey = await this.unaliasKeyword(keys[i], keys, i);\n                if (parentKey === '@reverse') {\n                    return i;\n                }\n                else if (parentKey === '@nest') {\n                    lastValidDepth = i;\n                }\n                else {\n                    return lastValidDepth;\n                }\n            }\n        }\n        return lastValidDepth;\n    }\n    /**\n     * Get the key for the current container entry.\n     * @param key A key, can be falsy.\n     * @param keys The key chain.\n     * @param depth The current depth to get the key from.\n     * @return Promise resolving to the key.\n     *         Null will be returned for @none entries, with aliasing taken into account.\n     */\n    async getContainerKey(key, keys, depth) {\n        const keyUnaliased = await this.unaliasKeyword(key, keys, depth);\n        return keyUnaliased === '@none' ? null : keyUnaliased;\n    }\n    /**\n     * Check if no reverse properties are present in embedded nodes.\n     * @param key The current key.\n     * @param reverse If a reverse property is active.\n     * @param isEmbedded If we're in an embedded node.\n     */\n    validateReverseInEmbeddedNode(key, reverse, isEmbedded) {\n        if (isEmbedded && reverse && !this.parsingContext.rdfstarReverseInEmbedded) {\n            throw new jsonld_context_parser_1.ErrorCoded(`Illegal reverse property in embedded node in ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE);\n        }\n    }\n    /**\n     * Emit a quad, with checks.\n     * @param depth The current depth.\n     * @param subject S\n     * @param predicate P\n     * @param object O\n     * @param graph G\n     * @param reverse If a reverse property is active.\n     * @param isEmbedded If we're in an embedded node.\n     */\n    emitQuadChecked(depth, subject, predicate, object, graph, reverse, isEmbedded) {\n        // Create a quad\n        let quad;\n        if (reverse) {\n            this.validateReverseSubject(object);\n            quad = this.dataFactory.quad(object, predicate, subject, graph);\n        }\n        else {\n            quad = this.dataFactory.quad(subject, predicate, object, graph);\n        }\n        // Emit the quad, unless it was created in an embedded node\n        if (isEmbedded) {\n            // Embedded nodes don't inherit the active graph\n            if (quad.graph.termType !== 'DefaultGraph') {\n                quad = this.dataFactory.quad(quad.subject, quad.predicate, quad.object);\n            }\n            // Multiple embedded nodes are not allowed\n            if (this.parsingContext.idStack[depth - 1]) {\n                throw new jsonld_context_parser_1.ErrorCoded(`Illegal multiple properties in an embedded node`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE);\n            }\n            this.parsingContext.idStack[depth - 1] = [quad];\n        }\n        else {\n            this.parsingContext.emitQuad(depth, quad);\n        }\n        // Flush annotations\n        const annotationsBuffer = this.parsingContext.annotationsBuffer[depth];\n        if (annotationsBuffer) {\n            for (const annotation of annotationsBuffer) {\n                this.emitAnnotation(depth, quad, annotation);\n            }\n            delete this.parsingContext.annotationsBuffer[depth];\n        }\n    }\n    // This is a separate function to enable recursion\n    emitAnnotation(depth, quad, annotation) {\n        // Construct annotation quad\n        let annotationQuad;\n        if (annotation.reverse) {\n            this.validateReverseSubject(annotation.object);\n            annotationQuad = this.dataFactory.quad(annotation.object, annotation.predicate, quad);\n        }\n        else {\n            annotationQuad = this.dataFactory.quad(quad, annotation.predicate, annotation.object);\n        }\n        // Emit annotated quad\n        this.parsingContext.emitQuad(depth, annotationQuad);\n        // Also emit nested annotations\n        for (const nestedAnnotation of annotation.nestedAnnotations) {\n            this.emitAnnotation(depth, annotationQuad, nestedAnnotation);\n        }\n    }\n}\nexports.Util = Util;\nUtil.XSD = 'http://www.w3.org/2001/XMLSchema#';\nUtil.XSD_BOOLEAN = Util.XSD + 'boolean';\nUtil.XSD_INTEGER = Util.XSD + 'integer';\nUtil.XSD_DOUBLE = Util.XSD + 'double';\nUtil.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\n//# sourceMappingURL=Util.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerPredicate = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst Util_1 = require(\"../Util\");\n/**\n * Interprets keys as predicates.\n * The most common case in JSON-LD processing.\n */\nclass EntryHandlerPredicate {\n    /**\n     * Handle the given predicate-object by either emitting it,\n     * or by placing it in the appropriate stack for later emission when no @graph and/or @id has been defined.\n     * @param {ParsingContext} parsingContext A parsing context.\n     * @param {Util} util A utility instance.\n     * @param {any[]} keys A stack of keys.\n     * @param {number} depth The current depth.\n     * @param {Term} predicate The predicate.\n     * @param {Term} object The object.\n     * @param {boolean} reverse If the property is reversed.\n     * @param {boolean} isEmbedded If the property exists in an embedded node as direct child.\n     * @param {boolean} isAnnotation If the property exists in an annotation object.\n     * @return {Promise<void>} A promise resolving when handling is done.\n     */\n    static async handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse, isEmbedded, isAnnotation) {\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        const depthOffsetGraph = await util.getDepthOffsetGraph(depth, keys);\n        const depthPropertiesGraph = depth - depthOffsetGraph;\n        const subjects = parsingContext.idStack[depthProperties];\n        if (subjects && !isAnnotation) {\n            // Emit directly if the @id was already defined\n            for (const subject of subjects) {\n                // Check if we're in a @graph context\n                const atGraph = depthOffsetGraph >= 0;\n                if (atGraph) {\n                    const graphs = parsingContext.idStack[depthPropertiesGraph - 1];\n                    if (graphs) {\n                        for (const graph of graphs) {\n                            // Emit our quad if graph @id is known\n                            util.emitQuadChecked(depth, subject, predicate, object, graph, reverse, isEmbedded);\n                        }\n                    }\n                    else {\n                        // Buffer our triple if graph @id is not known yet.\n                        if (reverse) {\n                            util.validateReverseSubject(object);\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1).push({ subject: object, predicate, object: subject, isEmbedded });\n                        }\n                        else {\n                            parsingContext.getUnidentifiedGraphBufferSafe(depthPropertiesGraph - 1)\n                                .push({ subject, predicate, object, isEmbedded });\n                        }\n                    }\n                }\n                else {\n                    // Emit if no @graph was applicable\n                    const graph = await util.getGraphContainerValue(keys, depthProperties);\n                    util.emitQuadChecked(depth, subject, predicate, object, graph, reverse, isEmbedded);\n                }\n            }\n        }\n        else {\n            // Buffer until our @id becomes known, or we go up the stack\n            if (reverse) {\n                util.validateReverseSubject(object);\n            }\n            // Either push to the annotations or the actual value buffer\n            if (isAnnotation) {\n                // Only add to buffer if rdfstar is enabled\n                if (parsingContext.rdfstar) {\n                    // Error if an @id was defined\n                    if (parsingContext.idStack[depth]) {\n                        parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @id inside an annotation: ${parsingContext.idStack[depth][0].value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n                    }\n                    // Error if we're in an embedded node\n                    for (let i = 0; i < depth; i++) {\n                        if (await util.unaliasKeyword(keys[i], keys, i) === '@id') {\n                            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal annotation inside an embedded node`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n                        }\n                    }\n                    // Store new annotation in the buffer\n                    const annotationsBuffer = parsingContext.getAnnotationsBufferSafe(depthProperties);\n                    const newAnnotation = { predicate, object, reverse, nestedAnnotations: [], depth: depthProperties };\n                    annotationsBuffer.push(newAnnotation);\n                    // Check in the buffer if any annotations were defined at a deeper depth,\n                    // if so, they are considered nested annotations.\n                    for (let i = annotationsBuffer.length - 2; i >= 0; i--) {\n                        // We iterate in reverse order, to enable easy item removal from the back.\n                        const existingAnnotation = annotationsBuffer[i];\n                        if (existingAnnotation.depth > depthProperties) {\n                            newAnnotation.nestedAnnotations.push(existingAnnotation);\n                            annotationsBuffer.splice(i, 1);\n                        }\n                    }\n                }\n            }\n            else {\n                parsingContext.getUnidentifiedValueBufferSafe(depthProperties).push({ predicate, object, reverse, isEmbedded });\n            }\n        }\n    }\n    isPropertyHandler() {\n        return true;\n    }\n    isStackProcessor() {\n        return true;\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        const key = keys[depth];\n        if (key) {\n            const context = await parsingContext.getContext(keys);\n            if (!parsingContext.jsonLiteralStack[depth] && await util.predicateToTerm(context, keys[depth])) {\n                // If this valid predicate is of type @json, mark it so in the stack so that no deeper handling of nodes occurs.\n                if (Util_1.Util.getContextValueType(context, key) === '@json') {\n                    parsingContext.jsonLiteralStack[depth + 1] = true;\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return keys[depth];\n    }\n    async handle(parsingContext, util, key, keys, value, depth, testResult) {\n        const keyOriginal = keys[depth];\n        const context = await parsingContext.getContext(keys);\n        const predicate = await util.predicateToTerm(context, key);\n        if (predicate) {\n            const objects = await util.valueToTerm(context, key, value, depth, keys);\n            if (objects.length) {\n                for (let object of objects) {\n                    // Based on parent key, check if reverse, embedded, and annotation.\n                    let parentKey = await util.unaliasKeywordParent(keys, depth);\n                    const reverse = Util_1.Util.isPropertyReverse(context, keyOriginal, parentKey);\n                    let parentDepthOffset = 0;\n                    while (parentKey === '@reverse' || typeof parentKey === 'number') {\n                        // Check parent of parent when checking while we're in an array or in @reverse\n                        if (typeof parentKey === 'number') {\n                            parentDepthOffset++;\n                        }\n                        else {\n                            depth--;\n                        }\n                        parentKey = await util.unaliasKeywordParent(keys, depth - parentDepthOffset);\n                    }\n                    const isEmbedded = Util_1.Util.isPropertyInEmbeddedNode(parentKey);\n                    util.validateReverseInEmbeddedNode(key, reverse, isEmbedded);\n                    const isAnnotation = Util_1.Util.isPropertyInAnnotationObject(parentKey);\n                    if (value) {\n                        // Special case if our term was defined as an @list, but does not occur in an array,\n                        // In that case we just emit it as an RDF list with a single element.\n                        const listValueContainer = '@list' in Util_1.Util.getContextValueContainer(context, key);\n                        if (listValueContainer || value['@list']) {\n                            if (((listValueContainer && !Array.isArray(value) && !value['@list'])\n                                || (value['@list'] && !Array.isArray(value['@list'])))\n                                && object !== util.rdfNil) {\n                                const listPointer = util.dataFactory.blankNode();\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfRest, util.rdfNil, util.getDefaultGraph()));\n                                parsingContext.emitQuad(depth, util.dataFactory.quad(listPointer, util.rdfFirst, object, util.getDefaultGraph()));\n                                object = listPointer;\n                            }\n                            // Lists are not allowed in @reverse'd properties\n                            if (reverse && !parsingContext.allowSubjectList) {\n                                throw new jsonld_context_parser_1.ErrorCoded(`Found illegal list value in subject position at ${key}`, jsonld_context_parser_1.ERROR_CODES.INVALID_REVERSE_PROPERTY_VALUE);\n                            }\n                        }\n                    }\n                    await EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth, predicate, object, reverse, isEmbedded, isAnnotation);\n                }\n            }\n        }\n    }\n}\nexports.EntryHandlerPredicate = EntryHandlerPredicate;\n//# sourceMappingURL=EntryHandlerPredicate.js.map","\"use strict\";\n// tslint:disable:max-line-length\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=JsonLdContext.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedNode = void 0;\n/**\n * A term that contains an IRI.\n */\nclass NamedNode {\n    constructor(value) {\n        this.termType = 'NamedNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'NamedNode' && other.value === this.value;\n    }\n}\nexports.NamedNode = NamedNode;\n//# sourceMappingURL=NamedNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordId = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @id entries.\n */\nclass EntryHandlerKeywordId extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@id');\n    }\n    isStackProcessor() {\n        return false;\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        if (typeof value !== 'string') {\n            // JSON-LD-star allows @id object values\n            if (parsingContext.rdfstar && typeof value === 'object') {\n                const valueKeys = Object.keys(value);\n                if (valueKeys.length === 1 && valueKeys[0] === '@id') {\n                    parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Invalid embedded node without property with @id ${value['@id']}`, jsonld_context_parser_1.ERROR_CODES.INVALID_EMBEDDED_NODE));\n                }\n            }\n            else {\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal @id '${value}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_ID_VALUE));\n            }\n            return;\n        }\n        // Determine the canonical place for this id.\n        // For example, @nest parents should be ignored.\n        const depthProperties = await util.getPropertiesDepth(keys, depth);\n        // Error if an @id for this node already existed.\n        if (parsingContext.idStack[depthProperties] !== undefined) {\n            if (parsingContext.idStack[depthProperties][0].listHead) {\n                // Error if an @list was already defined for this node\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal neighbouring entries next to @list for key: '${keys[depth - 1]}'`, jsonld_context_parser_1.ERROR_CODES.INVALID_SET_OR_LIST_OBJECT));\n            }\n            else {\n                // Otherwise, the previous id was just because of an @id entry.\n                parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found duplicate @ids '${parsingContext\n                    .idStack[depthProperties][0].value}' and '${value}'`, jsonld_context_parser_1.ERROR_CODES.COLLIDING_KEYWORDS));\n            }\n        }\n        // Error if an annotation was defined\n        if (parsingContext.rdfstar && parsingContext.annotationsBuffer[depth]) {\n            for (const annotation of parsingContext.annotationsBuffer[depth]) {\n                if (annotation.depth === depth) {\n                    parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found an illegal @id inside an annotation: ${value}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n                }\n            }\n        }\n        // Save our @id on the stack\n        parsingContext.idStack[depthProperties] = util.nullableTermToArray(await util.resourceToTerm(await parsingContext.getContext(keys), value));\n    }\n}\nexports.EntryHandlerKeywordId = EntryHandlerKeywordId;\n//# sourceMappingURL=EntryHandlerKeywordId.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerLanguage = void 0;\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Container handler for @language.\n *\n * It assumes that the current key is the language of the current value.\n * This will add this value to the parent node.\n */\nclass ContainerHandlerLanguage {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        const language = await util.getContainerKey(keys[depth], keys, depth);\n        if (Array.isArray(value)) {\n            // No type-checking needed, will be handled on each value when this handler is called recursively.\n            value = value.map((subValue) => ({ '@value': subValue, '@language': language }));\n        }\n        else {\n            if (typeof value !== 'string') {\n                throw new jsonld_context_parser_1.ErrorCoded(`Got invalid language map value, got '${JSON.stringify(value)}', but expected string`, jsonld_context_parser_1.ERROR_CODES.INVALID_LANGUAGE_MAP_VALUE);\n            }\n            value = { '@value': value, '@language': language };\n        }\n        await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n        parsingContext.emittedStack[depth] = false; // We have emitted a level higher\n    }\n}\nexports.ContainerHandlerLanguage = ContainerHandlerLanguage;\n//# sourceMappingURL=ContainerHandlerLanguage.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordValue = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @value entries.\n */\nclass EntryHandlerKeywordValue extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@value');\n    }\n    async validate(parsingContext, util, keys, depth, inProperty) {\n        // If this is @value, mark it so in the stack so that no deeper handling of nodes occurs.\n        const key = keys[depth];\n        if (key && !parsingContext.literalStack[depth] && await this.test(parsingContext, util, key, keys, depth)) {\n            parsingContext.literalStack[depth] = true;\n        }\n        return super.validate(parsingContext, util, keys, depth, inProperty);\n    }\n    async test(parsingContext, util, key, keys, depth) {\n        return await util.unaliasKeyword(keys[depth], keys.slice(0, keys.length - 1), depth - 1, true) === '@value';\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // If the value is valid, indicate that we are processing a literal.\n        // The actual value will be determined at the parent level when the @value is part of an object,\n        // because we may want to take into account additional entries such as @language.\n        // See {@link Util.valueToTerm}\n        // Indicate that we are processing a literal, and that no later predicates should be parsed at this depth.\n        parsingContext.literalStack[depth] = true;\n        // Void any buffers that we may have accumulated up until now\n        delete parsingContext.unidentifiedValuesBuffer[depth];\n        delete parsingContext.unidentifiedGraphsBuffer[depth];\n        // Indicate that we have not emitted at this depth\n        parsingContext.emittedStack[depth] = false;\n    }\n}\nexports.EntryHandlerKeywordValue = EntryHandlerKeywordValue;\n//# sourceMappingURL=EntryHandlerKeywordValue.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERROR_CODES = exports.ErrorCoded = void 0;\n/**\n * An error that has a certain error code.\n *\n * The error code can be any string.\n * All standardized error codes are listed in {@link ERROR_CODES}.\n */\nclass ErrorCoded extends Error {\n    /* istanbul ignore next */\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nexports.ErrorCoded = ErrorCoded;\n/**\n * All standardized JSON-LD error codes.\n * @see https://w3c.github.io/json-ld-api/#dom-jsonlderrorcode\n */\n// tslint:disable:object-literal-sort-keys\nvar ERROR_CODES;\n(function (ERROR_CODES) {\n    ERROR_CODES[\"COLLIDING_KEYWORDS\"] = \"colliding keywords\";\n    ERROR_CODES[\"CONFLICTING_INDEXES\"] = \"conflicting indexes\";\n    ERROR_CODES[\"CYCLIC_IRI_MAPPING\"] = \"cyclic IRI mapping\";\n    ERROR_CODES[\"INVALID_ID_VALUE\"] = \"invalid @id value\";\n    ERROR_CODES[\"INVALID_INDEX_VALUE\"] = \"invalid @index value\";\n    ERROR_CODES[\"INVALID_NEST_VALUE\"] = \"invalid @nest value\";\n    ERROR_CODES[\"INVALID_PREFIX_VALUE\"] = \"invalid @prefix value\";\n    ERROR_CODES[\"INVALID_PROPAGATE_VALUE\"] = \"invalid @propagate value\";\n    ERROR_CODES[\"INVALID_REVERSE_VALUE\"] = \"invalid @reverse value\";\n    ERROR_CODES[\"INVALID_IMPORT_VALUE\"] = \"invalid @import value\";\n    ERROR_CODES[\"INVALID_VERSION_VALUE\"] = \"invalid @version value\";\n    ERROR_CODES[\"INVALID_BASE_IRI\"] = \"invalid base IRI\";\n    ERROR_CODES[\"INVALID_CONTAINER_MAPPING\"] = \"invalid container mapping\";\n    ERROR_CODES[\"INVALID_CONTEXT_ENTRY\"] = \"invalid context entry\";\n    ERROR_CODES[\"INVALID_CONTEXT_NULLIFICATION\"] = \"invalid context nullification\";\n    ERROR_CODES[\"INVALID_DEFAULT_LANGUAGE\"] = \"invalid default language\";\n    ERROR_CODES[\"INVALID_INCLUDED_VALUE\"] = \"invalid @included value\";\n    ERROR_CODES[\"INVALID_IRI_MAPPING\"] = \"invalid IRI mapping\";\n    ERROR_CODES[\"INVALID_JSON_LITERAL\"] = \"invalid JSON literal\";\n    ERROR_CODES[\"INVALID_KEYWORD_ALIAS\"] = \"invalid keyword alias\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAP_VALUE\"] = \"invalid language map value\";\n    ERROR_CODES[\"INVALID_LANGUAGE_MAPPING\"] = \"invalid language mapping\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_STRING\"] = \"invalid language-tagged string\";\n    ERROR_CODES[\"INVALID_LANGUAGE_TAGGED_VALUE\"] = \"invalid language-tagged value\";\n    ERROR_CODES[\"INVALID_LOCAL_CONTEXT\"] = \"invalid local context\";\n    ERROR_CODES[\"INVALID_REMOTE_CONTEXT\"] = \"invalid remote context\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY\"] = \"invalid reverse property\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_MAP\"] = \"invalid reverse property map\";\n    ERROR_CODES[\"INVALID_REVERSE_PROPERTY_VALUE\"] = \"invalid reverse property value\";\n    ERROR_CODES[\"INVALID_SCOPED_CONTEXT\"] = \"invalid scoped context\";\n    ERROR_CODES[\"INVALID_SCRIPT_ELEMENT\"] = \"invalid script element\";\n    ERROR_CODES[\"INVALID_SET_OR_LIST_OBJECT\"] = \"invalid set or list object\";\n    ERROR_CODES[\"INVALID_TERM_DEFINITION\"] = \"invalid term definition\";\n    ERROR_CODES[\"INVALID_TYPE_MAPPING\"] = \"invalid type mapping\";\n    ERROR_CODES[\"INVALID_TYPE_VALUE\"] = \"invalid type value\";\n    ERROR_CODES[\"INVALID_TYPED_VALUE\"] = \"invalid typed value\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT\"] = \"invalid value object\";\n    ERROR_CODES[\"INVALID_VALUE_OBJECT_VALUE\"] = \"invalid value object value\";\n    ERROR_CODES[\"INVALID_VOCAB_MAPPING\"] = \"invalid vocab mapping\";\n    ERROR_CODES[\"IRI_CONFUSED_WITH_PREFIX\"] = \"IRI confused with prefix\";\n    ERROR_CODES[\"KEYWORD_REDEFINITION\"] = \"keyword redefinition\";\n    ERROR_CODES[\"LOADING_DOCUMENT_FAILED\"] = \"loading document failed\";\n    ERROR_CODES[\"LOADING_REMOTE_CONTEXT_FAILED\"] = \"loading remote context failed\";\n    ERROR_CODES[\"MULTIPLE_CONTEXT_LINK_HEADERS\"] = \"multiple context link headers\";\n    ERROR_CODES[\"PROCESSING_MODE_CONFLICT\"] = \"processing mode conflict\";\n    ERROR_CODES[\"PROTECTED_TERM_REDEFINITION\"] = \"protected term redefinition\";\n    ERROR_CODES[\"CONTEXT_OVERFLOW\"] = \"context overflow\";\n    ERROR_CODES[\"INVALID_BASE_DIRECTION\"] = \"invalid base direction\";\n    ERROR_CODES[\"RECURSIVE_CONTEXT_INCLUSION\"] = \"recursive context inclusion\";\n    ERROR_CODES[\"INVALID_STREAMING_KEY_ORDER\"] = \"invalid streaming key order\";\n    /**\n     * JSON-LD-star\n     */\n    ERROR_CODES[\"INVALID_EMBEDDED_NODE\"] = \"invalid embedded node\";\n    ERROR_CODES[\"INVALID_ANNOTATION\"] = \"invalid annotation\";\n})(ERROR_CODES = exports.ERROR_CODES || (exports.ERROR_CODES = {}));\n//# sourceMappingURL=ErrorCoded.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContainerHandlerType = void 0;\nconst EntryHandlerPredicate_1 = require(\"../entryhandler/EntryHandlerPredicate\");\nconst Util_1 = require(\"../Util\");\n/**\n * Container handler for @type.\n *\n * This will add this entry to the parent node, and use the current key as an rdf:type value.\n */\nclass ContainerHandlerType {\n    canCombineWithGraph() {\n        return false;\n    }\n    async handle(containers, parsingContext, util, keys, value, depth) {\n        if (!Array.isArray(value)) {\n            if (typeof value === 'string') {\n                // Determine the @type of the container\n                const context = await parsingContext.getContext(keys);\n                const containerTypeType = Util_1.Util.getContextValueType(context, keys[depth - 1]);\n                // String values refer to node references\n                const id = containerTypeType === '@vocab'\n                    ? await util.createVocabOrBaseTerm(context, value)\n                    : await util.resourceToTerm(context, value);\n                if (id) {\n                    // Handle the value of this node as @id, which will also cause the predicate from above to be emitted.\n                    const subValue = { '@id': id.termType === 'NamedNode' ? id.value : value };\n                    await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), subValue, depth - 1, true);\n                    // Set the id in the stack so it can be used for the rdf:type handling later on\n                    parsingContext.idStack[depth + 1] = [id];\n                }\n            }\n            else {\n                // Other values are handled by handling them as a proper job\n                // Check needed for cases where entries don't have an explicit @id\n                const entryHasIdentifier = !!parsingContext.idStack[depth + 1];\n                // Handle the value of this node, which will also cause the predicate from above to be emitted.\n                if (!entryHasIdentifier) {\n                    delete parsingContext.idStack[depth]; // Force new (blank node) identifier\n                }\n                await parsingContext.newOnValueJob(keys.slice(0, keys.length - 1), value, depth - 1, true);\n                if (!entryHasIdentifier) {\n                    parsingContext.idStack[depth + 1] = parsingContext.idStack[depth]; // Copy the id to the child node, for @type\n                }\n            }\n            // Identify the type to emit.\n            const keyOriginal = await util.getContainerKey(keys[depth], keys, depth);\n            const type = keyOriginal !== null\n                ? util.createVocabOrBaseTerm(await parsingContext.getContext(keys), keyOriginal)\n                : null;\n            if (type) {\n                // Push the type to the stack using the rdf:type predicate\n                await EntryHandlerPredicate_1.EntryHandlerPredicate.handlePredicateObject(parsingContext, util, keys, depth + 1, util.rdfType, type, false, false, false);\n            }\n            // Flush any pending flush buffers\n            await parsingContext.handlePendingContainerFlushBuffers();\n        }\n        parsingContext.emittedStack[depth] = false; // Don't emit the predicate owning this container.\n    }\n}\nexports.ContainerHandlerType = ContainerHandlerType;\n//# sourceMappingURL=ContainerHandlerType.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Variable = void 0;\n/**\n * A term that represents a variable.\n */\nclass Variable {\n    constructor(value) {\n        this.termType = 'Variable';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'Variable' && other.value === this.value;\n    }\n}\nexports.Variable = Variable;\n//# sourceMappingURL=Variable.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordAnnotation = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\nconst jsonld_context_parser_1 = require(\"jsonld-context-parser\");\n/**\n * Handles @annotation entries.\n */\nclass EntryHandlerKeywordAnnotation extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@annotation');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // Validate value\n        if (typeof value === 'string' || (typeof value === 'object' && value['@value'])) {\n            parsingContext.emitError(new jsonld_context_parser_1.ErrorCoded(`Found illegal annotation value: ${JSON.stringify(value)}`, jsonld_context_parser_1.ERROR_CODES.INVALID_ANNOTATION));\n        }\n        // Rest of the processing is done as regular nodes\n    }\n}\nexports.EntryHandlerKeywordAnnotation = EntryHandlerKeywordAnnotation;\n//# sourceMappingURL=EntryHandlerKeywordAnnotation.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryHandlerKeywordGraph = void 0;\nconst EntryHandlerKeyword_1 = require(\"./EntryHandlerKeyword\");\n/**\n * Handles @graph entries.\n */\nclass EntryHandlerKeywordGraph extends EntryHandlerKeyword_1.EntryHandlerKeyword {\n    constructor() {\n        super('@graph');\n    }\n    async handle(parsingContext, util, key, keys, value, depth) {\n        // The current identifier identifies a graph for the deeper level.\n        parsingContext.graphStack[depth + 1] = true;\n    }\n}\nexports.EntryHandlerKeywordGraph = EntryHandlerKeywordGraph;\n//# sourceMappingURL=EntryHandlerKeywordGraph.js.map","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, { ...this.options, ...options })\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', err => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nexport default Sink\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/BlankNode\"), exports);\n__exportStar(require(\"./lib/DataFactory\"), exports);\n__exportStar(require(\"./lib/DefaultGraph\"), exports);\n__exportStar(require(\"./lib/Literal\"), exports);\n__exportStar(require(\"./lib/NamedNode\"), exports);\n__exportStar(require(\"./lib/Quad\"), exports);\n__exportStar(require(\"./lib/Variable\"), exports);\n//# sourceMappingURL=index.js.map","import rdf from '@rdfjs/data-model'\nimport toReadable from 'duplex-to/readable.js'\nimport { JsonLdParser } from 'jsonld-streaming-parser'\nimport { Transform } from 'readable-stream'\n\nconst relativeIriProtocol = 'null:'\n\nfunction termCleanup (factory) {\n  return term => {\n    if (term.termType !== 'NamedNode') {\n      return null\n    }\n\n    if (!term.value.startsWith(relativeIriProtocol)) {\n      return null\n    }\n\n    // remove dummy protocol workaround for relative IRIs\n    return factory.namedNode(term.value.slice(relativeIriProtocol.length))\n  }\n}\n\nfunction quadCleanup (factory) {\n  const cleanup = termCleanup(factory)\n\n  return quad => {\n    const subject = cleanup(quad.subject)\n    const predicate = cleanup(quad.predicate)\n    const object = cleanup(quad.object)\n    const graph = cleanup(quad.graph)\n\n    if (subject || predicate || object || graph) {\n      return factory.quad(\n        subject || quad.subject,\n        predicate || quad.predicate,\n        object || quad.object,\n        graph || quad.graph\n      )\n    }\n\n    return quad\n  }\n}\n\nclass ParserStream {\n  constructor (input, { baseIRI = relativeIriProtocol, context = null, documentLoader, factory = rdf } = {}) {\n    const parser = new JsonLdParser({\n      baseIRI,\n      context,\n      dataFactory: factory,\n      documentLoader,\n      streamingProfile: false\n    })\n\n    input.pipe(parser)\n\n    const cleanup = quadCleanup(factory)\n\n    const transform = new Transform({\n      objectMode: true,\n      transform: (quad, encoding, callback) => {\n        callback(null, cleanup(quad))\n      }\n    })\n\n    parser.on('context', context => {\n      Object.entries(context).forEach(([prefix, iri]) => {\n        transform.emit('prefix', prefix, factory.namedNode(iri))\n      })\n    })\n    parser.on('error', err => transform.destroy(err))\n    parser.pipe(transform)\n\n    return toReadable(transform)\n  }\n}\n\nexport default ParserStream\n","import Sink from '@rdfjs/sink'\nimport ParserStream from './lib/ParserStream.js'\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nexport default Parser\n"],"names":["Object","defineProperty","exports","value","EntryHandlerArrayValue","Util_1","jsonld_context_parser_1","isPropertyHandler","isStackProcessor","validate","parsingContext","util","keys","depth","inProperty","this","test","key","handle","parentKey","unaliasKeywordParent","listRootKey","listRootDepth","i","keyOption","values","valueToTerm","getContext","object","handleListElement","slice","length","newOnValueJob","undefined","unaliasKeyword","parentContext","Util","getContextValueContainer","emittedStack","shiftStack","contextTree","removeContext","valueOriginal","listRootKeys","listPointer","listPointerStack","unaliasKeywords","newLinkTerm","dataFactory","blankNode","emitQuad","quad","rdfRest","getDefaultGraph","linkTerm","listId","rdfFirst","rdfNil","rdfstar","annotationsBuffer","emitError","ErrorCoded","ERROR_CODES","INVALID_ANNOTATION","ContextTree","constructor","subTrees","head","tail","subTree","subContext","then","context","setContext","path","ContainerHandlerIndex","EntryHandlerPredicate_1","canCombineWithGraph","containers","Array","isArray","graphContainer","indexKey","indexPropertyRaw","getContextValueIndex","isPotentialKeyword","INVALID_TERM_DEFINITION","getContextValueType","INVALID_VALUE_OBJECT","id","resourceToTerm","idStack","indexProperty","createVocabOrBaseTerm","indexValues","getContainerKey","graphId","getGraphContainerValue","indexValue","EntryHandlerPredicate","handlePredicateObject","depthOffset","handlePendingContainerFlushBuffers","EntryHandlerKeywordNest","EntryHandlerKeyword_1","EntryHandlerKeyword","super","INVALID_NEST_VALUE","EntryHandlerInvalidFallback","EntryHandlerKeywordContext","streamingProfile","processingStack","processingType","INVALID_STREAMING_KEY_ORDER","parseContext","getContextRaw","emitContext","validateContext","EntryHandlerContainer","ContainerHandlerIdentifier_1","ContainerHandlerIndex_1","ContainerHandlerLanguage_1","ContainerHandlerType_1","isSimpleGraphContainer","isComplexGraphContainer","getContainerGraphIndex","index","getContainerHandler","fallback","checkGraphContainer","containersSelf","getContextValue","containersParent","containerHandleName","CONTAINER_HANDLERS","isBufferableContainerHandler","handler","containerName","testResult","ContainerHandlerIdentifier","ContainerHandlerLanguage","ContainerHandlerType","Quad","subject","predicate","graph","termType","equals","other","Literal","NamedNode_1","languageOrDatatype","language","datatype","RDF_LANGUAGE_STRING","direction","RDF_DIRECTIONAL_LANGUAGE_STRING","XSD_STRING","NamedNode","EntryHandlerKeywordUnknownFallback","keywordType","VALID_KEYWORDS_TYPES","type","errorCode","strictValues","Error","INVALID_INDEX_VALUE","INVALID_REVERSE_VALUE","keyUnaliased","maybeId","ids","some","term","push","EntryHandlerKeywordType","keyOriginal","rdfType","reverse","isPropertyReverse","isEmbedded","isPropertyInEmbeddedNode","validateReverseInEmbeddedNode","isAnnotation","isPropertyInAnnotationObject","elements","element","INVALID_TYPE_VALUE","scopedContext","Promise","resolve","hasTypedScopedContext","sort","typeContext","c","streamingProfileAllowOutOfOrderPlainType","JsonLdContextNormalized","assign","DefaultGraph","INSTANCE","ContextParser","relative_to_absolute_iri_1","ErrorCoded_1","FetchDocumentLoader_1","JsonLdContextNormalized_1","options","documentLoader","FetchDocumentLoader","documentCache","skipValidation","expandContentTypeToBase","remoteContextsDepthLimit","redirectSchemaOrgHttps","validateLanguage","strictRange","JSON","stringify","REGEX_LANGUAGE_TAG","validateDirection","INVALID_BASE_DIRECTION","REGEX_DIRECTION_TAG","idifyReverseTerms","isValidKeyword","INVALID_IRI_MAPPING","expandPrefixedTerms","contextRaw","EXPAND_KEYS_BLACKLIST","indexOf","isReservedInternalKeyword","keyValue","ALIAS_DOMAIN_BLACKLIST","KEYWORD_REDEFINITION","ALIAS_RANGE_BLACKLIST","getContextValueId","INVALID_KEYWORD_ALIAS","isPrefixValue","changed","expandTerm","canAddIdEntry","isValidIri","newId","expandedType","normalize","processingMode","normalizeLanguageTags","toLowerCase","lowercase","containersToHash","newValue","containerValue","applyScopedProtected","expandOptions","isTermProtected","isSimpleTermDefinitionPrefix","validateKeywordRedefinitions","contextBefore","contextAfter","deepEqual","PROTECTED_TERM_REDEFINITION","valueType","substr","INVALID_VOCAB_MAPPING","INVALID_BASE_IRI","INVALID_DEFAULT_LANGUAGE","INVALID_VERSION_VALUE","INVALID_CONTEXT_ENTRY","INVALID_PROPAGATE_VALUE","getPrefix","CYCLIC_IRI_MAPPING","isValidIriWeak","isCompactIri","objectKey","objectValue","INVALID_TYPE_MAPPING","INVALID_REVERSE_PROPERTY","CONTAINERS_1_0","join","INVALID_CONTAINER_MAPPING","CONTAINERS","INVALID_LANGUAGE_MAPPING","INVALID_PREFIX_VALUE","applyBaseEntry","inheritFromParent","baseIRI","external","normalizeContextIri","contextIri","_a","startsWith","parseInnerContexts","ignoreScopedContexts","parse","ignoreProtection","ignoreRemoteScopedContexts","e","message","INVALID_SCOPED_CONTEXT","minimalProcessing","internalOptions","DEFAULT_PROCESSING_MODE","remoteContexts","CONTEXT_OVERFLOW","hasProtectedTerms","INVALID_CONTEXT_NULLIFICATION","overriddenLoad","getOverriddenLoad","parsedStringContext","load","contextIris","contexts","all","map","reducedContexts","reduce","accContextPromise","contextEntry","accContext","importContext","INVALID_IMPORT_VALUE","loadImportContext","defaultExpandOptions","newContext","overlappingKeys","newContextWrapped","INVALID_LOCAL_CONTEXT","url","cached","document","LOADING_REMOTE_CONTEXT_FAILED","INVALID_REMOTE_CONTEXT","RECURSIVE_CONTEXT_INCLUSION","importContextIri","EntryHandlerKeywordIncluded","INVALID_INCLUDED_VALUE","valueUnliased","keyword","JsonLdParser","Parser","readable_stream_1","EntryHandlerArrayValue_1","EntryHandlerContainer_1","EntryHandlerInvalidFallback_1","EntryHandlerKeywordContext_1","EntryHandlerKeywordGraph_1","EntryHandlerKeywordId_1","EntryHandlerKeywordIncluded_1","EntryHandlerKeywordNest_1","EntryHandlerKeywordType_1","EntryHandlerKeywordUnknownFallback_1","EntryHandlerKeywordValue_1","ParsingContext_1","http_link_header_1","EntryHandlerKeywordAnnotation_1","Transform","readableObjectMode","ParsingContext","parser","jsonParser","contextJobs","typeJobs","contextAwaitingJobs","lastDepth","lastKeys","lastOnValueJob","attachJsonParserListeners","on","mode","emit","fromHttpResponse","mediaType","headers","wellKnownMediaTypes","includes","endsWith","LOADING_DOCUMENT_FAILED","has","forEach","linkHeader","link","get","MULTIPLE_CONTEXT_LINK_HEADERS","uri","ignoreMissingContextLinkHeader","contentType","match","exec","import","stream","error","parsed","pipe","output","PassThrough","data","_transform","chunk","encoding","callback","write","lastDepthCheck","flushStacks","listHead","splice","pendingContainerFlushBuffers","flushBuffer","handleKey","INVALID_REVERSE_PROPERTY_MAP","validationStack","property","Math","max","validationResult","validateKey","valid","isLiteral","entryHandler","ENTRY_HANDLERS","validateValueIndexes","unaliasedKeywordCacheStack","graphStack","graphContainerTermStack","jsonLiteralStack","literalStack","subjects","subjectsWasDefined","valueBuffer","unidentifiedValuesBuffer","depthOffsetGraph","getDepthOffsetGraph","graphs","bufferedValue","emitQuadChecked","subGraphBuffer","getUnidentifiedGraphBufferSafe","graphBuffer","unidentifiedGraphsBuffer","topLevelProperties","annotationsBufferParent","getAnnotationsBufferSafe","annotation","onValue","stack","fill","v","isParsingContextInner","valueJobCb","jobs","job","executeBufferedJobs","onError","applicableTypeJobs","applicableTypeJobIds","typeJob","isPrefixArray","sortedTypeJobs","job1","job2","sortedApplicableTypeJobIds","jobId","EntryHandlerKeywordId","EntryHandlerKeywordGraph","EntryHandlerKeywordValue","EntryHandlerKeywordAnnotation","BlankNode","DataFactory","BlankNode_1","DefaultGraph_1","Literal_1","Quad_1","Variable_1","dataFactoryCounter","blankNodeCounter","blankNodePrefix","namedNode","literal","variable","Variable","defaultGraph","fromTerm","original","fromQuad","resetBlankNodeCounter","separatorPos","charAt","prefix","contextValue","allowPrefixNonGenDelims","isPrefixIriEndingWithGenDelim","KEYWORD_REGEX","prefixIri","ENDS_WITH_GEN_DELIM","iri","Boolean","IRI_REGEX","IRI_REGEX_WEAK","VALID_KEYWORDS","object1","object2","objKeys1","objKeys2","every","value1","value2","__createBinding","create","o","m","k","k2","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","__exportStar","p","prototype","hasOwnProperty","call","blackList","Set","readable","duplex","Proxy","target","Reflect","arguments","result","bind","set","Buffer","C","LEFT_BRACE","RIGHT_BRACE","LEFT_BRACKET","RIGHT_BRACKET","COLON","COMMA","TRUE","FALSE","NULL","STRING","NUMBER","START","STOP","TRUE1","TRUE2","TRUE3","FALSE1","FALSE2","FALSE3","FALSE4","NULL1","NULL2","NULL3","NUMBER1","NUMBER3","STRING1","STRING2","STRING3","STRING4","STRING5","STRING6","VALUE","KEY","OBJECT","ARRAY","BACK_SLASH","charCodeAt","FORWARD_SLASH","BACKSPACE","FORM_FEED","NEWLINE","CARRIAGE_RETURN","TAB","STRING_BUFFER_SIZE","alloc","size","tState","string","stringBuffer","stringBufferOffset","unicode","highSurrogate","state","bytes_remaining","bytes_in_sequence","temp_buffs","offset","toknam","code","l","toString","proto","err","charError","buffer","String","fromCharCode","appendStringChar","char","appendStringBuf","buf","start","end","copy","n","onToken","j","byteLength","intVal","parseInt","numberReviver","token","parseError","pop","parent","text","Number","isNaN","module","expandVocab","validIriMapping","vocab","vocabRelative","base","potentialKeyword","contextPrefixValue","allowPrefixForcing","allowVocabRelativeToBase","compactIri","shortestPrefixing","suffix","fetcher","response","fetch","Headers","accept","ok","colonPos","json","alternateUrl","rel","statusText","status","ContextTree_1","JsonLdParser_1","contextParser","skipContextValidation","produceGeneralizedRdf","allowSubjectList","rdfDirection","rdfstarReverseInEmbedded","activeProcessingMode","parseFloat","rootContext","activeVersion","PROCESSING_MODE_CONFLICT","keysOriginal","contextData","getContextPropagationAware","contextKeyEntry","propagate","originalDepth","hasApplicablePropertyScopedContext","lastKey","lastKeyValue","pendingFlushBuffer","getUnidentifiedValueBufferSafe","getExpandOptions","EXPAND_OPTIONS","deeperIdStack","rdf_data_factory_1","canonicalizeJson","RDF","rdfJson","contextKey","entry","getContextValueLanguage","getContextValueDirection","isContextValueReverse","needle","haystack","indexHashes","existingIndexValue","CONFLICTING_INDEXES","valueToJsonString","getContextSelfOrPropertyScoped","val","valueLanguage","valueDirection","valueIndex","subValue","INVALID_VALUE_OBJECT_VALUE","INVALID_LANGUAGE_TAGGED_VALUE","INVALID_LANGUAGE_TAGGED_STRING","nullableTermToArray","createLanguageDirectionLiteral","INVALID_TYPED_VALUE","typeTerm","INVALID_SET_OR_LIST_OBJECT","listValue","graphContainerEntries","valueId","valueTerm","INVALID_ID_VALUE","stringValueToTerm","XSD_BOOLEAN","XSD_INTEGER","XSD_DOUBLE","predicateToTerm","expanded","intToString","isFinite","isInteger","toExponential","replace","defaultDatatype","contextType","contextLanguage","contextDirection","valueNode","disableCache","cachedUnaliasedKeyword","unliased","hash","newHash","validateReverseSubject","INVALID_REVERSE_PROPERTY_VALUE","depthContainer","graphContainerIndex","getPropertiesDepth","lastValidDepth","INVALID_EMBEDDED_NODE","emitAnnotation","annotationQuad","nestedAnnotation","nestedAnnotations","XSD","depthProperties","depthPropertiesGraph","atGraph","newAnnotation","existingAnnotation","objects","parentDepthOffset","listValueContainer","valueKeys","COLLIDING_KEYWORDS","INVALID_LANGUAGE_MAP_VALUE","containerTypeType","entryHasIdentifier","Sink","Impl","input","relativeIriProtocol","termCleanup","factory","quadCleanup","cleanup","ParserStream","transform","objectMode","entries","destroy"],"sourceRoot":""}