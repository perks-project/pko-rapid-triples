{"version":3,"file":"js/148.db4445f2.js","mappings":"gIAAA,MAAMA,EAAY,IAAIC,IAAI,CAAC,SAAU,iBAAkB,aAEvD,SAASC,EAAUC,GACjB,OAAO,IAAIC,MAAMD,EAAQ,CACvB,GAAAE,CAAKC,EAAQC,GACX,OAAIP,EAAUK,IAAIE,IAIXC,QAAQH,OAAOI,UACxB,EACA,GAAAC,CAAKJ,EAAQC,GACX,GAAIP,EAAUK,IAAIE,GAChB,OAGF,MAAMI,EAASH,QAAQE,OAAOD,WAE9B,OAAIE,GAAiC,oBAAhBA,EAAOC,KACnBD,EAAOC,KAAKN,GAGdK,CACT,EACA,GAAAE,CAAKP,EAAQC,EAAKO,GAChB,IAAId,EAAUK,IAAIE,GAIlB,OAAOC,QAAQK,OAAOJ,UACxB,GAEJ,CAEA,K,sBClCA,MAAMM,EACJ,WAAAC,CAAaC,EAAMC,GACjBC,KAAKF,KAAOA,EACZE,KAAKD,QAAUA,CACjB,CAEA,MAAAE,CAAQC,EAAOH,GACb,MAAMI,EAAS,IAAIH,KAAKF,KAAKI,EAAO,IAAKF,KAAKD,WAAYA,IAY1D,OAVAG,EAAME,GAAG,OAAO,KACTD,EAAOpB,UACVoB,EAAOE,KAAK,MACd,IAGFH,EAAME,GAAG,SAASE,IAChBH,EAAOE,KAAK,QAASC,EAAG,IAGnBH,CACT,EAGF,K,qHCnBA,MAAMI,EACJ,WAAAV,CAAaK,GAAO,QAAEM,EAAU,GAAE,QAAEC,EAAU,OAAQC,GAAS,CAAC,GAC9D,MAAMC,EAAe,CACnBC,UAAWH,EAAQG,UAAUnB,KAAKgB,GAClCI,aAAcJ,EAAQI,aAAapB,KAAKgB,GACxCK,QAASL,EAAQK,QAAQrB,KAAKgB,GAC9BM,UAAWN,EAAQM,UAAUtB,KAAKgB,GAClCO,KAAMP,EAAQO,KAAKvB,KAAKgB,GACxBQ,SAAUR,EAAQQ,SAASxB,KAAKgB,IAG5BS,EAAS,IAAI,IAAa,CAAEV,UAASC,QAASE,KAAiBD,IAIrE,OAFAR,EAAMiB,KAAKD,IAEJ,OAAWA,EACpB,EAGF,QCpBA,MAAME,UAAe,IACnB,WAAAvB,CAAaE,GACXsB,MAAM,EAActB,EACtB,EAGF,O","sources":["webpack://pko-rapid-triples/./node_modules/duplex-to/readable.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/sink/index.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/parser-n3/lib/ParserStream.js","webpack://pko-rapid-triples/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/parser-n3/index.js"],"sourcesContent":["const blackList = new Set(['_write', '_writableState', 'writable'])\n\nfunction readable (duplex) {\n  return new Proxy(duplex, {\n    has (target, key) {\n      if (blackList.has(key)) {\n        return false\n      }\n\n      return Reflect.has(...arguments)\n    },\n    get (target, key) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      const result = Reflect.get(...arguments)\n\n      if (result && typeof result.bind === 'function') {\n        return result.bind(target)\n      }\n\n      return result\n    },\n    set (target, key, value) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      return Reflect.set(...arguments)\n    }\n  })\n}\n\nexport default readable\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, { ...this.options, ...options })\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', err => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nexport default Sink\n","import rdf from '@rdfjs/data-model'\nimport toReadable from 'duplex-to/readable.js'\nimport { StreamParser } from 'n3'\n\nclass ParserStream {\n  constructor (input, { baseIRI = '', factory = rdf, ...rest } = {}) {\n    const boundFactory = {\n      blankNode: factory.blankNode.bind(factory),\n      defaultGraph: factory.defaultGraph.bind(factory),\n      literal: factory.literal.bind(factory),\n      namedNode: factory.namedNode.bind(factory),\n      quad: factory.quad.bind(factory),\n      variable: factory.variable.bind(factory)\n    }\n\n    const parser = new StreamParser({ baseIRI, factory: boundFactory, ...rest })\n\n    input.pipe(parser)\n\n    return toReadable(parser)\n  }\n}\n\nexport default ParserStream\n","import Sink from '@rdfjs/sink'\nimport ParserStream from './lib/ParserStream.js'\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nexport default Parser\n"],"names":["blackList","Set","readable","duplex","Proxy","has","target","key","Reflect","arguments","get","result","bind","set","value","Sink","constructor","Impl","options","this","import","input","output","on","emit","err","ParserStream","baseIRI","factory","rest","boundFactory","blankNode","defaultGraph","literal","namedNode","quad","variable","parser","pipe","Parser","super"],"sourceRoot":""}