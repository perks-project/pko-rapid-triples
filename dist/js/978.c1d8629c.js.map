{"version":3,"file":"js/978.c1d8629c.js","mappings":"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","sources":["webpack://pko-rapid-triples/./node_modules/@graphy/content.xml.scribe/main.js","webpack://pko-rapid-triples/./node_modules/@graphy/core.iso.stream/main.js","webpack://pko-rapid-triples/./node_modules/@graphy/core.class.scribable/main.js"],"sourcesContent":["\n\n\nconst factory = require('@graphy/core.data.factory');\nconst Scribable = require('@graphy/core.class.scribable');\n\nconst {\n\tc1,\n\tnamedNode,\n\t$_PREFIX_CACHE,\n} = factory;\n\nconst R_XML_ESCAPES = /[&\"<>']/g;\nconst H_XML_ESCAPES = {\n\t'&': '&amp;',\n\t'<': '&lt;',\n\t'>': '&gt;',\n\t'\"': '&quot;',\n\t\"'\": '&apos;',\n};\n\nconst R_NS_XML = /^xml/i;\n\nconst escape_xml_text = s_text => s_text.replace(R_XML_ESCAPES, s => H_XML_ESCAPES[s]);\n\nconst R_XML_NAME_SIMPLE_EOS = /([A-Za-z_][A-Za-z_.0-9-]*)$/;\n\n\n\nconst R_XML_NAME_EXTENDED_EOS = /([A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u{10000}-\\u{EFFFF}][A-Za-z_.0-9\\-\\u00b7\\u203f-\\u2040\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u{10000}-\\u{EFFFF}]*$)/u;\n\nfunction XML_Serializer$pair(k_self, sx1_predicate, sx_arc, kt_object) {\n\t// named node\n\tif(kt_object.isNamedNode) {\n\t\tsx_arc += ' rdf:resource=\"'+escape_xml_text(kt_object.value)+'\"/>';\n\t}\n\t// literal\n\telse if(kt_object.isLiteral) {\n\t\t// languaged\n\t\tif(kt_object.isLanguaged) {\n\t\t\tsx_arc += ' xml:lang=\"'+kt_object.language+'\"';\n\t\t}\n\t\t// datatyped\n\t\telse if(kt_object.isDatatyped) {\n\t\t\tsx_arc += ' rdf:datatype=\"'+escape_xml_text(kt_object.datatype.value)+'\"';\n\t\t}\n\n\t\t// all literals\n\t\tsx_arc += '>'+escape_xml_text(kt_object.value)+'</'+sx1_predicate+'>';\n\t}\n\t// blank node\n\telse if(kt_object.isBlankNode) {\n\t\tsx_arc += ' rdf:nodeID=\"'+escape_xml_text(kt_object.value)+'\"/>';\n\t}\n\t// other\n\telse {\n\t\tthrow new Error(`Not allowed to serialize term type '${kt_object.termType}' as object in XML serializer.`);\n\t}\n\n\treturn sx_arc;\n}\n\nfunction XML_Serializer$predicate(k_self, kt_predicate) {\n\tlet h_prefixes = k_self._h_prefixes;\n\n\tlet p_predicate = kt_predicate.value;\n\n\t// split predicate\n\tlet p_edge_prefix_iri;\n\tlet s_edge_suffix;\n\t{\n\t\tlet m_edge_name = R_XML_NAME_SIMPLE_EOS.exec(p_predicate);\n\n\t\t// simple name\n\t\tif(m_edge_name) {\n\t\t\tp_edge_prefix_iri = p_predicate.slice(0, m_edge_name.index);\n\t\t\ts_edge_suffix = m_edge_name[1];\n\t\t}\n\t\t// not a simple name\n\t\telse {\n\t\t\tm_edge_name = R_XML_NAME_EXTENDED_EOS.exec(p_predicate);\n\n\t\t\t// extended name\n\t\t\tif(m_edge_name) {\n\t\t\t\tp_edge_prefix_iri = p_predicate.slice(0, m_edge_name.index);\n\t\t\t\ts_edge_suffix = m_edge_name[1];\n\t\t\t}\n\t\t\t// cannot serialize\n\t\t\telse {\n\t\t\t\tthrow new Error(`Cannot serialize predicate <${p_predicate}> into an XML qname`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// predicate tag\n\tlet sx1_predicate;\n\tlet sx_arc;\n\n\tTEMPORARY_PREFIX:\n\tfor(;;) {\n\t\tPREFIX_LOOKUP:\n\t\tfor(;;) {\n\t\t\t// prefix cache\n\t\t\tif(h_prefixes[$_PREFIX_CACHE]) {\n\t\t\t\tlet h_inverse = h_prefixes[$_PREFIX_CACHE]._h_inverse;\n\n\t\t\t\t// prefix exists\n\t\t\t\tif(p_edge_prefix_iri in h_inverse) {\n\t\t\t\t\tlet si_prefix = h_inverse[p_edge_prefix_iri];\n\n\t\t\t\t\t// set predicate tag\n\t\t\t\t\tsx1_predicate = (si_prefix? si_prefix+':': '')+s_edge_suffix;\n\n\t\t\t\t\t// start arc\n\t\t\t\t\tsx_arc = '<'+sx1_predicate;\n\n\t\t\t\t\t// done\n\t\t\t\t\tbreak TEMPORARY_PREFIX;\n\t\t\t\t}\n\t\t\t\t// prefix does not exist\n\t\t\t\telse {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// no cache\n\t\t\telse {\n\t\t\t\t// each prefix in hash\n\t\t\t\tfor(let si_prefix in h_prefixes) {\n\t\t\t\t\tlet p_prefix_iri = h_prefixes[si_prefix];\n\n\t\t\t\t\t// prefix matches\n\t\t\t\t\tif(p_prefix_iri === p_edge_prefix_iri) {\n\t\t\t\t\t\t// set predicate tag\n\t\t\t\t\t\tsx1_predicate = (si_prefix? si_prefix+':': '')+s_edge_suffix;\n\n\t\t\t\t\t\t// start arc\n\t\t\t\t\t\tsx_arc = '<'+sx1_predicate;\n\n\t\t\t\t\t\t// stop searching hash\n\t\t\t\t\t\tbreak PREFIX_LOOKUP;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// prefix not found\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// create temporary prefix\n\t\tlet si_prefix_tmp = '__g'+(k_self._c_prefixes_tmp++);\n\n\t\t// set predicate tag\n\t\tsx1_predicate = si_prefix_tmp+':'+s_edge_suffix;\n\n\t\t// start arc\n\t\tsx_arc = '<'+sx1_predicate+' xmlns:'+si_prefix_tmp+'=\"'+p_edge_prefix_iri+'\"';\n\n\t\t// done\n\t\tbreak;\n\t}\n\n\treturn [sx1_predicate, sx_arc];\n}\n\nclass XML_Scriber extends Scribable {\n\tconstructor(gc_scriber={}) {\n\t\t// special case, remove prefixes before forwarding to super\n\t\tlet h_prefixes = gc_scriber.prefixes;\n\t\tdelete gc_scriber.prefixes;\n\n\t\tsuper(gc_scriber);\n\n\t\t// whether or not we can still add prefixes\n\t\tthis._b_prefixes_open = true;\n\n\t\tthis._c_prefixes_tmp = 0;\n\n\t\tthis._kt_subject = null;\n// this._kt_predicate = null;\n\n\t\t// open xml document and root node\n\t\tlet sx_open = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n<rdf:RDF'\n\t\t\t+'\\n\\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"';\n\n\t\t// force default prefix\n\t\tthis._update_prefixes({\n\t\t\trdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n\t\t});\n\n\t\t// prefixes given\n\t\tif(h_prefixes) {\n\t\t\t// update prefixes and push to output\n\t\t\tthis.push(sx_open+this._serialize_prefixes(h_prefixes));\n\t\t}\n\t\t// no prefixes\n\t\telse {\n\t\t\tthis.push(sx_open);\n\t\t}\n\t}\n\n\t_serialize_prefixes(h_prefixes_in, b_force_serialize=false) {\n\t\t// prefixes are frozen; reject prefix event\n\t\tif(!this._b_prefixes_open) return;\n\n\t\t// ref current prefixes\n\t\tlet h_prefixes = this._h_prefixes;\n\n\t\t// serialize new prefixes\n\t\tlet sx_prefixes = '';\n\t\tfor(let si_prefix in h_prefixes_in) {\n\t\t\t// prefix already exists\n\t\t\tif((si_prefix in h_prefixes)) {\n\t\t\t\t// and no change; skip\n\t\t\t\tif(h_prefixes_in[si_prefix] === h_prefixes[si_prefix] && !b_force_serialize) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// attempted change to prefix\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error(`Cannot change prefixes in RDF/XML serializer. Attempted to modify '${si_prefix}' from <${h_prefixes[si_prefix]}> to <${h_prefixes_in[si_prefix]}>`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// prefix not allowed\n\t\t\tif(R_NS_XML.test(si_prefix)) {\n\t\t\t\tthrow new Error(`Cannot serialize prefix '${si_prefix}' since it is reserved under the blanket XML namespace.`);\n\t\t\t}\n\n\t\t\t// serialize prefix\n\t\t\tsx_prefixes += `\\n\\txmlns${si_prefix? ':'+si_prefix: ''}=\"${namedNode(h_prefixes_in[si_prefix]).value}\"`;\n\t\t}\n\n\t\t// change detected\n\t\tif(sx_prefixes) {\n\t\t\t// (re)cache prefixes\n\t\t\tthis._update_prefixes(h_prefixes_in, true);\n\t\t}\n\n\t\t// write prefixes\n\t\treturn sx_prefixes;\n\t}\n\n\n\t_serialize_c3r(hc3r_triples) {\n\t\t// string building\n\t\tlet sx_output = '';\n\n\t\t// no longer able to modify prefixes\n\t\tif(this._b_prefixes_open) {\n\t\t\tsx_output += '>';\n\t\t\tthis._b_prefixes_open = false;\n\t\t}\n\n\t\t// ref prefixes\n\t\tlet h_prefixes = this._h_prefixes;\n\n\t\t// hanging subject\n\t\tif(null !== this._kt_subject) {\n\t\t\t// close previous\n\t\t\tsx_output += '\\n\\t</rdf:Description>';\n\n\t\t\t// reset\n\t\t\tthis._kt_subject = null;\n\t\t}\n\n\t\tfor(let sc1_subject in hc3r_triples) {\n\t\t\tlet sx_triples = '';\n\n\t\t\t// interpret subject\n\t\t\tlet kt_subject = c1(sc1_subject, h_prefixes);\n\n\t\t\t// not a term; skip\n\t\t\tif(!kt_subject.termType) continue;\n\n\t\t\t// not a node\n\t\t\tif(!kt_subject.isNamedNode && !kt_subject.isBlankNode) {\n\t\t\t\tthrow new Error(`Cannot use ${kt_subject.termType} term type in subject position`);\n\t\t\t}\n\n\t\t\t// convert to xml\n\t\t\t{\n\t\t\t\t// named node\n\t\t\t\tif(kt_subject.isNamedNode) {\n\t\t\t\t\tsx_triples += '\\n\\n\\t<rdf:Description rdf:about=\"'+escape_xml_text(kt_subject.value)+'\">';\n\t\t\t\t}\n\t\t\t\t// named node\n\t\t\t\telse if(kt_subject.isBlankNode) {\n\t\t\t\t\tsx_triples += '\\n\\n\\t<rdf:Description rdf:nodeID=\"'+escape_xml_text(kt_subject.value)+'\">';\n\t\t\t\t}\n\t\t\t\t// other\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error(`Not allowed to serialize term type '${kt_subject.termType}' as subject in XML serializer.`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet b_predicates = false;\n\n\t\t\t// each predicate\n\t\t\tlet hc2r_pairs = hc3r_triples[sc1_subject];\n\t\t\tfor(let sc1_predicate in hc2r_pairs) {\n\t\t\t\t// interpret predicate\n\t\t\t\tlet kt_predicate = c1(sc1_predicate, h_prefixes);\n\n\t\t\t\t// not a term; skip\n\t\t\t\tif(!kt_predicate.termType) continue;\n\n\t\t\t\t// not a node\n\t\t\t\tif(!kt_predicate.isNamedNode) {\n\t\t\t\t\tthrow new Error(`Cannot use ${kt_predicate.termType} term type in subject position`);\n\t\t\t\t}\n\n\t\t\t\t// convert to xml\n\t\t\t\tlet [sx1_predicate, sx_arc] = XML_Serializer$predicate(this, kt_predicate);\n\n\t\t\t\t// pairs\n\t\t\t\tlet sx_pairs = '';\n\n\t\t\t\t// each object\n\t\t\t\tfor(let sc1_object of hc2r_pairs[sc1_predicate]) {\n\t\t\t\t\t// interpret object\n\t\t\t\t\tlet kt_object = c1(sc1_object, h_prefixes);\n\n\t\t\t\t\t// not a term; skip\n\t\t\t\t\tif(!kt_object.termType) continue;\n\n\t\t\t\t\t// add object to pairs\n\t\t\t\t\tsx_pairs += '\\n\\t\\t'+XML_Serializer$pair(this, sx1_predicate, sx_arc, kt_object);\n\t\t\t\t}\n\n\t\t\t\t// objects written; add pairs to output\n\t\t\t\tif(sx_pairs) {\n\t\t\t\t\tsx_triples += sx_pairs;\n\t\t\t\t\tb_predicates = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// predicates written; add triples to output\n\t\t\tif(b_predicates) {\n\t\t\t\tsx_output += sx_triples+'\\n\\t</rdf:Description>';\n\t\t\t}\n\t\t}\n\n\t\treturn sx_output;\n\t}\n\n\t_serialize_quad(g_quad) {\n\t\t// normalize quad\n\t\tlet kq_quad = factory.from.quad(g_quad);\n\n\t\t// no longer able to modify prefixes\n\t\tif(this._b_prefixes_open) {\n\t\t\tthis._s_push += '>';\n\t\t\tthis._b_prefixes_open = false;\n\t\t}\n\n\t\tlet {\n\t\t\tsubject: kt_subject,\n\t\t\tpredicate: kt_predicate,\n\t\t\tobject: kt_object,\n\t\t} = kq_quad;\n\n\t\t// serialize predicate\n\t\tlet [sx1_predicate, sx_arc] = XML_Serializer$predicate(this, kt_predicate);\n\t\tlet sx_pair = '\\n\\t\\t'+XML_Serializer$pair(this, sx1_predicate, sx_arc, kt_object);\n\n\t\t// same subject\n\t\tif(kt_subject.equals(this._kt_subject)) {\n\t\t\tthis._s_push += sx_pair;\n\t\t}\n\t\t// subject not identical to previous\n\t\telse {\n\t\t\t// not a node\n\t\t\tif(!kt_subject.isNamedNode && !kt_subject.isBlankNode) {\n\t\t\t\tthrow new Error(`Cannot use ${kt_subject.termType} term type in subject position`);\n\t\t\t}\n\n\t\t\t// convert to xml\n\t\t\tlet sx_line;\n\t\t\t{\n\t\t\t\t// named node\n\t\t\t\tif(kt_subject.isNamedNode) {\n\t\t\t\t\tsx_line = '\\n\\n\\t<rdf:Description rdf:about=\"'+escape_xml_text(kt_subject.value)+'\">'+sx_pair;\n\t\t\t\t}\n\t\t\t\t// named node\n\t\t\t\telse if(kt_subject.isBlankNode) {\n\t\t\t\t\tsx_line = '\\n\\n\\t<rdf:Description rdf:nodeID=\"'+escape_xml_text(kt_subject.value)+'\">'+sx_pair;\n\t\t\t\t}\n\t\t\t\t// other\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error(`Not allowed to serialize term type '${kt_subject.termType}' as subject in XML serializer.`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// different subject\n\t\t\tif(this._kt_subject) {\n\t\t\t\t// write triple\n\t\t\t\tthis._s_push += '\\n\\t</rdf:Description>'+sx_line;\n\t\t\t}\n\t\t\t// first subject\n\t\t\telse {\n\t\t\t\tthis._s_push += sx_line;\n\t\t\t}\n\n\t\t\t// save subject and predicate\n\t\t\tthis._kt_subject = kt_subject;\n\t\t// this._kt_predicate = kt_predicate;\n\t\t}\n\t}\n\n\t_flush() {\n\t\t// flush buffer\n\t\tXML_Scriber._flush_buffer(this);\n\n\t\t// no longer able to modify prefixes\n\t\tif(this._b_prefixes_open) {\n\t\t\tthis.push('>');\n\t\t\tthis._b_prefixes_open = false;\n\t\t}\n\n\t\t// triple needs closing\n\t\tif(this._kt_subject) {\n\t\t\tthis.push('\\n\\t</rdf:Description>\\n</rdf:RDF>\\n');\n\t\t}\n\t\t// just close document\n\t\telse {\n\t\t\tthis.push('\\n</rdf:RDF>\\n');\n\t\t}\n\n\t\t// eof\n\t\tthis.push(null);\n\t}\n}\n\nObject.assign(XML_Scriber, {\n\t_serialize_comment: Scribable.prototype._serialize_hash_comment,\n});\n\nmodule.exports = function(g_config) {\n\treturn new XML_Scriber(g_config);\n};\n","const stream = require('readable-stream');\n\n\n\nclass Readable extends stream.Readable {\n\tconstructor(gc_readable={}) {\n\t\tsuper(gc_readable);\n\n\t\t// use iterator\n\t\tif(gc_readable.iterator) {\n\t\t\tthrow new Error('readable stream iterator shortcut not yet implemented');\n\t\t}\n\t}\n\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass Writable extends stream.Writable {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\t// rdfjs impl\n\timport(ds_source) {\n\t\tds_source\n\t\t\t.on('data', w_chunk => this.write(w_chunk))\n\t\t\t.on('end', () => this.end())\n\t\t\t.on('error', e_read => this.emit('error', e_read));\n\n\t\treturn this;\n\t}\n}\n\nclass Duplex extends stream.Duplex {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass Transform extends stream.Transform {\n\tuntil(s_event, b_return_stream) {\n\t\treturn new Promise((fk_until, fe_until) => {\n\t\t\t// convert error to rejected promise\n\t\t\tthis.on('error', (e_stream) => {\n\t\t\t\tfe_until(e_stream);\n\t\t\t});\n\n\t\t\t// special cases returns `this`\n\t\t\tif(b_return_stream) {\n\t\t\t\tthis.once(s_event, (...a_args) => {\n\t\t\t\t\tfk_until(this, ...a_args);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.once(s_event, fk_until);\n\t\t\t}\n\t\t});\n\t}\n\n\tbucket(s_encoding='utf8') {\n\t\tlet g_readable = this._readableState;\n\n\t\t// object mode\n\t\tif(g_readable.objectMode) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet a_data = [];\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\twrite(w_event, s_write_encoding, fk_write) {\n\t\t\t\t\t\ta_data.push(w_event);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ta_data.push(...a_chunks);\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(a_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// utf8-encoded strings\n\t\telse if('utf8' === s_encoding || 'utf-8' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet s_data = '';\n\n\t\t\t\t// set encoding\n\t\t\t\tthis.setEncoding(s_encoding);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: false,\n\n\t\t\t\t\twrite(s_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\ts_data += s_chunk;\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\n\t\t\t\t\twritev(a_chunks, fk_writev) {\n\t\t\t\t\t\ts_data += a_chunks.join('');\n\t\t\t\t\t\tfk_writev();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(s_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// buffer\n\t\telse if('buffer' === s_encoding) {\n\t\t\t// async operation\n\t\t\treturn new Promise((fk_bucket, fe_bucket) => {\n\t\t\t\tlet ab_data = Buffer.from([]);\n\n\t\t\t\t// pipe to writable\n\t\t\t\tthis.pipe(new stream.Writable({\n\t\t\t\t\tdecodeStrings: true,\n\n\t\t\t\t\twrite(ab_chunk, s_write_encoding, fk_write) {\n\t\t\t\t\t\tab_data = Buffer.concat([ab_data, ab_chunk], ab_data.length+ab_chunk.length);\n\t\t\t\t\t\tfk_write();\n\t\t\t\t\t},\n\t\t\t\t}))\n\t\t\t\t\t// error\n\t\t\t\t\t.on('error', (e_stream) => {\n\t\t\t\t\t\tfe_bucket(e_stream);\n\t\t\t\t\t})\n\t\t\t\t\t// wait for it to finish\n\t\t\t\t\t.on('finish', () => {\n\t\t\t\t\t\tfk_bucket(ab_data);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t// rdfjs impl\n\timport(ds_source) {\n\t\tds_source\n\t\t\t.on('data', w_chunk => this.write(w_chunk))\n\t\t\t.on('end', () => this.end())\n\t\t\t.on('error', e_read => this.emit('error', e_read));\n\n\t\treturn this;\n\t}\n\n\tdemolish(e_destroy) {\n\t\t// do not allow to push\n\t\tthis.push = (z_chunk) => {\n\t\t\t// ignore eof signals from node core\n\t\t\tif(null === z_chunk) return;\n\n\t\t\t// anything else is bad\n\t\t\tthrow new Error(`[ERR_STREAM_DESTROYED]: Cannot push after stream was destroyed`);\n\t\t};\n\n\t\t// do not allow to emit 'end'\n\t\tthis.emit = function(s_event, ...a_args) {\n\t\t\tif('end' === s_event) return;\n\n\t\t\tObject.getPrototypeOf(this).emit.apply(this, [s_event, ...a_args]);\n\t\t};\n\n\t\t// an error was given, destroy the stream as well\n\t\tif(e_destroy) {\n\t\t\treturn stream.Transform.prototype.destroy.call(this, e_destroy);\n\t\t}\n\t}\n}\n\n// eslint-disable-next-line no-new-func\nconst b_is_node = (new Function(/* syntax: js */ `try {return this===global;}catch(e){return false;}`))();\n\n// deduce the runtime environment\nconst [B_BROWSER, B_BROWSERIFY] = (() => 'undefined' === typeof process\n\t? [true, false]\n\t: (process.browser\n\t\t? [true, true]\n\t\t: ('undefined' === process.versions || 'undefined' === process.versions.node\n\t\t\t? [true, false]\n\t\t\t: [false, false])))();\n\n// node.js or browserify; patch for node < v10\nif(B_BROWSERIFY || (b_is_node && (+(/^v(\\d+)/.exec(process.version)[1])) < 10)) {\n\t// override destroy methods\n\tTransform.prototype.destroy = Duplex.prototype.destroy = function(e_destroy, fke_destroy) {\n\t\tthis._readableState.destroyed = true;\n\t\tthis._writableState.destroyed = true;\n\n\t\tlet f_emit_close = () => {\n\t\t\tif(!this._writableState.emitClose) return;\n\t\t\tif(!this._readableState.emitClose) return;\n\t\t\tthis.emit('close');\n\t\t};\n\n\t\tthis._destroy(e_destroy || null, (e_destroy_re) => {\n\t\t\tif(!fke_destroy && e_destroy_re) {\n\t\t\t\tprocess.nextTick(() => {\n\t\t\t\t\tthis.emit('error', e_destroy_re);\n\t\t\t\t\tf_emit_close();\n\t\t\t\t});\n\t\t\t\tthis._writableState.errorEmitted = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocess.nextTick(f_emit_close);\n\t\t\t\tif(fke_destroy) fke_destroy(e_destroy_re);\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t};\n\n\t// override default _destroy implementations\n\tTransform.prototype._destroy = Duplex.prototype._destroy = (e_destroy, fke_destroy) => fke_destroy(e_destroy);\n}\n\nclass QuadsToOther extends Transform {\n\tconstructor(gc_transform={}) {\n\t\tsuper({\n\t\t\t...gc_transform,\n\t\t\twritableObjectMode: true,\n\t\t\treadableObjectMode: true,\n\t\t});\n\n\t\tthis._as_inputs = new Set();\n\n\t\t// forward prefix and comment events\n\t\tthis.on('pipe', (ds_src) => {\n\t\t\tthis._as_inputs.add(ds_src);\n\n\t\t\tds_src\n\t\t\t\t.on('prefix', (...a_args) => {\n\t\t\t\t\tthis.emit('prefix', ...a_args);\n\t\t\t\t})\n\t\t\t\t.on('comment', (...a_args) => {\n\t\t\t\t\tthis.emit('comment', ...a_args);\n\t\t\t\t});\n\t\t});\n\n\t\tthis.on('unpipe', (ds_src) => {\n\t\t\tthis._as_inputs.delete(ds_src);\n\t\t});\n\t}\n\n\t_destroy() {\n\t\tfor(let ds_input of this._as_inputs) {\n\t\t\tds_input.destroy();\n\t\t}\n\t}\n}\n\nclass Quads_To_JSON_Transform extends QuadsToOther {\n\t// serializse json\n\t_transform(g_quad, s_encoding, fk_transform) {\n\t\tfk_transform(null, JSON.stringify(g_quad.isolate())+'\\n');\n\t}\n}\n\nclass Quads_To_Writable extends QuadsToOther {\n\t_transform(g_quad, s_encoding, fk_transform) {\n\t\tfk_transform(null, {\n\t\t\ttype: 'quad',\n\t\t\tvalue: g_quad,\n\t\t});\n\t}\n}\n\nTransform.QuadsToOther = QuadsToOther;\n\nmodule.exports = {\n\t...stream,\n\tReadable,\n\tWritable,\n\tDuplex,\n\tTransform,\n\n\tQuadsToOther,\n\n\t// create a transform from quad objects into JSON strings for trivial serialization\n\tquads_to_json() {\n\t\treturn new Quads_To_JSON_Transform();\n\t},\n\n\t// create a transform from quad objects into writable data events\n\tquads_to_writable() {\n\t\treturn new Quads_To_Writable();\n\t},\n\n\t// create a simple, single-event readable stream\n\tsource(w_push, s_encoding=null) {\n\t\t// encoding not explicit, string given; assume utf8\n\t\tif(!s_encoding && 'string' === typeof w_push) s_encoding = 'utf8';\n\n\t\t// readable\n\t\treturn new Readable({\n\t\t\tobjectMode: !s_encoding && 'string' !== typeof w_push && !Buffer.isBuffer(w_push),\n\n\t\t\tread() {\n\t\t\t\tthis.push(w_push, s_encoding);\n\t\t\t\tthis.push(null);\n\t\t\t},\n\t\t});\n\t},\n};\n","\n\n\n// queueMicrotask shim\n{\n\t// not defined or not a function\n\tif('function' !== typeof queueMicrotask) {\n\t\t// create resolved promise\n\t\tlet dp_resolve = Promise.resolve();\n\n\t\t// try to redefine\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-global-assign\n\t\t\tqueueMicrotask = fk => dp_resolve.then(fk)\n\t\t\t\t.catch(e_callback => setTimeout(() => {\n\t\t\t\t\tthrow e_callback;\n\t\t\t\t}, 0));\n\t\t}\n\t\t// oh well, at least we tried\n\t\tcatch(e_define) {}\n\t}\n}\n\n\nconst factory = require('@graphy/core.data.factory');\nconst stream = require('@graphy/core.iso.stream');\n\n\n// max string buffer size\nconst N_DEFAULT_MAX_BUFFER = 1 << 15;  // 32 KiB\n\n\nclass Scribable extends stream.Transform {\n\t// flush buffer\n\tstatic _flush_buffer(k_self) {\n\t\t// no buffer; exit\n\t\tif(!k_self._s_push) return;\n\n\t\t// push buffer to stream\n\t\tk_self.push(k_self._s_push);\n\n\t\t// reset buffer\n\t\tk_self._s_push = '';\n\t}\n\n\tconstructor(gc_scribable={}) {\n\t\tsuper({\n\t\t\twritableObjectMode: true,\n\t\t\treadableObjectMode: false,\n\t\t});\n\n\t\tlet {\n\t\t\tprefixes: h_prefixes={},\n\t\t} = gc_scribable;\n\n\t\t// internal buffer\n\t\tthis._s_push = '';\n\n\t\t// max buffer length\n\t\tthis._n_max_buffer = gc_scribable.max_buffer || gc_scribable.maxBuffer || N_DEFAULT_MAX_BUFFER;\n\n\t\t// prefixes\n\t\tthis._h_prefixes = factory.cache_prefixes(h_prefixes || {});\n\n\t\t// on new source(s)\n\t\tthis.on('pipe', (ds_src) => {\n\t\t\t// listen for prefix events\n\t\t\tds_src.on('prefix', (s_prefix_id, p_iri) => {\n\t\t\t\tthis.write({\n\t\t\t\t\ttype: 'prefixes',\n\t\t\t\t\tvalue: {\n\t\t\t\t\t\t[s_prefix_id]: p_iri,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// listen for comment events\n\t\t\tds_src.on('comment', (s_comment) => {\n\t\t\t\tthis.write({\n\t\t\t\t\ttype: 'comment',\n\t\t\t\t\tvalue: s_comment,\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// bind event listeners\n\t\tif(gc_scribable.close) this.once('close', gc_scribable.close);\n\t\tif(gc_scribable.drain) this.on('drain', gc_scribable.drain);\n\t\tif(gc_scribable.error) this.on('error', gc_scribable.error);\n\t\tif(gc_scribable.finish) this.once('finish', gc_scribable.finish);\n\t\tif(gc_scribable.data) this.on('data', gc_scribable.data);\n\t\tif(gc_scribable.end) this.once('end', gc_scribable.end);\n\t\tif(gc_scribable.warning) this.on('warning', gc_scribable.warning);\n\t}\n\n\t_serialize_hash_comment(s_comment) {\n\t\treturn '# '+s_comment.replace(/\\n/g, '\\n# ')+'\\n';\n\t}\n\n\t_serialize_newlines(n_newlines=1) {\n\t\treturn '\\n'.repeat(n_newlines);\n\t}\n\n\t_serialize_c4r(hc4r_quads) {\n\t\tlet h_prefixes = this._h_prefixes;\n\t\tlet a_unions = [];\n\t\tlet s_write = '';\n\n\t\t// each graph in quads hash\n\t\tfor(let sc1_graph in hc4r_quads) {\n\t\t\t// non-default graph; union from dataset\n\t\t\tif('*' !== sc1_graph) a_unions.push(sc1_graph);\n\n\t\t\t// add all quads from graph\n\t\t\ts_write += this._serialize_c3r(hc4r_quads[sc1_graph]);\n\t\t}\n\n\t\t// a union was performed\n\t\tif(a_unions.length) {\n\t\t\t// warn about implicit union\n\t\t\tlet s_warning = `Destination format does not support quads; an implicit union into the default graph was performed on the quads contained in graphs: ${a_unions.map(sc1 => factory.c1(sc1, h_prefixes).verbose()).join(', ')}`;\n\n\t\t\t// emit warning, wasn't listened to; force thru warn/stderr channel\n\t\t\tif(!this.emit('warning', s_warning)) {\n\t\t\t\tconsole.warn(s_warning);\n\t\t\t}\n\t\t}\n\n\t\treturn s_write;\n\t}\n\n\n\t_serialize_c3() {\n\t\tthrow new Error(`Write event type 'c3' not supported by ${this.constructor.name}`);\n\t}\n\n\t_serialize_c4() {\n\t\tthrow new Error(`Write event type 'c4' not supported by ${this.constructor.name}`);\n\t}\n\n\n\n\t_serialize_c3r() {\n\t\tthrow new Error(`Write event type 'c3r' should have been implemented by subclass ${this.constructor.name}`);\n\t}\n\n\t_serialize_quad() {\n\t\tthrow new Error(`Write event type 'quad' should have been implemented by subclass ${this.constructor.name}`);\n\t}\n\n\n\t// ignorable events\n\t_serialize_comment() {}  // eslint-disable-line class-methods-use-this\n\n\t// update prefix mappings\n\t_update_prefixes(h_prefixes_in, b_terse=false) {\n\t\t// merge prefixes\n\t\tlet h_prefixes = {\n\t\t\t...this._h_prefixes,\n\t\t\t...h_prefixes_in,\n\t\t};\n\n\t\t// recache prefixes\n\t\tthis._h_prefixes = factory.cachePrefixes(h_prefixes || {}, b_terse);\n\t}\n\n\t// implement stream.Transform\n\t_transform(g_event, s_encoding, fke_transform) {\n\t\tlet w_write;\n\n\t\t// try to serialize input value\n\t\ttry {\n\t\t\tw_write = this.serialize(g_event);\n\t\t}\n\t\t// serialization error\n\t\tcatch(e_serialize) {\n\t\t\t// report error\n\t\t\tfke_transform(e_serialize);\n\n\t\t\t// bail on transform\n\t\t\treturn e_serialize;\n\t\t}\n\n\t\t// data to push\n\t\tif(w_write) {\n\t\t\t// flush internal buffer\n\t\t\tScribable._flush_buffer(this);\n\n\t\t\t// push data to stream\n\t\t\tthis.push(w_write);\n\t\t}\n\t\t// nothing returned from serialization\n\t\telse {\n\t\t\tlet nl_push = this._s_push.length;\n\n\t\t\t// internal buffer high water mark\n\t\t\tif(nl_push > this._n_max_buffer) {\n\t\t\t\tScribable._flush_buffer(this);\n\t\t\t}\n\t\t\t// allow buffer to build\n\t\t\telse if(nl_push) {\n\t\t\t\t// do not worry about clearing timeouts\n\t\t\t\tqueueMicrotask(() => Scribable._flush_buffer(this));\n\t\t\t}\n\t\t}\n\n\t\t// callback\n\t\tfke_transform();\n\t}\n\n\t// queue data to be pushed later\n\t_queue(s_push) {\n\t\tthis._s_push += s_push;\n\n\t\t// internal buffer high water mark\n\t\tif(this._s_push.length > this._n_max_buffer) {\n\t\t\tScribable._flush_buffer(this);\n\t\t}\n\t\telse {\n\t\t\t// do not worry about clearing timeouts\n\t\t\tqueueMicrotask(() => Scribable._flush_buffer(this));\n\t\t}\n\t}\n\n\t// route event object to serialization method\n\tserialize(g_event) {\n\t\tswitch(g_event.type) {\n\t\t\t// rdfjs quad\n\t\t\t// eslint-disable-next-line no-undefined\n\t\t\tcase undefined: return this._serialize_quad(g_event);\n\n\t\t\t// concise triple struct strict-mode\n\t\t\tcase 'c3r': return this._serialize_c3r(g_event.value);\n\n\t\t\t// concise quad struct strict-mode\n\t\t\tcase 'c4r': return this._serialize_c4r(g_event.value);\n\n\t\t\t// array of events\n\t\t\tcase 'array': {\n\t\t\t\t// string building\n\t\t\t\tlet s_write = '';\n\n\t\t\t\t// each subevent\n\t\t\t\tfor(let g_sub of g_event.value) {\n\t\t\t\t\t// build serialization string\n\t\t\t\t\tlet s_push = this.serialize(g_sub);\n\n\t\t\t\t\t// something to push\n\t\t\t\t\tif(s_push) {\n\t\t\t\t\t\ts_write += s_push;\n\t\t\t\t\t}\n\t\t\t\t\t// push was queued\n\t\t\t\t\telse if(this._s_push) {\n\t\t\t\t\t\t// concat to write\n\t\t\t\t\t\ts_write += this._s_push;\n\n\t\t\t\t\t\t// reset push\n\t\t\t\t\t\tthis._s_push = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// all done\n\t\t\t\treturn s_write;\n\t\t\t}\n\n\t\t\t// quad\n\t\t\tcase 'quad': return this._serialize_quad(g_event.value);\n\n\t\t\t// concise triple struct\n\t\t\tcase 'c3': return this._serialize_c3(g_event.value);\n\n\t\t\t// concise quad struct\n\t\t\tcase 'c4': return this._serialize_c4(g_event.value);\n\n\t\t\t// prefixes\n\t\t\tcase 'prefixes': {\n\t\t\t\treturn this._serialize_prefixes(g_event.value);\n\t\t\t}\n\n\t\t\t// comment\n\t\t\tcase 'comment': {\n\t\t\t\treturn this._serialize_comment(g_event.value);\n\t\t\t}\n\n\t\t\t// newline(s)\n\t\t\tcase 'newline':\n\t\t\tcase 'newlines': {\n\t\t\t\treturn this._serialize_newlines(g_event.value);\n\t\t\t}\n\n\t\t\t// no such event type\n\t\t\tdefault: {\n\t\t\t\tthrow new Error(`no such writable data event type for RDF stream: '${g_event.type}'`);\n\t\t\t}\n\t\t}\n\t}\n\n\t// rinse off buffer to writable\n\trinse() {\n\t\tthis._reset();\n\t\tScribable._flush_buffer(this);\n\t}\n\n\t_flush() {\n\t\t// flush buffer\n\t\tScribable._flush_buffer(this);\n\n\t\t// eof\n\t\tthis.push(null);\n\t}\n}\n\nObject.assign(Scribable.prototype, {\n\tisGraphyWritable: true,\n\t_serialize_prefixes: Scribable.prototype._update_prefixes,\n});\n\nmodule.exports = Scribable;\n"],"names":["factory","Scribable","c1","namedNode","$_PREFIX_CACHE","R_XML_ESCAPES","H_XML_ESCAPES","R_NS_XML","escape_xml_text","s_text","replace","s","R_XML_NAME_SIMPLE_EOS","R_XML_NAME_EXTENDED_EOS","XML_Serializer$pair","k_self","sx1_predicate","sx_arc","kt_object","isNamedNode","value","isLiteral","isLanguaged","language","isDatatyped","datatype","isBlankNode","Error","termType","XML_Serializer$predicate","kt_predicate","p_edge_prefix_iri","s_edge_suffix","h_prefixes","_h_prefixes","p_predicate","m_edge_name","exec","slice","index","TEMPORARY_PREFIX","PREFIX_LOOKUP","h_inverse","_h_inverse","si_prefix","p_prefix_iri","si_prefix_tmp","_c_prefixes_tmp","XML_Scriber","constructor","gc_scriber","prefixes","super","this","_b_prefixes_open","_kt_subject","sx_open","_update_prefixes","rdf","push","_serialize_prefixes","h_prefixes_in","b_force_serialize","sx_prefixes","test","_serialize_c3r","hc3r_triples","sx_output","sc1_subject","sx_triples","kt_subject","b_predicates","hc2r_pairs","sc1_predicate","sx_pairs","sc1_object","_serialize_quad","g_quad","kq_quad","from","quad","_s_push","subject","predicate","object","sx_pair","equals","sx_line","_flush","_flush_buffer","Object","assign","_serialize_comment","prototype","_serialize_hash_comment","module","exports","g_config","stream","Readable","gc_readable","iterator","until","s_event","b_return_stream","Promise","fk_until","fe_until","on","e_stream","once","a_args","bucket","s_encoding","g_readable","_readableState","objectMode","fk_bucket","fe_bucket","a_data","pipe","Writable","write","w_event","s_write_encoding","fk_write","writev","a_chunks","fk_writev","s_data","setEncoding","decodeStrings","s_chunk","join","ab_data","Buffer","ab_chunk","concat","length","import","ds_source","w_chunk","end","e_read","emit","Duplex","Transform","demolish","e_destroy","z_chunk","getPrototypeOf","apply","destroy","call","b_is_node","Function","B_BROWSER","B_BROWSERIFY","process","browser","versions","node","version","fke_destroy","destroyed","_writableState","f_emit_close","emitClose","_destroy","e_destroy_re","nextTick","errorEmitted","QuadsToOther","gc_transform","writableObjectMode","readableObjectMode","_as_inputs","Set","ds_src","add","delete","ds_input","Quads_To_JSON_Transform","_transform","fk_transform","JSON","stringify","isolate","Quads_To_Writable","type","quads_to_json","quads_to_writable","source","w_push","isBuffer","read","queueMicrotask","dp_resolve","resolve","fk","then","catch","e_callback","setTimeout","e_define","N_DEFAULT_MAX_BUFFER","gc_scribable","_n_max_buffer","max_buffer","maxBuffer","cache_prefixes","s_prefix_id","p_iri","s_comment","close","drain","error","finish","data","warning","_serialize_newlines","n_newlines","repeat","_serialize_c4r","hc4r_quads","a_unions","s_write","sc1_graph","s_warning","map","sc1","verbose","console","warn","_serialize_c3","name","_serialize_c4","b_terse","cachePrefixes","g_event","fke_transform","w_write","serialize","e_serialize","nl_push","_queue","s_push","undefined","g_sub","rinse","_reset","isGraphyWritable"],"sourceRoot":""}