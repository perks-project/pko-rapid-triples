{"version":3,"file":"js/954.f7238231.js","mappings":"yMAAA,MAAMA,EACJ,WAAAC,CAAaC,GACXC,KAAKD,OAASA,EACdC,KAAKC,MAAQ,EACf,CAEA,IAAAC,CAAMC,GACJH,KAAKC,MAAMC,KAAKC,EAClB,CAEA,GAAAC,GACEJ,KAAKD,OAAOG,KAAKF,KAAKC,OACtBD,KAAKD,OAAOG,KAAK,KACnB,EAGF,QChBA,MAAMG,EACJ,WAAAP,CAAaC,GACXC,KAAKD,OAASA,EACdC,KAAKM,OAAQ,EAEbN,KAAKD,OAAOG,KAAK,IACnB,CAEA,IAAAA,CAAMC,GACAH,KAAKM,MACPN,KAAKM,OAAQ,EAEbN,KAAKD,OAAOG,KAAK,KAGnBF,KAAKD,OAAOG,KAAKK,KAAKC,UAAUL,GAClC,CAEA,GAAAC,GACEJ,KAAKD,OAAOG,KAAK,KACjBF,KAAKD,OAAOG,KAAK,KACnB,EAGF,QCpBA,MAAMO,UAAyB,EAAAC,SAC7B,WAAAZ,CAAaa,GAAO,SAAEC,EAAW,UAAa,CAAC,GAc7C,GAbAC,MAAM,CACJC,YAAY,EACZC,KAAM,SAGS,WAAbH,IACFZ,KAAKgB,QAAU,IAAI,EAAchB,OAGlB,WAAbY,IACFZ,KAAKgB,QAAU,IAAI,EAAchB,QAG9BA,KAAKgB,QACR,MAAM,IAAIC,MAAM,qBAAqBL,KAGvCD,EAAMO,GAAG,QAAQC,IACf,MAAMhB,EAAS,CAAC,EAChB,IAAIiB,EAASjB,EAEe,iBAAxBgB,EAAKE,MAAMC,WACbnB,EAAO,OAASgB,EAAKE,MAAME,MAC3BpB,EAAO,UAAY,CAAC,EACpBiB,EAASjB,EAAO,WAGlBiB,EAAO,OAASX,EAAiBe,aAAaL,EAAKM,SAEtB,oDAAzBN,EAAKO,UAAUH,MACjBH,EAAO,SAAWX,EAAiBe,aAAaL,EAAKQ,QAErDP,EAAOD,EAAKO,UAAUH,OAASd,EAAiBmB,YAAYT,EAAKQ,QAGnE3B,KAAKgB,QAAQd,KAAKC,EAAM,IAG1BQ,EAAMO,GAAG,OAAO,IAAMlB,KAAKgB,QAAQZ,QAEnCO,EAAMO,GAAG,SAASW,GAAO7B,KAAK8B,KAAK,QAASD,IAC9C,CAEA,mBAAOL,CAAcC,GACnB,MAA4B,cAArBA,EAAQH,SAA2B,KAAOG,EAAQF,MAAQE,EAAQF,KAC3E,CAEA,kBAAOK,CAAaD,GAClB,MAAwB,cAApBA,EAAOL,SACF,CAAE,MAAOK,EAAOJ,OAGD,cAApBI,EAAOL,SACF,CAAE,MAAO,KAAOK,EAAOJ,OAG5BI,EAAOI,SACF,CAAE,YAAaJ,EAAOI,SAAU,SAAUJ,EAAOJ,OAC/CI,EAAOK,UAAsC,4CAA1BL,EAAOK,SAAST,MACrC,CAAE,QAASI,EAAOK,SAAST,MAAO,SAAUI,EAAOJ,OAEnDI,EAAOJ,KAElB,EAGF,QCrEA,MAAMU,UAAmB,IACvB,WAAAnC,CAAaoC,GACXrB,MAAM,EAAkBqB,EAC1B,EAGF,QCRA,MAAMC,UAA+B,EACjC,WAAArC,KAAiBsC,GAAS,CAAC,GACvBvB,MAAM,CAAED,SAAU,YAAawB,GACnC,EAEJ,O,sBCNA,MAAMC,EACJ,WAAAvC,CAAawC,EAAMJ,GACjBlC,KAAKsC,KAAOA,EACZtC,KAAKkC,QAAUA,CACjB,CAEA,MAAAK,CAAQ5B,EAAOuB,GACb,MAAMM,EAAS,IAAIxC,KAAKsC,KAAK3B,EAAO,IAAKX,KAAKkC,WAAYA,IAY1D,OAVAvB,EAAMO,GAAG,OAAO,KACTsB,EAAOC,UACVD,EAAOV,KAAK,MACd,IAGFnB,EAAMO,GAAG,SAASW,IAChBW,EAAOV,KAAK,QAASD,EAAG,IAGnBW,CACT,EAGF,K","sources":["webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/serializer-jsonld/lib/ObjectEncoder.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/serializer-jsonld/lib/StringEncoder.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/serializer-jsonld/lib/SerializerStream.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/serializer-jsonld/index.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/lib/CustomJsonLdSerializer.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/sink/index.js"],"sourcesContent":["class ObjectEncoder {\n  constructor (stream) {\n    this.stream = stream\n    this.array = []\n  }\n\n  push (jsonld) {\n    this.array.push(jsonld)\n  }\n\n  end () {\n    this.stream.push(this.array)\n    this.stream.push(null)\n  }\n}\n\nexport default ObjectEncoder\n","class StringEncoder {\n  constructor (stream) {\n    this.stream = stream\n    this.first = true\n\n    this.stream.push('[')\n  }\n\n  push (jsonld) {\n    if (this.first) {\n      this.first = false\n    } else {\n      this.stream.push(',')\n    }\n\n    this.stream.push(JSON.stringify(jsonld))\n  }\n\n  end () {\n    this.stream.push(']')\n    this.stream.push(null)\n  }\n}\n\nexport default StringEncoder\n","import { Readable } from 'readable-stream'\nimport ObjectEncoder from './ObjectEncoder.js'\nimport StringEncoder from './StringEncoder.js'\n\nclass SerializerStream extends Readable {\n  constructor (input, { encoding = 'object' } = {}) {\n    super({\n      objectMode: true,\n      read: () => {}\n    })\n\n    if (encoding === 'object') {\n      this.encoder = new ObjectEncoder(this)\n    }\n\n    if (encoding === 'string') {\n      this.encoder = new StringEncoder(this)\n    }\n\n    if (!this.encoder) {\n      throw new Error(`unknown encoding: ${encoding}`)\n    }\n\n    input.on('data', quad => {\n      const jsonld = {}\n      let triple = jsonld\n\n      if (quad.graph.termType !== 'DefaultGraph') {\n        jsonld['@id'] = quad.graph.value\n        jsonld['@graph'] = {}\n        triple = jsonld['@graph']\n      }\n\n      triple['@id'] = SerializerStream.subjectValue(quad.subject)\n\n      if (quad.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type') {\n        triple['@type'] = SerializerStream.subjectValue(quad.object)\n      } else {\n        triple[quad.predicate.value] = SerializerStream.objectValue(quad.object)\n      }\n\n      this.encoder.push(jsonld)\n    })\n\n    input.on('end', () => this.encoder.end())\n\n    input.on('error', err => this.emit('error', err))\n  }\n\n  static subjectValue (subject) {\n    return subject.termType === 'BlankNode' ? '_:' + subject.value : subject.value\n  }\n\n  static objectValue (object) {\n    if (object.termType === 'NamedNode') {\n      return { '@id': object.value }\n    }\n\n    if (object.termType === 'BlankNode') {\n      return { '@id': '_:' + object.value }\n    }\n\n    if (object.language) {\n      return { '@language': object.language, '@value': object.value }\n    } else if (object.datatype && object.datatype.value !== 'http://www.w3.org/2001/XMLSchema#string') {\n      return { '@type': object.datatype.value, '@value': object.value }\n    } else {\n      return object.value\n    }\n  }\n}\n\nexport default SerializerStream\n","import Sink from '@rdfjs/sink'\nimport SerializerStream from './lib/SerializerStream.js'\n\nclass Serializer extends Sink {\n  constructor (options) {\n    super(SerializerStream, options)\n  }\n}\n\nexport default Serializer\n","import JsonLdSerializer from '@rdfjs/serializer-jsonld';\nclass CustomJsonLdSerializer extends JsonLdSerializer {\n    constructor({ ...args } = {}) {\n        super({ encoding: 'string', ...args });\n    }\n}\nexport default CustomJsonLdSerializer;\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, { ...this.options, ...options })\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', err => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nexport default Sink\n"],"names":["ObjectEncoder","constructor","stream","this","array","push","jsonld","end","StringEncoder","first","JSON","stringify","SerializerStream","Readable","input","encoding","super","objectMode","read","encoder","Error","on","quad","triple","graph","termType","value","subjectValue","subject","predicate","object","objectValue","err","emit","language","datatype","Serializer","options","CustomJsonLdSerializer","args","Sink","Impl","import","output","readable"],"sourceRoot":""}