{"version":3,"file":"js/208.e57d624c.js","mappings":"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","sources":["webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/index.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/lib/ParserStream.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/index.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/BlankNode.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/DataFactory.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/DefaultGraph.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/Literal.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/NamedNode.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/Quad.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/Variable.js","webpack://rapid-triples/./node_modules/@rdfjs/parser-n3/node_modules/@rdfjs/data-model/lib/fromTerm.js","webpack://rapid-triples/./node_modules/@rdfjs/sink/index.js","webpack://rapid-triples/./node_modules/n3/src/N3Util.js","webpack://rapid-triples/./node_modules/n3/src/N3Writer.js","webpack://rapid-triples/./node_modules/n3/src/N3Store.js","webpack://rapid-triples/./node_modules/n3/src/N3StoreFactory.js","webpack://rapid-triples/./node_modules/n3/src/N3Reasoner.js","webpack://rapid-triples/./node_modules/n3/src/N3StreamWriter.js","webpack://rapid-triples/./node_modules/n3/src/index.js","webpack://rapid-triples/./node_modules/readable-to-readable/index.js"],"sourcesContent":["const ParserStream = require('./lib/ParserStream')\nconst Sink = require('@rdfjs/sink')\n\nclass Parser extends Sink {\n  constructor (options) {\n    super(ParserStream, options)\n  }\n}\n\nmodule.exports = Parser\n","const N3 = require('n3')\nconst rdf = require('@rdfjs/data-model')\nconst { finished } = require('readable-stream')\nconst ReadableToReadable = require('readable-to-readable')\n\nclass ParserStream extends ReadableToReadable {\n  constructor (input, { baseIRI = '', factory = rdf } = {}) {\n    const parser = new N3.StreamParser({ baseIRI, factory })\n\n    super(parser, { objectMode: true })\n\n    parser.on('prefix', (prefix, term) => {\n      this.emit('prefix', prefix, term)\n    })\n\n    parser.on('error', err => {\n      this.destroy(err)\n    })\n\n    finished(this, () => {\n      parser.end()\n    })\n\n    input.pipe(parser)\n  }\n}\n\nmodule.exports = ParserStream\n","const DataFactory = require('./lib/DataFactory.js')\n\nmodule.exports = DataFactory\n","class BlankNode {\n  constructor (id) {\n    this.value = id || ('b' + (++BlankNode.nextId))\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nBlankNode.prototype.termType = 'BlankNode'\n\nBlankNode.nextId = 0\n\nmodule.exports = BlankNode\n","const BlankNode = require('./BlankNode.js')\nconst DefaultGraph = require('./DefaultGraph.js')\nconst fromTermRaw = require('./fromTerm.js')\nconst Literal = require('./Literal.js')\nconst NamedNode = require('./NamedNode.js')\nconst Quad = require('./Quad.js')\nconst Variable = require('./Variable.js')\n\nfunction namedNode (value) {\n  return new NamedNode(value)\n}\n\nfunction blankNode (value) {\n  return new BlankNode(value)\n}\n\nfunction literal (value, languageOrDatatype) {\n  if (typeof languageOrDatatype === 'string') {\n    if (languageOrDatatype.indexOf(':') === -1) {\n      return new Literal(value, languageOrDatatype)\n    }\n\n    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))\n  }\n\n  return new Literal(value, null, languageOrDatatype)\n}\n\nfunction variable (value) {\n  return new Variable(value)\n}\n\nfunction defaultGraph () {\n  return DataFactory.defaultGraphInstance\n}\n\nfunction triple (subject, predicate, object) {\n  return DataFactory.quad(subject, predicate, object)\n}\n\nfunction quad (subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)\n}\n\nfunction fromTerm (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nfunction fromQuad (original) {\n  return fromTermRaw.call(DataFactory, original)\n}\n\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  literal,\n  variable,\n  defaultGraph,\n  triple,\n  quad,\n  fromTerm,\n  fromQuad,\n  defaultGraphInstance: new DefaultGraph()\n}\n\nmodule.exports = DataFactory\n","class DefaultGraph {\n  equals (other) {\n    return !!other && other.termType === this.termType\n  }\n}\n\nDefaultGraph.prototype.termType = 'DefaultGraph'\nDefaultGraph.prototype.value = ''\n\nmodule.exports = DefaultGraph\n","const NamedNode = require('./NamedNode.js')\n\nclass Literal {\n  constructor (value, language, datatype) {\n    this.value = value\n    this.datatype = Literal.stringDatatype\n    this.language = ''\n\n    if (language) {\n      this.language = language\n      this.datatype = Literal.langStringDatatype\n    } else if (datatype) {\n      this.datatype = datatype\n    }\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value &&\n      other.language === this.language && other.datatype.equals(this.datatype)\n  }\n}\n\nLiteral.prototype.termType = 'Literal'\n\nLiteral.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')\nLiteral.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')\n\nmodule.exports = Literal\n","class NamedNode {\n  constructor (iri) {\n    this.value = iri\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nNamedNode.prototype.termType = 'NamedNode'\n\nmodule.exports = NamedNode\n","const DefaultGraph = require('./DefaultGraph.js')\n\nclass Quad {\n  constructor (subject, predicate, object, graph) {\n    this.subject = subject\n    this.predicate = predicate\n    this.object = object\n\n    if (graph) {\n      this.graph = graph\n    } else {\n      this.graph = new DefaultGraph()\n    }\n  }\n\n  equals (other) {\n    // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n    return !!other && (other.termType === 'Quad' || !other.termType) &&\n      other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&\n      other.object.equals(this.object) && other.graph.equals(this.graph)\n  }\n}\n\nQuad.prototype.termType = 'Quad'\nQuad.prototype.value = ''\n\nmodule.exports = Quad\n","class Variable {\n  constructor (name) {\n    this.value = name\n  }\n\n  equals (other) {\n    return !!other && other.termType === this.termType && other.value === this.value\n  }\n}\n\nVariable.prototype.termType = 'Variable'\n\nmodule.exports = Variable\n","function fromTerm (original) {\n  if (!original) {\n    return null\n  }\n\n  if (original.termType === 'BlankNode') {\n    return this.blankNode(original.value)\n  }\n\n  if (original.termType === 'DefaultGraph') {\n    return this.defaultGraph()\n  }\n\n  if (original.termType === 'Literal') {\n    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))\n  }\n\n  if (original.termType === 'NamedNode') {\n    return this.namedNode(original.value)\n  }\n\n  if (original.termType === 'Quad') {\n    const subject = this.fromTerm(original.subject)\n    const predicate = this.fromTerm(original.predicate)\n    const object = this.fromTerm(original.object)\n    const graph = this.fromTerm(original.graph)\n\n    return this.quad(subject, predicate, object, graph)\n  }\n\n  if (original.termType === 'Variable') {\n    return this.variable(original.value)\n  }\n\n  throw new Error(`unknown termType ${original.termType}`)\n}\n\nmodule.exports = fromTerm\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, Object.assign({}, this.options, options))\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', (err) => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nmodule.exports = Sink\n","// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri.value || iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals(other) {\n    return other === this;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n      if (options.baseIRI) {\n        this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)\n            }${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);\n        this._baseLength = options.baseIRI.length;\n      }\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    let quadsString = '';\n    for (const quad of quads)\n      quadsString += this.quadToString(quad.subject, quad.predicate, quad.object, quad.graph);\n    return quadsString;\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri))\n      iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF-star quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist, /[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([_a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n\nfunction escapeRegex(regex) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}\n","// **N3Store** objects store N3 quads by graph in memory.\nimport { Readable } from 'readable-stream';\nimport { default as N3DataFactory, termToId, termFromId } from './N3DataFactory';\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nimport N3Writer from './N3Writer';\n\nconst ITERATOR = Symbol('iter');\n\nfunction merge(target, source, depth = 4) {\n  if (depth === 0)\n    return Object.assign(target, source);\n\n  for (const key in source)\n    target[key] = merge(target[key] || Object.create(null), source[key], depth - 1);\n\n  return target;\n}\n\n/**\n * Determines the intersection of the `_graphs` index s1 and s2.\n * s1 and s2 *must* belong to Stores that share an `_entityIndex`.\n *\n * False is returned when there is no intersection; this should\n * *not* be set as the value for an index.\n */\nfunction intersect(s1, s2, depth = 4) {\n  let target = false;\n\n  for (const key in s1) {\n    if (key in s2) {\n      const intersection = depth === 0 ? null : intersect(s1[key], s2[key], depth - 1);\n      if (intersection !== false) {\n        target = target || Object.create(null);\n        target[key] = intersection;\n      }\n      // Depth 3 is the 'subjects', 'predicates' and 'objects' keys.\n      // If the 'subjects' index is empty, so will the 'predicates' and 'objects' index.\n      else if (depth === 3) {\n        return false;\n      }\n    }\n  }\n\n  return target;\n}\n\n/**\n * Determines the difference of the `_graphs` index s1 and s2.\n * s1 and s2 *must* belong to Stores that share an `_entityIndex`.\n *\n * False is returned when there is no difference; this should\n * *not* be set as the value for an index.\n */\nfunction difference(s1, s2, depth = 4) {\n  let target = false;\n\n  for (const key in s1) {\n    // When the key is not in the index, then none of the triples defined by s1[key] are\n    // in s2 and so we want to copy them over to the resultant store.\n    if (!(key in s2)) {\n      target = target || Object.create(null);\n      target[key] = depth === 0 ? null : merge({}, s1[key], depth - 1);\n    }\n    else if (depth !== 0) {\n      const diff = difference(s1[key], s2[key], depth - 1);\n      if (diff !== false) {\n        target = target || Object.create(null);\n        target[key] = diff;\n      }\n      // Depth 3 is the 'subjects', 'predicates' and 'objects' keys.\n      // If the 'subjects' index is empty, so will the 'predicates' and 'objects' index.\n      else if (depth === 3) {\n        return false;\n      }\n    }\n  }\n\n  return target;\n}\n\n// ## Constructor\nexport class N3EntityIndex {\n  constructor(options = {}) {\n    this._id = 1;\n    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,\n    // saving memory by using only numbers as keys in `_graphs`\n    this._ids = Object.create(null);\n    this._ids[''] = 1;\n     // inverse of `_ids`\n    this._entities = Object.create(null);\n    this._entities[1] = '';\n    // `_blankNodeIndex` is the index of the last automatically named blank node\n    this._blankNodeIndex = 0;\n    this._factory = options.factory || N3DataFactory;\n  }\n\n  _termFromId(id) {\n    if (id[0] === '.') {\n      const entities = this._entities;\n      const terms = id.split('.');\n      const q = this._factory.quad(\n        this._termFromId(entities[terms[1]]),\n        this._termFromId(entities[terms[2]]),\n        this._termFromId(entities[terms[3]]),\n        terms[4] && this._termFromId(entities[terms[4]]),\n      );\n      return q;\n    }\n    return termFromId(id, this._factory);\n  }\n\n  _termToNumericId(term) {\n    if (term.termType === 'Quad') {\n      const s = this._termToNumericId(term.subject),\n          p = this._termToNumericId(term.predicate),\n          o = this._termToNumericId(term.object);\n      let g;\n\n      return s && p && o && (isDefaultGraph(term.graph) || (g = this._termToNumericId(term.graph))) &&\n        this._ids[g ? `.${s}.${p}.${o}.${g}` : `.${s}.${p}.${o}`];\n    }\n    return this._ids[termToId(term)];\n  }\n\n  _termToNewNumericId(term) {\n    // This assumes that no graph term is present - we may wish to error if there is one\n    const str = term && term.termType === 'Quad' ?\n      `.${this._termToNewNumericId(term.subject)}.${this._termToNewNumericId(term.predicate)}.${this._termToNewNumericId(term.object)}${\n        isDefaultGraph(term.graph) ? '' : `.${this._termToNewNumericId(term.graph)}`\n      }`\n      : termToId(term);\n\n    return this._ids[str] || (this._ids[this._entities[++this._id] = str] = this._id);\n  }\n\n  createBlankNode(suggestedName) {\n    let name, index;\n    // Generate a name based on the suggested name\n    if (suggestedName) {\n      name = suggestedName = `_:${suggestedName}`, index = 1;\n      while (this._ids[name])\n        name = suggestedName + index++;\n    }\n    // Generate a generic blank node name\n    else {\n      do { name = `_:b${this._blankNodeIndex++}`; }\n      while (this._ids[name]);\n    }\n    // Add the blank node to the entities, avoiding the generation of duplicates\n    this._ids[name] = ++this._id;\n    this._entities[this._id] = name;\n    return this._factory.blankNode(name.substr(2));\n  }\n}\n\n// ## Constructor\nexport default class N3Store {\n  constructor(quads, options) {\n    // The number of quads is initially zero\n    this._size = 0;\n    // `_graphs` contains subject, predicate, and object indexes per graph\n    this._graphs = Object.create(null);\n\n    // Shift parameters if `quads` is not given\n    if (!options && quads && !quads[0])\n      options = quads, quads = null;\n    options = options || {};\n    this._factory = options.factory || N3DataFactory;\n    this._entityIndex = options.entityIndex || new N3EntityIndex({ factory: this._factory });\n    this._entities = this._entityIndex._entities;\n    this._termFromId = this._entityIndex._termFromId.bind(this._entityIndex);\n    this._termToNumericId = this._entityIndex._termToNumericId.bind(this._entityIndex);\n    this._termToNewNumericId = this._entityIndex._termToNewNumericId.bind(this._entityIndex);\n\n    // Add quads if passed\n    if (quads)\n      this.addQuads(quads);\n  }\n\n  // ## Public properties\n\n  // ### `size` returns the number of quads in the store\n  get size() {\n    // Return the quad count if if was cached\n    let size = this._size;\n    if (size !== null)\n      return size;\n\n    // Calculate the number of quads by counting to the deepest level\n    size = 0;\n    const graphs = this._graphs;\n    let subjects, subject;\n    for (const graphKey in graphs)\n      for (const subjectKey in (subjects = graphs[graphKey].subjects))\n        for (const predicateKey in (subject = subjects[subjectKey]))\n          size += Object.keys(subject[predicateKey]).length;\n    return this._size = size;\n  }\n\n  // ## Private methods\n\n  // ### `_addToIndex` adds a quad to a three-layered index.\n  // Returns if the index has changed, if the entry did not already exist.\n  _addToIndex(index0, key0, key1, key2) {\n    // Create layers as necessary\n    const index1 = index0[key0] || (index0[key0] = {});\n    const index2 = index1[key1] || (index1[key1] = {});\n    // Setting the key to _any_ value signals the presence of the quad\n    const existed = key2 in index2;\n    if (!existed)\n      index2[key2] = null;\n    return !existed;\n  }\n\n  // ### `_removeFromIndex` removes a quad from a three-layered index\n  _removeFromIndex(index0, key0, key1, key2) {\n    // Remove the quad from the index\n    const index1 = index0[key0], index2 = index1[key1];\n    delete index2[key2];\n\n    // Remove intermediary index layers if they are empty\n    for (const key in index2) return;\n    delete index1[key1];\n    for (const key in index1) return;\n    delete index0[key0];\n  }\n\n  // ### `_findInIndex` finds a set of quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  // `name0`, `name1`, and `name2` are the names of the keys at each level,\n  // used when reconstructing the resulting quad\n  // (for instance: _subject_, _predicate_, and _object_).\n  // Finally, `graphId` will be the graph of the created quads.\n  *_findInIndex(index0, key0, key1, key2, name0, name1, name2, graphId) {\n    let tmp, index1, index2;\n    const entityKeys = this._entities;\n    const graph = this._termFromId(entityKeys[graphId]);\n    const parts = { subject: null, predicate: null, object: null };\n\n    // If a key is specified, use only that part of index 0.\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        parts[name0] = this._termFromId(entityKeys[value0]);\n        // If a key is specified, use only that part of index 1.\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            parts[name1] = this._termFromId(entityKeys[value1]);\n            // If a key is specified, use only that part of index 2, if it exists.\n            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2);\n            // Create quads for all items found in index 2.\n            for (let l = 0; l < values.length; l++) {\n              parts[name2] = this._termFromId(entityKeys[values[l]]);\n              yield this._factory.quad(parts.subject, parts.predicate, parts.object, graph);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  // ### `_loop` executes the callback on all keys of index 0\n  _loop(index0, callback) {\n    for (const key0 in index0)\n      callback(key0);\n  }\n\n  // ### `_loopByKey0` executes the callback on all keys of a certain entry in index 0\n  _loopByKey0(index0, key0, callback) {\n    let index1, key1;\n    if (index1 = index0[key0]) {\n      for (key1 in index1)\n        callback(key1);\n    }\n  }\n\n  // ### `_loopByKey1` executes the callback on given keys of all entries in index 0\n  _loopByKey1(index0, key1, callback) {\n    let key0, index1;\n    for (key0 in index0) {\n      index1 = index0[key0];\n      if (index1[key1])\n        callback(key0);\n    }\n  }\n\n  // ### `_loopBy2Keys` executes the callback on given keys of certain entries in index 2\n  _loopBy2Keys(index0, key0, key1, callback) {\n    let index1, index2, key2;\n    if ((index1 = index0[key0]) && (index2 = index1[key1])) {\n      for (key2 in index2)\n        callback(key2);\n    }\n  }\n\n  // ### `_countInIndex` counts matching quads in a three-layered index.\n  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.\n  // Any of these keys can be undefined, which is interpreted as a wildcard.\n  _countInIndex(index0, key0, key1, key2) {\n    let count = 0, tmp, index1, index2;\n\n    // If a key is specified, count only that part of index 0\n    if (key0) (tmp = index0, index0 = {})[key0] = tmp[key0];\n    for (const value0 in index0) {\n      if (index1 = index0[value0]) {\n        // If a key is specified, count only that part of index 1\n        if (key1) (tmp = index1, index1 = {})[key1] = tmp[key1];\n        for (const value1 in index1) {\n          if (index2 = index1[value1]) {\n            // If a key is specified, count the quad if it exists\n            if (key2) (key2 in index2) && count++;\n            // Otherwise, count all quads\n            else count += Object.keys(index2).length;\n          }\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `_getGraphs` returns an array with the given graph,\n  // or all graphs if the argument is null or undefined.\n  _getGraphs(graph) {\n    graph = graph === '' ? 1 : (graph && (this._termToNumericId(graph) || -1));\n    return typeof graph !== 'number' ? this._graphs : { [graph]: this._graphs[graph] };\n  }\n\n  // ### `_uniqueEntities` returns a function that accepts an entity ID\n  // and passes the corresponding entity to callback if it hasn't occurred before.\n  _uniqueEntities(callback) {\n    const uniqueIds = Object.create(null);\n    return id => {\n      if (!(id in uniqueIds)) {\n        uniqueIds[id] = true;\n        callback(this._termFromId(this._entities[id], this._factory));\n      }\n    };\n  }\n\n  // ## Public methods\n\n  // ### `add` adds the specified quad to the dataset.\n  // Returns the dataset instance it was called on.\n  // Existing quads, as defined in Quad.equals, will be ignored.\n  add(quad) {\n    this.addQuad(quad);\n    return this;\n  }\n\n  // ### `addQuad` adds a new quad to the store.\n  // Returns if the quad index has changed, if the quad did not already exist.\n  addQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      graph = subject.graph, object = subject.object,\n        predicate = subject.predicate, subject = subject.subject;\n\n    // Convert terms to internal string representation\n    graph = graph ? this._termToNewNumericId(graph) : 1;\n\n    // Find the graph that will contain the triple\n    let graphItem = this._graphs[graph];\n    // Create the graph if it doesn't exist yet\n    if (!graphItem) {\n      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} };\n      // Freezing a graph helps subsequent `add` performance,\n      // and properties will never be modified anyway\n      Object.freeze(graphItem);\n    }\n\n    // Since entities can often be long IRIs, we avoid storing them in every index.\n    // Instead, we have a separate index that maps entities to numbers,\n    // which are then used as keys in the other indexes.\n    subject   = this._termToNewNumericId(subject);\n    predicate = this._termToNewNumericId(predicate);\n    object    = this._termToNewNumericId(object);\n\n    if (!this._addToIndex(graphItem.subjects,   subject,   predicate, object))\n      return false;\n    this._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._addToIndex(graphItem.objects,    object,    subject,   predicate);\n\n    // The cached quad count is now invalid\n    this._size = null;\n    return true;\n  }\n\n  // ### `addQuads` adds multiple quads to the store\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `delete` removes the specified quad from the dataset.\n  // Returns the dataset instance it was called on.\n  delete(quad) {\n    this.removeQuad(quad);\n    return this;\n  }\n\n  // ### `has` determines whether a dataset includes a certain quad or quad pattern.\n  has(subjectOrQuad, predicate, object, graph) {\n    if (subjectOrQuad && subjectOrQuad.subject)\n      ({ subject: subjectOrQuad, predicate, object, graph } = subjectOrQuad);\n    return !this.readQuads(subjectOrQuad, predicate, object, graph).next().done;\n  }\n\n  // ### `import` adds a stream of quads to the store\n  import(stream) {\n    stream.on('data', quad => { this.addQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeQuad` removes a quad from the store if it exists\n  removeQuad(subject, predicate, object, graph) {\n    // Shift arguments if a quad object is given instead of components\n    if (!predicate)\n      ({ subject, predicate, object, graph } = subject);\n    // Convert terms to internal string representation\n    graph = graph ? this._termToNumericId(graph) : 1;\n\n    // Find internal identifiers for all components\n    // and verify the quad exists.\n    const graphs = this._graphs;\n    let graphItem, subjects, predicates;\n    if (!(subject    = subject && this._termToNumericId(subject)) || !(predicate = predicate && this._termToNumericId(predicate)) ||\n        !(object     = object && this._termToNumericId(object))  || !(graphItem = graphs[graph])  ||\n        !(subjects   = graphItem.subjects[subject]) ||\n        !(predicates = subjects[predicate]) ||\n        !(object in predicates))\n      return false;\n\n    // Remove it from all indexes\n    this._removeFromIndex(graphItem.subjects,   subject,   predicate, object);\n    this._removeFromIndex(graphItem.predicates, predicate, object,    subject);\n    this._removeFromIndex(graphItem.objects,    object,    subject,   predicate);\n    if (this._size !== null) this._size--;\n\n    // Remove the graph if it is empty\n    for (subject in graphItem.subjects) return true;\n    delete graphs[graph];\n    return true;\n  }\n\n  // ### `removeQuads` removes multiple quads from the store\n  removeQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.removeQuad(quads[i]);\n  }\n\n  // ### `remove` removes a stream of quads from the store\n  remove(stream) {\n    stream.on('data', quad => { this.removeQuad(quad); });\n    return stream;\n  }\n\n  // ### `removeMatches` removes all matching quads from the store\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  removeMatches(subject, predicate, object, graph) {\n    const stream = new Readable({ objectMode: true });\n\n    const iterable = this.readQuads(subject, predicate, object, graph);\n    stream._read = size => {\n      while (--size >= 0) {\n        const { done, value } = iterable.next();\n        if (done) {\n          stream.push(null);\n          return;\n        }\n        stream.push(value);\n      }\n    };\n\n    return this.remove(stream);\n  }\n\n  // ### `deleteGraph` removes all triples with the given graph from the store\n  deleteGraph(graph) {\n    return this.removeMatches(null, null, null, graph);\n  }\n\n  // ### `getQuads` returns an array of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getQuads(subject, predicate, object, graph) {\n    return [...this.readQuads(subject, predicate, object, graph)];\n  }\n\n  /**\n   * `readQuads` returns a generator of quads matching a pattern.\n   * Setting any field to `undefined` or `null` indicates a wildcard.\n   * @deprecated Use `match` instead.\n   */\n  *readQuads(subject, predicate, object, graph) {\n    const graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (subject   && !(subjectId   = this._termToNumericId(subject))   ||\n        predicate && !(predicateId = this._termToNumericId(predicate)) ||\n        object    && !(objectId    = this._termToNumericId(object)))\n      return;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the object index will be the fastest\n            yield* this._findInIndex(content.objects, objectId, subjectId, predicateId,\n                              'object', 'subject', 'predicate', graphId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            yield* this._findInIndex(content.subjects, subjectId, predicateId, null,\n                              'subject', 'predicate', 'object', graphId);\n        }\n        else if (predicateId)\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          yield* this._findInIndex(content.predicates, predicateId, objectId, null,\n                            'predicate', 'object', 'subject', graphId);\n        else if (objectId)\n          // If only object is given, the object index will be the fastest\n          yield* this._findInIndex(content.objects, objectId, null, null,\n                            'object', 'subject', 'predicate', graphId);\n        else\n          // If nothing is given, iterate subjects and predicates first\n          yield* this._findInIndex(content.subjects, null, null, null,\n                            'subject', 'predicate', 'object', graphId);\n      }\n    }\n  }\n\n  // ### `match` returns a new dataset that is comprised of all quads in the current instance matching the given arguments.\n  // The logic described in Quad Matching is applied for each quad in this dataset to check if it should be included in the output dataset.\n  // Note: This method always returns a new DatasetCore, even if that dataset contains no quads.\n  // Note: Since a DatasetCore is an unordered set, the order of the quads within the returned sequence is arbitrary.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  // For backwards compatibility, the object return also implements the Readable stream interface.\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this, subject, predicate, object, graph, { entityIndex: this._entityIndex });\n  }\n\n  // ### `countQuads` returns the number of quads matching a pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  countQuads(subject, predicate, object, graph) {\n    const graphs = this._getGraphs(graph);\n    let count = 0, content, subjectId, predicateId, objectId;\n\n    // Translate IRIs to internal index keys.\n    if (subject   && !(subjectId   = this._termToNumericId(subject))   ||\n        predicate && !(predicateId = this._termToNumericId(predicate)) ||\n        object    && !(objectId    = this._termToNumericId(object)))\n      return 0;\n\n    for (const graphId in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graphId]) {\n        // Choose the optimal index, based on what fields are present\n        if (subject) {\n          if (object)\n            // If subject and object are given, the object index will be the fastest\n            count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n          else\n            // If only subject and possibly predicate are given, the subject index will be the fastest\n            count += this._countInIndex(content.subjects, subjectId, predicateId, objectId);\n        }\n        else if (predicate) {\n          // If only predicate and possibly object are given, the predicate index will be the fastest\n          count += this._countInIndex(content.predicates, predicateId, objectId, subjectId);\n        }\n        else {\n          // If only object is possibly given, the object index will be the fastest\n          count += this._countInIndex(content.objects, objectId, subjectId, predicateId);\n        }\n      }\n    }\n    return count;\n  }\n\n  // ### `forEach` executes the callback on all quads.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forEach(callback, subject, predicate, object, graph) {\n    this.some(quad => {\n      callback(quad, this);\n      return false;\n    }, subject, predicate, object, graph);\n  }\n\n  // ### `every` executes the callback on all quads,\n  // and returns `true` if it returns truthy for all them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  every(callback, subject, predicate, object, graph) {\n    return !this.some(quad => !callback(quad, this), subject, predicate, object, graph);\n  }\n\n  // ### `some` executes the callback on all quads,\n  // and returns `true` if it returns truthy for any of them.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  some(callback, subject, predicate, object, graph) {\n    for (const quad of this.readQuads(subject, predicate, object, graph))\n      if (callback(quad))\n        return true;\n    return false;\n  }\n\n  // ### `getSubjects` returns all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getSubjects(predicate, object, graph) {\n    const results = [];\n    this.forSubjects(s => { results.push(s); }, predicate, object, graph);\n    return results;\n  }\n\n  // ### `forSubjects` executes the callback on all subjects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forSubjects(callback, predicate, object, graph) {\n    const graphs = this._getGraphs(graph);\n    let content, predicateId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (predicate && !(predicateId = this._termToNumericId(predicate)) ||\n        object    && !(objectId    = this._termToNumericId(object)))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (predicateId) {\n          if (objectId)\n            // If predicate and object are given, the POS index is best.\n            this._loopBy2Keys(content.predicates, predicateId, objectId, callback);\n          else\n            // If only predicate is given, the SPO index is best.\n            this._loopByKey1(content.subjects, predicateId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the OSP index is best.\n          this._loopByKey0(content.objects, objectId, callback);\n        else\n          // If no params given, iterate all the subjects\n          this._loop(content.subjects, callback);\n      }\n    }\n  }\n\n  // ### `getPredicates` returns all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getPredicates(subject, object, graph) {\n    const results = [];\n    this.forPredicates(p => { results.push(p); }, subject, object, graph);\n    return results;\n  }\n\n  // ### `forPredicates` executes the callback on all predicates that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forPredicates(callback, subject, object, graph) {\n    const graphs = this._getGraphs(graph);\n    let content, subjectId, objectId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (subject   && !(subjectId   = this._termToNumericId(subject))   ||\n        object    && !(objectId    = this._termToNumericId(object)))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (objectId)\n            // If subject and object are given, the OSP index is best.\n            this._loopBy2Keys(content.objects, objectId, subjectId, callback);\n          else\n            // If only subject is given, the SPO index is best.\n            this._loopByKey0(content.subjects, subjectId, callback);\n        }\n        else if (objectId)\n          // If only object is given, the POS index is best.\n          this._loopByKey1(content.predicates, objectId, callback);\n        else\n          // If no params given, iterate all the predicates.\n          this._loop(content.predicates, callback);\n      }\n    }\n  }\n\n  // ### `getObjects` returns all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getObjects(subject, predicate, graph) {\n    const results = [];\n    this.forObjects(o => { results.push(o); }, subject, predicate, graph);\n    return results;\n  }\n\n  // ### `forObjects` executes the callback on all objects that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forObjects(callback, subject, predicate, graph) {\n    const graphs = this._getGraphs(graph);\n    let content, subjectId, predicateId;\n    callback = this._uniqueEntities(callback);\n\n    // Translate IRIs to internal index keys.\n    if (subject   && !(subjectId   = this._termToNumericId(subject))   ||\n        predicate && !(predicateId = this._termToNumericId(predicate)))\n      return;\n\n    for (graph in graphs) {\n      // Only if the specified graph contains triples, there can be results\n      if (content = graphs[graph]) {\n        // Choose optimal index based on which fields are wildcards\n        if (subjectId) {\n          if (predicateId)\n            // If subject and predicate are given, the SPO index is best.\n            this._loopBy2Keys(content.subjects, subjectId, predicateId, callback);\n          else\n            // If only subject is given, the OSP index is best.\n            this._loopByKey1(content.objects, subjectId, callback);\n        }\n        else if (predicateId)\n          // If only predicate is given, the POS index is best.\n          this._loopByKey0(content.predicates, predicateId, callback);\n        else\n          // If no params given, iterate all the objects.\n          this._loop(content.objects, callback);\n      }\n    }\n  }\n\n  // ### `getGraphs` returns all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  getGraphs(subject, predicate, object) {\n    const results = [];\n    this.forGraphs(g => { results.push(g); }, subject, predicate, object);\n    return results;\n  }\n\n  // ### `forGraphs` executes the callback on all graphs that match the pattern.\n  // Setting any field to `undefined` or `null` indicates a wildcard.\n  forGraphs(callback, subject, predicate, object) {\n    for (const graph in this._graphs) {\n      this.some(quad => {\n        callback(quad.graph);\n        return true; // Halt iteration of some()\n      }, subject, predicate, object, this._termFromId(this._entities[graph]));\n    }\n  }\n\n  // ### `createBlankNode` creates a new blank node, returning its name\n  createBlankNode(suggestedName) {\n    return this._entityIndex.createBlankNode(suggestedName);\n  }\n\n  // ### `extractLists` finds and removes all list triples\n  // and returns the items per list.\n  extractLists({ remove = false, ignoreErrors = false } = {}) {\n    const lists = {}; // has scalar keys so could be a simple Object\n    const onError = ignoreErrors ? (() => true) :\n                  ((node, message) => { throw new Error(`${node.value} ${message}`); });\n\n    // Traverse each list from its tail\n    const tails = this.getQuads(null, namespaces.rdf.rest, namespaces.rdf.nil, null);\n    const toRemove = remove ? [...tails] : [];\n    tails.forEach(tailQuad => {\n      const items = [];             // the members found as objects of rdf:first quads\n      let malformed = false;      // signals whether the current list is malformed\n      let head;                   // the head of the list (_:b1 in above example)\n      let headPos;                // set to subject or object when head is set\n      const graph = tailQuad.graph; // make sure list is in exactly one graph\n\n      // Traverse the list from tail to end\n      let current = tailQuad.subject;\n      while (current && !malformed) {\n        const objectQuads = this.getQuads(null, null, current, null);\n        const subjectQuads = this.getQuads(current, null, null, null);\n        let quad, first = null, rest = null, parent = null;\n\n        // Find the first and rest of this list node\n        for (let i = 0; i < subjectQuads.length && !malformed; i++) {\n          quad = subjectQuads[i];\n          if (!quad.graph.equals(graph))\n            malformed = onError(current, 'not confined to single graph');\n          else if (head)\n            malformed = onError(current, 'has non-list arcs out');\n\n          // one rdf:first\n          else if (quad.predicate.value === namespaces.rdf.first) {\n            if (first)\n              malformed = onError(current, 'has multiple rdf:first arcs');\n            else\n              toRemove.push(first = quad);\n          }\n\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (rest)\n              malformed = onError(current, 'has multiple rdf:rest arcs');\n            else\n              toRemove.push(rest = quad);\n          }\n\n          // alien triple\n          else if (objectQuads.length)\n            malformed = onError(current, 'can\\'t be subject and object');\n          else {\n            head = quad; // e.g. { (1 2 3) :p :o }\n            headPos = 'subject';\n          }\n        }\n\n        // { :s :p (1 2) } arrives here with no head\n        // { (1 2) :p :o } arrives here with head set to the list.\n        for (let i = 0; i < objectQuads.length && !malformed; ++i) {\n          quad = objectQuads[i];\n          if (head)\n            malformed = onError(current, 'can\\'t have coreferences');\n          // one rdf:rest\n          else if (quad.predicate.value === namespaces.rdf.rest) {\n            if (parent)\n              malformed = onError(current, 'has incoming rdf:rest arcs');\n            else\n              parent = quad;\n          }\n          else {\n            head = quad; // e.g. { :s :p (1 2) }\n            headPos = 'object';\n          }\n        }\n\n        // Store the list item and continue with parent\n        if (!first)\n          malformed = onError(current, 'has no list head');\n        else\n          items.unshift(first.object);\n        current = parent && parent.subject;\n      }\n\n      // Don't remove any quads if the list is malformed\n      if (malformed)\n        remove = false;\n      // Store the list under the value of its head\n      else if (head)\n        lists[head[headPos].value] = items;\n    });\n\n    // Remove list quads if requested\n    if (remove)\n      this.removeQuads(toRemove);\n    return lists;\n  }\n\n  /**\n   * Returns `true` if the current dataset is a superset of the given dataset; in other words, returns `true` if\n   * the given dataset is a subset of, i.e., is contained within, the current dataset.\n   *\n   * Blank Nodes will be normalized.\n   */\n  addAll(quads) {\n    if (quads instanceof DatasetCoreAndReadableStream)\n      quads = quads.filtered;\n\n    if (Array.isArray(quads))\n      this.addQuads(quads);\n    else if (quads instanceof N3Store && quads._entityIndex === this._entityIndex) {\n      if (quads._size !== 0) {\n        this._graphs = merge(this._graphs, quads._graphs);\n        this._size = null; // Invalidate the cached size\n      }\n    }\n    else {\n      for (const quad of quads)\n        this.add(quad);\n    }\n    return this;\n  }\n\n  /**\n   * Returns `true` if the current dataset is a superset of the given dataset; in other words, returns `true` if\n   * the given dataset is a subset of, i.e., is contained within, the current dataset.\n   *\n   * Blank Nodes will be normalized.\n   */\n  contains(other) {\n    if (other instanceof DatasetCoreAndReadableStream)\n      other = other.filtered;\n\n    if (other === this)\n      return true;\n\n    if (!(other instanceof N3Store) || this._entityIndex !== other._entityIndex)\n      return other.every(quad => this.has(quad));\n\n    const g1 = this._graphs, g2 = other._graphs;\n    let s1, s2, p1, p2, o1;\n    for (const graph in g2) {\n      if (!(s1 = g1[graph])) return false;\n      s1 = s1.subjects;\n      for (const subject in (s2 = g2[graph].subjects)) {\n        if (!(p1 = s1[subject])) return false;\n        for (const predicate in (p2 = s2[subject])) {\n          if (!(o1 = p1[predicate])) return false;\n          for (const object in p2[predicate])\n            if (!(object in o1)) return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * This method removes the quads in the current dataset that match the given arguments.\n   *\n   * The logic described in {@link https://rdf.js.org/dataset-spec/#quad-matching|Quad Matching} is applied for each\n   * quad in this dataset, to select the quads which will be deleted.\n   *\n   * @param subject   The optional exact subject to match.\n   * @param predicate The optional exact predicate to match.\n   * @param object    The optional exact object to match.\n   * @param graph     The optional exact graph to match.\n   */\n  deleteMatches(subject, predicate, object, graph) {\n    for (const quad of this.match(subject, predicate, object, graph))\n      this.removeQuad(quad);\n    return this;\n  }\n\n  /**\n   * Returns a new dataset that contains all quads from the current dataset that are not included in the given dataset.\n   */\n  difference(other) {\n    if (other && other instanceof DatasetCoreAndReadableStream)\n      other = other.filtered;\n\n    if (other === this)\n      return new N3Store({ entityIndex: this._entityIndex });\n\n    if ((other instanceof N3Store) && other._entityIndex === this._entityIndex) {\n      const store = new N3Store({ entityIndex: this._entityIndex });\n      const graphs = difference(this._graphs, other._graphs);\n      if (graphs) {\n        store._graphs = graphs;\n        store._size = null;\n      }\n      return store;\n    }\n\n    return this.filter(quad => !other.has(quad));\n  }\n\n  /**\n   * Returns true if the current dataset contains the same graph structure as the given dataset.\n   *\n   * Blank Nodes will be normalized.\n   */\n  equals(other) {\n    if (other instanceof DatasetCoreAndReadableStream)\n      other = other.filtered;\n\n    return other === this || (this.size === other.size && this.contains(other));\n  }\n\n  /**\n   * Creates a new dataset with all the quads that pass the test implemented by the provided `iteratee`.\n   *\n   * This method is aligned with Array.prototype.filter() in ECMAScript-262.\n   */\n  filter(iteratee) {\n    const store = new N3Store({ entityIndex: this._entityIndex });\n    for (const quad of this)\n      if (iteratee(quad, this))\n        store.add(quad);\n    return store;\n  }\n\n  /**\n   * Returns a new dataset containing all quads from the current dataset that are also included in the given dataset.\n   */\n  intersection(other) {\n    if (other instanceof DatasetCoreAndReadableStream)\n      other = other.filtered;\n\n    if (other === this) {\n      const store = new N3Store({ entityIndex: this._entityIndex });\n      store._graphs = merge(Object.create(null), this._graphs);\n      store._size = this._size;\n      return store;\n    }\n    else if ((other instanceof N3Store) && this._entityIndex === other._entityIndex) {\n      const store = new N3Store({ entityIndex: this._entityIndex });\n      const graphs = intersect(other._graphs, this._graphs);\n      if (graphs) {\n        store._graphs = graphs;\n        store._size = null;\n      }\n      return store;\n    }\n\n    return this.filter(quad => other.has(quad));\n  }\n\n  /**\n   * Returns a new dataset containing all quads returned by applying `iteratee` to each quad in the current dataset.\n   */\n  map(iteratee) {\n    const store = new N3Store({ entityIndex: this._entityIndex });\n    for (const quad of this)\n      store.add(iteratee(quad, this));\n    return store;\n  }\n\n  /**\n   * This method calls the `iteratee` method on each `quad` of the `Dataset`. The first time the `iteratee` method\n   * is called, the `accumulator` value is the `initialValue`, or, if not given, equals the first quad of the `Dataset`.\n   * The return value of each call to the `iteratee` method is used as the `accumulator` value for the next call.\n   *\n   * This method returns the return value of the last `iteratee` call.\n   *\n   * This method is aligned with `Array.prototype.reduce()` in ECMAScript-262.\n   */\n  reduce(callback, initialValue) {\n    const iter = this.readQuads();\n    let accumulator = initialValue === undefined ? iter.next().value : initialValue;\n    for (const quad of iter)\n      accumulator = callback(accumulator, quad, this);\n    return accumulator;\n  }\n\n  /**\n   * Returns the set of quads within the dataset as a host-language-native sequence, for example an `Array` in\n   * ECMAScript-262.\n   *\n   * Since a `Dataset` is an unordered set, the order of the quads within the returned sequence is arbitrary.\n   */\n  toArray() {\n    return this.getQuads();\n  }\n\n  /**\n   * Returns an N-Quads string representation of the dataset, preprocessed with the\n   * {@link https://json-ld.github.io/normalization/spec/|RDF Dataset Normalization} algorithm.\n   */\n  toCanonical() {\n    throw new Error('not implemented');\n  }\n\n  /**\n   * Returns a stream that contains all quads of the dataset.\n   */\n  toStream() {\n    return this.match();\n  }\n\n  /**\n   * Returns an N-Quads string representation of the dataset.\n   *\n   * No prior normalization is required, therefore the results for the same quads may vary depending on the `Dataset`\n   * implementation.\n   */\n  toString() {\n    return (new N3Writer()).quadsToString(this);\n  }\n\n  /**\n   * Returns a new `Dataset` that is a concatenation of this dataset and the quads given as an argument.\n   */\n  union(quads) {\n    const store = new N3Store({ entityIndex: this._entityIndex });\n    store._graphs = merge(Object.create(null), this._graphs);\n    store._size = this._size;\n\n    store.addAll(quads);\n    return store;\n  }\n\n  // ### Store is an iterable.\n  // Can be used where iterables are expected: for...of loops, array spread operator,\n  // `yield*`, and destructuring assignment (order is not guaranteed).\n  *[Symbol.iterator]() {\n    yield* this.readQuads();\n  }\n}\n\n/**\n * Returns a subset of the `index` with that part of the index\n * matching the `ids` array. `ids` contains 3 elements that are\n * either numerical ids; or `null`.\n *\n * `false` is returned when there are no matching indices; this should\n * *not* be set as the value for an index.\n */\nfunction indexMatch(index, ids, depth = 0) {\n  const ind = ids[depth];\n  if (ind && !(ind in index))\n    return false;\n\n  let target = false;\n  for (const key in (ind ? { [ind]: index[ind] } : index)) {\n    const result = depth === 2 ? null : indexMatch(index[key], ids, depth + 1);\n\n    if (result !== false) {\n      target = target || Object.create(null);\n      target[key] = result;\n    }\n  }\n  return target;\n}\n\n/**\n * A class that implements both DatasetCore and Readable.\n */\nclass DatasetCoreAndReadableStream extends Readable {\n  constructor(n3Store, subject, predicate, object, graph, options) {\n    super({ objectMode: true });\n    Object.assign(this, { n3Store, subject, predicate, object, graph, options });\n  }\n\n  get filtered() {\n    if (!this._filtered) {\n      const { n3Store, graph, object, predicate, subject } = this;\n      const newStore = this._filtered = new N3Store({ factory: n3Store._factory, entityIndex: this.options.entityIndex });\n\n      let subjectId, predicateId, objectId;\n\n      // Translate IRIs to internal index keys.\n      if (subject   && !(subjectId   = newStore._termToNumericId(subject))   ||\n          predicate && !(predicateId = newStore._termToNumericId(predicate)) ||\n          object    && !(objectId    = newStore._termToNumericId(object)))\n        return newStore;\n\n      const graphs = n3Store._getGraphs(graph);\n      for (const graphKey in graphs) {\n        let subjects, predicates, objects;\n\n        if (!subjectId && predicateId) {\n          if (predicates = indexMatch(graphs[graphKey].predicates, [predicateId, objectId, subjectId])) {\n            subjects = indexMatch(graphs[graphKey].subjects, [subjectId, predicateId, objectId]);\n            objects = indexMatch(graphs[graphKey].objects, [objectId, subjectId, predicateId]);\n          }\n        }\n        else if (objectId) {\n          if (objects = indexMatch(graphs[graphKey].objects, [objectId, subjectId, predicateId])) {\n            subjects = indexMatch(graphs[graphKey].subjects, [subjectId, predicateId, objectId]);\n            predicates = indexMatch(graphs[graphKey].predicates, [predicateId, objectId, subjectId]);\n          }\n        }\n        else if (subjects = indexMatch(graphs[graphKey].subjects, [subjectId, predicateId, objectId])) {\n          predicates = indexMatch(graphs[graphKey].predicates, [predicateId, objectId, subjectId]);\n          objects = indexMatch(graphs[graphKey].objects, [objectId, subjectId, predicateId]);\n        }\n\n        if (subjects)\n          newStore._graphs[graphKey] = { subjects, predicates, objects };\n      }\n      newStore._size = null;\n    }\n    return this._filtered;\n  }\n\n  get size() {\n    return this.filtered.size;\n  }\n\n  _read(size) {\n    if (size > 0 && !this[ITERATOR])\n      this[ITERATOR] = this[Symbol.iterator]();\n    const iterable = this[ITERATOR];\n    while (--size >= 0) {\n      const { done, value } = iterable.next();\n      if (done) {\n        this.push(null);\n        return;\n      }\n      this.push(value);\n    }\n  }\n\n  addAll(quads) {\n    return this.filtered.addAll(quads);\n  }\n\n  contains(other) {\n    return this.filtered.contains(other);\n  }\n\n  deleteMatches(subject, predicate, object, graph) {\n    return this.filtered.deleteMatches(subject, predicate, object, graph);\n  }\n\n  difference(other) {\n    return this.filtered.difference(other);\n  }\n\n  equals(other) {\n    return this.filtered.equals(other);\n  }\n\n  every(callback, subject, predicate, object, graph) {\n    return this.filtered.every(callback, subject, predicate, object, graph);\n  }\n\n  filter(iteratee) {\n    return this.filtered.filter(iteratee);\n  }\n\n  forEach(callback, subject, predicate, object, graph) {\n    return this.filtered.forEach(callback, subject, predicate, object, graph);\n  }\n\n  import(stream) {\n    return this.filtered.import(stream);\n  }\n\n  intersection(other) {\n    return this.filtered.intersection(other);\n  }\n\n  map(iteratee) {\n    return this.filtered.map(iteratee);\n  }\n\n  some(callback, subject, predicate, object, graph) {\n    return this.filtered.some(callback, subject, predicate, object, graph);\n  }\n\n  toCanonical() {\n    return this.filtered.toCanonical();\n  }\n\n  toStream() {\n    return this._filtered ?\n      this._filtered.toStream()\n      : this.n3Store.match(this.subject, this.predicate, this.object, this.graph);\n  }\n\n  union(quads) {\n    return this._filtered ?\n      this._filtered.union(quads)\n      : this.n3Store.match(this.subject, this.predicate, this.object, this.graph).addAll(quads);\n  }\n\n  toArray() {\n    return this._filtered ? this._filtered.toArray() : this.n3Store.getQuads(this.subject, this.predicate, this.object, this.graph);\n  }\n\n  reduce(callback, initialValue) {\n    return this.filtered.reduce(callback, initialValue);\n  }\n\n  toString() {\n    return (new N3Writer()).quadsToString(this);\n  }\n\n  add(quad) {\n    return this.filtered.add(quad);\n  }\n\n  delete(quad) {\n    return this.filtered.delete(quad);\n  }\n\n  has(quad) {\n    return this.filtered.has(quad);\n  }\n\n  match(subject, predicate, object, graph) {\n    return new DatasetCoreAndReadableStream(this.filtered, subject, predicate, object, graph, this.options);\n  }\n\n  *[Symbol.iterator]() {\n    yield* this._filtered || this.n3Store.readQuads(this.subject, this.predicate, this.object, this.graph);\n  }\n}\n","import N3Store from './N3Store';\n\nexport default class N3DatasetCoreFactory {\n  dataset(quads) {\n    return new N3Store(quads);\n  }\n}\n","import DF from './N3DataFactory';\n\n/**\n * Gets rules from a dataset. This will only collect horn rules declared using log:implies.\n */\nexport function getRulesFromDataset(dataset) {\n  const rules = [];\n  for (const { subject, object } of dataset.match(null, DF.namedNode('http://www.w3.org/2000/10/swap/log#implies'), null, DF.defaultGraph())) {\n    const premise = [...dataset.match(null, null, null, subject)];\n    const conclusion = [...dataset.match(null, null, null, object)];\n    rules.push({ premise, conclusion });\n  }\n  return rules;\n}\n\nexport default class N3Reasoner {\n  constructor(store) {\n    this._store = store;\n  }\n\n  _add(subject, predicate, object, graphItem, cb) {\n    // Only add to the remaining indexes if there is not already a value in the index\n    if (!this._store._addToIndex(graphItem.subjects,   subject,   predicate, object)) return;\n    this._store._addToIndex(graphItem.predicates, predicate, object,    subject);\n    this._store._addToIndex(graphItem.objects,    object,    subject,   predicate);\n    cb();\n  }\n\n  // eslint-disable-next-line no-warning-comments\n  _evaluatePremise(rule, content, cb, i = 0) {\n    let v1, v2, value, index1, index2;\n    const [val0, val1, val2] = rule.premise[i].value, index = content[rule.premise[i].content];\n    const v0 = !(value = val0.value);\n    for (value in v0 ? index : { [value]: index[value] }) {\n      if (index1 = index[value]) {\n        if (v0) val0.value = Number(value);\n        v1 = !(value = val1.value);\n        for (value in v1 ? index1 : { [value]: index1[value] }) {\n          if (index2 = index1[value]) {\n            if (v1) val1.value = Number(value);\n            v2 = !(value = val2.value);\n            for (value in v2 ? index2 : { [value]: index2[value] }) {\n              if (v2) val2.value = Number(value);\n\n              if (i === rule.premise.length - 1)\n                rule.conclusion.forEach(c => {\n                  // eslint-disable-next-line max-nested-callbacks\n                  this._add(c.subject.value, c.predicate.value, c.object.value, content, () => { cb(c); });\n                });\n              else\n                this._evaluatePremise(rule, content, cb, i + 1);\n            }\n            if (v2) val2.value = null;\n          }\n        }\n        if (v1) val1.value = null;\n      }\n    }\n    if (v0) val0.value = null;\n  }\n\n  _evaluateRules(rules, content, cb) {\n    for (let i = 0; i < rules.length; i++) {\n      this._evaluatePremise(rules[i], content, cb);\n    }\n  }\n\n  // A naive reasoning algorithm where rules are just applied by repeatedly applying rules\n  // until no more evaluations are made\n  _reasonGraphNaive(rules, content) {\n    const newRules = [];\n\n    function addRule(conclusion) {\n      if (conclusion.next)\n        conclusion.next.forEach(rule => {\n          newRules.push([conclusion.subject.value, conclusion.predicate.value, conclusion.object.value, rule]);\n        });\n    }\n\n    // eslint-disable-next-line func-style\n    const addConclusions = conclusion => {\n      conclusion.forEach(c => {\n        // eslint-disable-next-line max-nested-callbacks\n        this._add(c.subject.value, c.predicate.value, c.object.value, content, () => { addRule(c); });\n      });\n    };\n\n    this._evaluateRules(rules, content, addRule);\n\n    let r;\n    while ((r = newRules.pop()) !== undefined) {\n      const [subject, predicate, object, rule] = r;\n      const v1 = rule.basePremise.subject.value;\n      if (!v1) rule.basePremise.subject.value = subject;\n      const v2 = rule.basePremise.predicate.value;\n      if (!v2) rule.basePremise.predicate.value = predicate;\n      const v3 = rule.basePremise.object.value;\n      if (!v3) rule.basePremise.object.value = object;\n\n      if (rule.premise.length === 0) {\n        addConclusions(rule.conclusion);\n      }\n      else {\n        this._evaluatePremise(rule, content, addRule);\n      }\n\n      if (!v1) rule.basePremise.subject.value = null;\n      if (!v2) rule.basePremise.predicate.value = null;\n      if (!v3) rule.basePremise.object.value = null;\n    }\n  }\n\n  _createRule({ premise, conclusion }) {\n    const varMapping = {};\n\n    const toId = value => value.termType === 'Variable' ?\n      // If the term is a variable, then create an empty object that values can be placed into\n      (varMapping[value.value] = varMapping[value.value] || {}) :\n      // If the term is not a variable, then set the ID value\n      { value: this._store._termToNewNumericId(value) };\n\n    // eslint-disable-next-line func-style\n    const t = term => ({ subject: toId(term.subject), predicate: toId(term.predicate), object: toId(term.object) });\n\n    return {\n      premise: premise.map(p => t(p)),\n      conclusion: conclusion.map(p => t(p)),\n      variables: Object.values(varMapping),\n    };\n  }\n\n  reason(rules) {\n    if (!Array.isArray(rules)) {\n      rules = getRulesFromDataset(rules);\n    }\n    rules = rules.map(rule => this._createRule(rule));\n\n    for (const r1 of rules) {\n      for (const r2 of rules) {\n        for (let i = 0; i < r2.premise.length; i++) {\n          const p = r2.premise[i];\n          for (const c of r1.conclusion) {\n            if (termEq(p.subject, c.subject) && termEq(p.predicate, c.predicate) && termEq(p.object, c.object)) {\n              const set = new Set();\n\n              const premise = [];\n\n              // Since these *will* be substituted when we apply the rule,\n              // we need to do this, so that we index correctly in the subsequent section\n              p.subject.value = p.subject.value || 1;\n              p.object.value = p.object.value || 1;\n              p.predicate.value = p.predicate.value || 1;\n\n              for (let j = 0; j < r2.premise.length; j++) {\n                if (j !== i) {\n                  premise.push(getIndex(r2.premise[j], set));\n                }\n              }\n\n              // eslint-disable-next-line no-warning-comments\n              // TODO: Create new rule, with new indexing\n              //       Future, 'collapse' the next statements when they share a premise/base-premise\n              (c.next = c.next || []).push({\n                premise,\n                conclusion: r2.conclusion,\n                // This is a single premise of the form { subject, predicate, object },\n                // which we can use to instantiate the rule using the new data that was emitted\n                basePremise: p,\n              });\n            }\n            r2.variables.forEach(v => { v.value = null; });\n          }\n        }\n      }\n    }\n\n    for (const rule of rules) {\n      const set = new Set();\n      rule.premise = rule.premise.map(p => getIndex(p, set));\n    }\n\n    const graphs = this._store._getGraphs();\n    for (const graphId in graphs) {\n      this._reasonGraphNaive(rules, graphs[graphId]);\n    }\n\n    this._store._size = null;\n  }\n}\n\nfunction getIndex({ subject, predicate, object }, set) {\n  const s = subject.value   || set.has(subject)   || (set.add(subject), false);\n  const p = predicate.value || set.has(predicate) || (set.add(predicate), false);\n  const o = object.value    || set.has(object)    || (set.add(object), false);\n\n  return (!s && p) ? { content: 'predicates', value: [predicate, object, subject] } :\n    o ? { content: 'objects', value: [object, subject, predicate] } :\n        { content: 'subjects', value: [subject, predicate, object] };\n}\n\nfunction termEq(t1, t2) {\n  if (t1.value === null) {\n    t1.value = t2.value;\n  }\n  return t1.value === t2.value;\n}\n","// **N3StreamWriter** serializes a quad stream into a text stream.\nimport { Transform } from 'readable-stream';\nimport N3Writer from './N3Writer';\n\n// ## Constructor\nexport default class N3StreamWriter extends Transform {\n  constructor(options) {\n    super({ encoding: 'utf8', writableObjectMode: true });\n\n    // Set up writer with a dummy stream object\n    const writer = this._writer = new N3Writer({\n      write: (quad, encoding, callback) => { this.push(quad); callback && callback(); },\n      end: callback => { this.push(null); callback && callback(); },\n    }, options);\n\n    // Implement Transform methods on top of writer\n    this._transform = (quad, encoding, done) => { writer.addQuad(quad, done); };\n    this._flush = done => { writer.end(done); };\n  }\n\n// ### Serializes a stream of quads\n  import(stream) {\n    stream.on('data',   quad => { this.write(quad); });\n    stream.on('end',    () => { this.end(); });\n    stream.on('error',  error => { this.emit('error', error); });\n    stream.on('prefix', (prefix, iri) => { this._writer.addPrefix(prefix, iri); });\n    return this;\n  }\n}\n","import Lexer from './N3Lexer';\nimport Parser from './N3Parser';\nimport Writer from './N3Writer';\nimport Store, { N3EntityIndex as EntityIndex } from './N3Store';\nimport StoreFactory from './N3StoreFactory';\nimport Reasoner, { getRulesFromDataset } from './N3Reasoner';\nimport StreamParser from './N3StreamParser';\nimport StreamWriter from './N3StreamWriter';\nimport * as Util from './N3Util';\n\nimport {\n  default as DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n} from './N3DataFactory';\n\n// Named exports\nexport {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StoreFactory,\n  EntityIndex,\n  StreamParser,\n  StreamWriter,\n  Util,\n  Reasoner,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n  getRulesFromDataset,\n};\n\n// Export all named exports as a default object for backward compatibility\nexport default {\n  Lexer,\n  Parser,\n  Writer,\n  Store,\n  StoreFactory,\n  EntityIndex,\n  StreamParser,\n  StreamWriter,\n  Util,\n  Reasoner,\n\n  DataFactory,\n\n  Term,\n  NamedNode,\n  Literal,\n  BlankNode,\n  Variable,\n  DefaultGraph,\n  Quad,\n  Triple,\n\n  termFromId,\n  termToId,\n};\n","const { finished, Readable } = require('readable-stream')\n\nfunction nextLoop () {\n  return new Promise(resolve => setTimeout(resolve, 0))\n}\n\nclass ReadableToReadable extends Readable {\n  constructor (input, { end = true, map, ...args } = {}) {\n    super({\n      read: ReadableToReadable.readFrom(input, { end, map }),\n      ...args\n    })\n  }\n\n  static readFrom (input, { end = true, map = v => v } = {}) {\n    let done = false\n\n    finished(input, () => {\n      done = true\n    })\n\n    const read = async function () {\n      while (true) {\n        const chunk = input.read()\n\n        if (!chunk) {\n          if (done && end) {\n            this.push(null)\n          }\n\n          if (done) {\n            return true\n          }\n\n          await nextLoop()\n        } else {\n          if (!this.push(map(chunk))) {\n            return false\n          }\n        }\n      }\n    }\n\n    return read\n  }\n}\n\nmodule.exports = ReadableToReadable\n"],"names":["ParserStream","Sink","Parser","constructor","options","super","module","exports","N3","rdf","finished","ReadableToReadable","input","baseIRI","factory","parser","StreamParser","objectMode","on","prefix","term","this","emit","err","destroy","end","pipe","DataFactory","BlankNode","id","value","nextId","equals","other","termType","prototype","DefaultGraph","fromTermRaw","Literal","NamedNode","Quad","Variable","namedNode","blankNode","literal","languageOrDatatype","indexOf","variable","defaultGraph","defaultGraphInstance","triple","subject","predicate","object","quad","graph","fromTerm","original","call","fromQuad","language","datatype","stringDatatype","langStringDatatype","iri","name","Error","Impl","import","output","Object","assign","readable","isNamedNode","isBlankNode","isLiteral","isVariable","isDefaultGraph","inDefaultGraph","prefixes","defaultPrefixes","create","processPrefix","cache","local","N3DataFactory","DEFAULTGRAPH","xsd","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","_outputStream","_endStream","undefined","chunk","encoding","done","_subject","test","format","_lineMode","_writeQuad","_writeQuadLine","_graph","_prefixIRIs","addPrefixes","_baseMatcher","RegExp","escapeRegex","endsWith","_baseLength","length","_inDefaultGraph","_write","string","callback","_encodeIriOrBlank","_predicate","_encodeObject","_encodePredicate","_encodeSubject","error","_prefixMatch","quadToString","quadsToString","quads","quadsString","entity","_encodeQuad","list","substr","replace","characterReplacer","prefixMatch","exec","_encodeLiteral","boolean","integer","decimal","double","type","_blockedWrite","addQuad","addQuads","i","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","child","children","contents","elements","Array","join","singleDone","result","character","charCodeAt","toString","regex","ITERATOR","Symbol","merge","target","source","depth","key","intersect","s1","s2","intersection","difference","diff","N3EntityIndex","_id","_ids","_entities","_blankNodeIndex","_factory","_termFromId","entities","terms","split","q","_termToNumericId","s","p","o","g","_termToNewNumericId","str","createBlankNode","suggestedName","index","N3Store","_size","_graphs","_entityIndex","entityIndex","bind","size","graphs","subjects","graphKey","subjectKey","predicateKey","keys","_addToIndex","index0","key0","key1","key2","index1","index2","existed","_removeFromIndex","_findInIndex","name0","name1","name2","graphId","tmp","entityKeys","parts","value0","value1","values","l","_loop","_loopByKey0","_loopByKey1","_loopBy2Keys","_countInIndex","count","_getGraphs","_uniqueEntities","uniqueIds","add","graphItem","predicates","objects","freeze","removeQuad","has","subjectOrQuad","readQuads","next","stream","removeQuads","remove","removeMatches","Readable","iterable","_read","push","deleteGraph","getQuads","content","subjectId","predicateId","objectId","match","DatasetCoreAndReadableStream","countQuads","forEach","some","every","getSubjects","results","forSubjects","getPredicates","forPredicates","getObjects","forObjects","getGraphs","forGraphs","extractLists","ignoreErrors","onError","node","message","tails","rest","nil","toRemove","tailQuad","items","head","headPos","malformed","current","objectQuads","subjectQuads","first","parent","unshift","addAll","filtered","isArray","contains","g1","g2","p1","p2","o1","deleteMatches","store","filter","iteratee","map","reduce","initialValue","iter","accumulator","toArray","toCanonical","toStream","union","iterator","indexMatch","ids","ind","n3Store","_filtered","newStore","delete","N3DatasetCoreFactory","dataset","getRulesFromDataset","rules","premise","conclusion","N3Reasoner","_store","_add","cb","_evaluatePremise","rule","v1","v2","val0","val1","val2","v0","Number","c","_evaluateRules","_reasonGraphNaive","newRules","addRule","addConclusions","r","pop","basePremise","v3","_createRule","varMapping","toId","t","variables","reason","r1","r2","termEq","set","Set","j","getIndex","v","t1","t2","N3StreamWriter","Transform","writableObjectMode","writer","_writer","_transform","_flush","Lexer","Writer","Store","StoreFactory","EntityIndex","StreamWriter","Util","Reasoner","Term","Triple","termFromId","termToId","nextLoop","Promise","resolve","setTimeout","args","read","readFrom","async"],"sourceRoot":""}