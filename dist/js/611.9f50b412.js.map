{"version":3,"file":"js/611.9f50b412.js","mappings":"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","sources":["webpack://rapid-triples/./node_modules/rdf-data-factory/index.js","webpack://rapid-triples/./node_modules/rdf-data-factory/lib/BlankNode.js","webpack://rapid-triples/./node_modules/rdf-data-factory/lib/DataFactory.js","webpack://rapid-triples/./node_modules/rdf-data-factory/lib/DefaultGraph.js","webpack://rapid-triples/./node_modules/rdf-data-factory/lib/Literal.js","webpack://rapid-triples/./node_modules/rdf-data-factory/lib/NamedNode.js","webpack://rapid-triples/./node_modules/rdf-data-factory/lib/Quad.js","webpack://rapid-triples/./node_modules/rdf-data-factory/lib/Variable.js","webpack://rapid-triples/./node_modules/rdfxml-streaming-parser/index.js","webpack://rapid-triples/./node_modules/rdfxml-streaming-parser/lib/ParseError.js","webpack://rapid-triples/./node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","webpack://rapid-triples/./node_modules/relative-to-absolute-iri/index.js","webpack://rapid-triples/./node_modules/relative-to-absolute-iri/lib/Resolve.js","webpack://rapid-triples/./node_modules/sax/lib/sax.js"],"sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/BlankNode\"), exports);\n__exportStar(require(\"./lib/DataFactory\"), exports);\n__exportStar(require(\"./lib/DefaultGraph\"), exports);\n__exportStar(require(\"./lib/Literal\"), exports);\n__exportStar(require(\"./lib/NamedNode\"), exports);\n__exportStar(require(\"./lib/Quad\"), exports);\n__exportStar(require(\"./lib/Variable\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BlankNode = void 0;\n/**\n * A term that represents an RDF blank node with a label.\n */\nclass BlankNode {\n    constructor(value) {\n        this.termType = 'BlankNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'BlankNode' && other.value === this.value;\n    }\n}\nexports.BlankNode = BlankNode;\n//# sourceMappingURL=BlankNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n//# sourceMappingURL=DataFactory.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DefaultGraph = void 0;\n/**\n * A singleton term instance that represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass DefaultGraph {\n    constructor() {\n        this.termType = 'DefaultGraph';\n        this.value = '';\n        // Private constructor\n    }\n    equals(other) {\n        return !!other && other.termType === 'DefaultGraph';\n    }\n}\nexports.DefaultGraph = DefaultGraph;\nDefaultGraph.INSTANCE = new DefaultGraph();\n//# sourceMappingURL=DefaultGraph.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Literal = void 0;\nconst NamedNode_1 = require(\"./NamedNode\");\n/**\n * A term that represents an RDF literal, containing a string with an optional language tag or datatype.\n */\nclass Literal {\n    constructor(value, languageOrDatatype) {\n        this.termType = 'Literal';\n        this.value = value;\n        if (typeof languageOrDatatype === 'string') {\n            this.language = languageOrDatatype;\n            this.datatype = Literal.RDF_LANGUAGE_STRING;\n        }\n        else if (languageOrDatatype) {\n            this.language = '';\n            this.datatype = languageOrDatatype;\n        }\n        else {\n            this.language = '';\n            this.datatype = Literal.XSD_STRING;\n        }\n    }\n    equals(other) {\n        return !!other && other.termType === 'Literal' && other.value === this.value &&\n            other.language === this.language && this.datatype.equals(other.datatype);\n    }\n}\nexports.Literal = Literal;\nLiteral.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');\nLiteral.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');\n//# sourceMappingURL=Literal.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NamedNode = void 0;\n/**\n * A term that contains an IRI.\n */\nclass NamedNode {\n    constructor(value) {\n        this.termType = 'NamedNode';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'NamedNode' && other.value === this.value;\n    }\n}\nexports.NamedNode = NamedNode;\n//# sourceMappingURL=NamedNode.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Quad = void 0;\n/**\n * An instance of DefaultGraph represents the default graph.\n * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.\n */\nclass Quad {\n    constructor(subject, predicate, object, graph) {\n        this.termType = 'Quad';\n        this.value = '';\n        this.subject = subject;\n        this.predicate = predicate;\n        this.object = object;\n        this.graph = graph;\n    }\n    equals(other) {\n        // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.\n        return !!other && (other.termType === 'Quad' || !other.termType) &&\n            this.subject.equals(other.subject) &&\n            this.predicate.equals(other.predicate) &&\n            this.object.equals(other.object) &&\n            this.graph.equals(other.graph);\n    }\n}\nexports.Quad = Quad;\n//# sourceMappingURL=Quad.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Variable = void 0;\n/**\n * A term that represents a variable.\n */\nclass Variable {\n    constructor(value) {\n        this.termType = 'Variable';\n        this.value = value;\n    }\n    equals(other) {\n        return !!other && other.termType === 'Variable' && other.value === this.value;\n    }\n}\nexports.Variable = Variable;\n//# sourceMappingURL=Variable.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/RdfXmlParser\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseError = void 0;\n/**\n * An error that includes line and column in the error message.\n */\nclass ParseError extends Error {\n    constructor(parser, message) {\n        const saxParser = parser.saxStream._parser;\n        super(parser.trackPosition ? `Line ${saxParser.line + 1} column ${saxParser.column + 1}: ${message}` : message);\n    }\n}\nexports.ParseError = ParseError;\n//# sourceMappingURL=ParseError.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParseType = exports.RdfXmlParser = void 0;\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst sax_1 = require(\"sax\");\nconst stream_1 = require(\"stream\");\nconst ParseError_1 = require(\"./ParseError\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nclass RdfXmlParser extends stream_1.Transform {\n    constructor(args) {\n        super({ readableObjectMode: true });\n        this.activeTagStack = [];\n        this.nodeIds = {};\n        if (args) {\n            Object.assign(this, args);\n            this.options = args;\n        }\n        if (!this.dataFactory) {\n            this.dataFactory = new rdf_data_factory_1.DataFactory();\n        }\n        if (!this.baseIRI) {\n            this.baseIRI = '';\n        }\n        if (!this.defaultGraph) {\n            this.defaultGraph = this.dataFactory.defaultGraph();\n        }\n        this.saxStream = sax_1.createStream(this.strict, { xmlns: false, position: this.trackPosition });\n        // Workaround for an issue in SAX where non-strict mode either lower- or upper-cases all tags.\n        if (!this.strict) {\n            this.saxStream._parser.looseCase = 'toString';\n        }\n        this.attachSaxListeners();\n    }\n    /**\n     * Parse the namespace of the given tag,\n     * and take into account the namespace of the parent tag that was already parsed.\n     * @param {Tag} tag A tag to parse the namespace from.\n     * @param {IActiveTag} parentTag The parent tag, or null if this tag is the root.\n     * @return {{[p: string]: string}[]} An array of namespaces,\n     *                                   where the last ones have a priority over the first ones.\n     */\n    static parseNamespace(tag, parentTag) {\n        const thisNs = {};\n        let hasNs = false;\n        for (const attributeKey in tag.attributes) {\n            if (attributeKey.startsWith('xmlns')) {\n                if (attributeKey.length === 5) {\n                    // Set default namespace\n                    hasNs = true;\n                    thisNs[''] = tag.attributes[attributeKey];\n                }\n                else if (attributeKey.charAt(5) === ':') {\n                    // Definition of a prefix\n                    hasNs = true;\n                    thisNs[attributeKey.substr(6)] = tag.attributes[attributeKey];\n                }\n            }\n        }\n        const parentNs = parentTag && parentTag.ns ? parentTag.ns : [RdfXmlParser.DEFAULT_NS];\n        return hasNs ? parentNs.concat([thisNs]) : parentNs;\n    }\n    /**\n     * Expand the given term value based on the given namespaces.\n     * @param {string} term A term value.\n     * @param {{[p: string]: string}[]} ns An array of namespaces,\n     *                                     where the last ones have a priority over the first ones.\n     * @param {RdfXmlParser} parser The RDF/XML parser instance.\n     * @return {IExpandedPrefix} An expanded prefix object.\n     */\n    static expandPrefixedTerm(term, ns, parser) {\n        const colonIndex = term.indexOf(':');\n        let prefix;\n        let local;\n        if (colonIndex >= 0) {\n            // Prefix is set\n            prefix = term.substr(0, colonIndex);\n            local = term.substr(colonIndex + 1);\n        }\n        else {\n            // Prefix is not set, fallback to default namespace\n            prefix = '';\n            local = term;\n        }\n        let uri = null;\n        let defaultNamespace = null;\n        for (let i = ns.length - 1; i >= 0; i--) {\n            const nsElement = ns[i][prefix];\n            if (nsElement) {\n                uri = nsElement;\n                break;\n            }\n            else if (!defaultNamespace) {\n                defaultNamespace = ns[i][''];\n            }\n        }\n        if (!uri) {\n            // Error on unbound prefix\n            if (prefix && prefix !== 'xmlns') {\n                throw new ParseError_1.ParseError(parser, `The prefix '${prefix}' in term '${term}' was not bound.`);\n            }\n            // Fallback to default namespace if no match was found\n            uri = defaultNamespace || '';\n        }\n        return { prefix, local, uri };\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return RdfXmlParser.IRI_REGEX.test(iri);\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new RdfXmlParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        try {\n            this.saxStream.write(chunk, encoding);\n        }\n        catch (e) {\n            return callback(e);\n        }\n        callback();\n    }\n    /**\n     * Create a new parse error instance.\n     * @param {string} message An error message.\n     * @return {Error} An error instance.\n     */\n    newParseError(message) {\n        return new ParseError_1.ParseError(this, message);\n    }\n    /**\n     * Convert the given value to a IRI by taking into account the baseIRI.\n     *\n     * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.\n     *\n     * @param {string} value The value to convert to an IRI.\n     * @param {IActiveTag} activeTag The active tag.\n     * @return {NamedNode} an IRI.\n     */\n    valueToUri(value, activeTag) {\n        return this.uriToNamedNode(relative_to_absolute_iri_1.resolve(value, activeTag.baseIRI));\n    }\n    /**\n     * Convert the given value URI string to a named node.\n     *\n     * This throw an error if the URI is invalid.\n     *\n     * @param {string} uri A URI string.\n     * @return {NamedNode} a named node.\n     */\n    uriToNamedNode(uri) {\n        // Validate URI\n        if (!RdfXmlParser.isValidIri(uri)) {\n            throw this.newParseError(`Invalid URI: ${uri}`);\n        }\n        return this.dataFactory.namedNode(uri);\n    }\n    /**\n     * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n     * If it is invalid, an error will thrown emitted.\n     * @param {string} value A value.\n     */\n    validateNcname(value) {\n        // Validate term as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n        if (!RdfXmlParser.NCNAME_MATCHER.test(value)) {\n            throw this.newParseError(`Not a valid NCName: ${value}`);\n        }\n    }\n    attachSaxListeners() {\n        this.saxStream.on('error', (error) => this.emit('error', error));\n        this.saxStream.on('opentag', this.onTag.bind(this));\n        this.saxStream.on('text', this.onText.bind(this));\n        this.saxStream.on('closetag', this.onCloseTag.bind(this));\n        this.saxStream.on('doctype', this.onDoctype.bind(this));\n    }\n    /**\n     * Handle the given tag.\n     * @param {QualifiedTag} tag A SAX tag.\n     */\n    onTag(tag) {\n        // Get parent tag\n        const parentTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        let currentParseType = ParseType.RESOURCE;\n        if (parentTag) {\n            parentTag.hadChildren = true;\n            currentParseType = parentTag.childrenParseType;\n        }\n        // Check if this tag needs to be converted to a string\n        if (parentTag && parentTag.childrenStringTags) {\n            // Convert this tag to a string\n            const tagName = tag.name;\n            let attributes = '';\n            for (const attributeKey in tag.attributes) {\n                attributes += ` ${attributeKey}=\"${tag.attributes[attributeKey]}\"`;\n            }\n            const tagContents = `${tagName}${attributes}`;\n            const tagString = `<${tagContents}>`;\n            parentTag.childrenStringTags.push(tagString);\n            // Inherit the array, so that deeper tags are appended to this same array\n            const stringActiveTag = { childrenStringTags: parentTag.childrenStringTags };\n            stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;\n            this.activeTagStack.push(stringActiveTag);\n            // Halt any further processing\n            return;\n        }\n        const activeTag = {};\n        if (parentTag) {\n            // Inherit language scope and baseIRI from parent\n            activeTag.language = parentTag.language;\n            activeTag.baseIRI = parentTag.baseIRI;\n        }\n        else {\n            activeTag.baseIRI = this.baseIRI;\n        }\n        this.activeTagStack.push(activeTag);\n        activeTag.ns = RdfXmlParser.parseNamespace(tag, parentTag);\n        if (currentParseType === ParseType.RESOURCE) {\n            this.onTagResource(tag, activeTag, parentTag, !parentTag);\n        }\n        else { // currentParseType === ParseType.PROPERTY\n            this.onTagProperty(tag, activeTag, parentTag);\n        }\n    }\n    /**\n     * Handle the given node element in resource-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     * @param {boolean} rootTag If we are currently processing the root tag.\n     */\n    onTagResource(tag, activeTag, parentTag, rootTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.PROPERTY;\n        // Assume that the current node is a _typed_ node (2.13), unless we find an rdf:Description as node name\n        let typedNode = true;\n        if (tagExpanded.uri === RdfXmlParser.RDF) {\n            // Check forbidden property element names\n            if (!rootTag && RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n                throw this.newParseError(`Illegal node element name: ${tagExpanded.local}`);\n            }\n            switch (tagExpanded.local) {\n                case 'RDF':\n                    // Tags under <rdf:RDF> must always be resources\n                    activeTag.childrenParseType = ParseType.RESOURCE;\n                case 'Description':\n                    typedNode = false;\n            }\n        }\n        const predicates = [];\n        const objects = [];\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubjectValue = null;\n        let claimSubjectNodeId = false;\n        let subjectValueBlank = false;\n        let explicitType = null;\n        for (const attributeKey in tag.attributes) {\n            const attributeValue = tag.attributes[attributeKey];\n            const attributeKeyExpanded = RdfXmlParser.expandPrefixedTerm(attributeKey, activeTag.ns, this);\n            if (parentTag && attributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (attributeKeyExpanded.local) {\n                    case 'about':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        activeSubjectValue = attributeValue;\n                        continue;\n                    case 'ID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = '#' + attributeValue;\n                        claimSubjectNodeId = true;\n                        continue;\n                    case 'nodeID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = attributeValue;\n                        subjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'type':\n                        // Emit the rdf:type later as named node instead of the default literal\n                        explicitType = attributeValue;\n                        continue;\n                    case 'aboutEach':\n                        throw this.newParseError(`rdf:aboutEach is not supported.`);\n                    case 'aboutEachPrefix':\n                        throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);\n                    case 'li':\n                        throw this.newParseError(`rdf:li on node elements are not supported.`);\n                }\n            }\n            else if (attributeKeyExpanded.uri === RdfXmlParser.XML) {\n                if (attributeKeyExpanded.local === 'lang') {\n                    activeTag.language = attributeValue === '' ? null : attributeValue.toLowerCase();\n                    continue;\n                }\n                else if (attributeKeyExpanded.local === 'base') {\n                    // SAX Parser does not expand xml:base, based on DOCTYPE, so we have to do it manually\n                    activeTag.baseIRI = relative_to_absolute_iri_1.resolve(attributeValue, activeTag.baseIRI);\n                    continue;\n                }\n            }\n            // Interpret attributes at this point as properties on this node,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (attributeKeyExpanded.prefix !== 'xml' && attributeKeyExpanded.uri) {\n                predicates.push(this.uriToNamedNode(attributeKeyExpanded.uri + attributeKeyExpanded.local));\n                objects.push(attributeValue);\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubjectValue !== null) {\n            activeTag.subject = subjectValueBlank\n                ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);\n            if (claimSubjectNodeId) {\n                this.claimNodeId(activeTag.subject);\n            }\n        }\n        // Force the creation of a subject if it doesn't exist yet\n        if (!activeTag.subject) {\n            activeTag.subject = this.dataFactory.blankNode();\n        }\n        // Emit the type if we're at a typed node\n        if (typedNode) {\n            const type = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n            this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), type, parentTag ? parentTag.reifiedStatementId : null);\n        }\n        if (parentTag) {\n            // If the parent tag defined a predicate, add the current tag as property value\n            if (parentTag.predicate) {\n                if (parentTag.childrenCollectionSubject) {\n                    // RDF:List-based properties\n                    const linkTerm = this.dataFactory.blankNode();\n                    // Emit <x> <p> <current-chain> OR <previous-chain> <rdf:rest> <current-chain>\n                    this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId);\n                    // Emit <current-chain> <rdf:first> value\n                    this.emitTriple(linkTerm, this.dataFactory.namedNode(RdfXmlParser.RDF + 'first'), activeTag.subject, activeTag.reifiedStatementId);\n                    // Store <current-chain> in the parent node\n                    parentTag.childrenCollectionSubject = linkTerm;\n                    parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(RdfXmlParser.RDF + 'rest');\n                }\n                else { // !parentTag.predicateEmitted\n                    // Set-based properties\n                    this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId);\n                    // Emit pending properties on the parent tag that had no defined subject yet.\n                    for (let i = 0; i < parentTag.predicateSubPredicates.length; i++) {\n                        this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i], parentTag.predicateSubObjects[i], null);\n                    }\n                    // Cleanup so we don't emit them again when the parent tag is closed\n                    parentTag.predicateSubPredicates = [];\n                    parentTag.predicateSubObjects = [];\n                    parentTag.predicateEmitted = true;\n                }\n            }\n            // Emit all collected triples\n            for (let i = 0; i < predicates.length; i++) {\n                const object = this.dataFactory.literal(objects[i], activeTag.datatype || activeTag.language);\n                this.emitTriple(activeTag.subject, predicates[i], object, parentTag.reifiedStatementId);\n            }\n            // Emit the rdf:type as named node instead of literal\n            if (explicitType) {\n                this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.uriToNamedNode(explicitType), null);\n            }\n        }\n    }\n    /**\n     * Handle the given property element in property-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     */\n    onTagProperty(tag, activeTag, parentTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.RESOURCE;\n        activeTag.subject = parentTag.subject; // Inherit parent subject\n        if (tagExpanded.uri === RdfXmlParser.RDF && tagExpanded.local === 'li') {\n            // Convert rdf:li to rdf:_x\n            if (!parentTag.listItemCounter) {\n                parentTag.listItemCounter = 1;\n            }\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + '_' + parentTag.listItemCounter++);\n        }\n        else {\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n        }\n        // Check forbidden property element names\n        if (tagExpanded.uri === RdfXmlParser.RDF\n            && RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n            throw this.newParseError(`Illegal property element name: ${tagExpanded.local}`);\n        }\n        activeTag.predicateSubPredicates = [];\n        activeTag.predicateSubObjects = [];\n        let parseType = false;\n        let attributedProperty = false;\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubSubjectValue = null;\n        let subSubjectValueBlank = true;\n        const predicates = [];\n        const objects = [];\n        for (const propertyAttributeKey in tag.attributes) {\n            const propertyAttributeValue = tag.attributes[propertyAttributeKey];\n            const propertyAttributeKeyExpanded = RdfXmlParser\n                .expandPrefixedTerm(propertyAttributeKey, activeTag.ns, this);\n            if (propertyAttributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (propertyAttributeKeyExpanded.local) {\n                    case 'resource':\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`Found both rdf:resource (${propertyAttributeValue}) and rdf:nodeID (${activeSubSubjectValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttributeValue})`);\n                        }\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = false;\n                        continue;\n                    case 'datatype':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttributeValue})`);\n                        }\n                        activeTag.datatype = this.valueToUri(propertyAttributeValue, activeTag);\n                        continue;\n                    case 'nodeID':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (activeTag.hadChildren) {\n                            throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttributeValue})`);\n                        }\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'parseType':\n                        // Validation\n                        if (attributedProperty) {\n                            throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);\n                        }\n                        if (activeTag.datatype) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);\n                        }\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);\n                        }\n                        if (propertyAttributeValue === 'Resource') {\n                            parseType = true;\n                            activeTag.childrenParseType = ParseType.PROPERTY;\n                            // Turn this property element into a node element\n                            const nestedBNode = this.dataFactory.blankNode();\n                            this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);\n                            activeTag.subject = nestedBNode;\n                            activeTag.predicate = null;\n                        }\n                        else if (propertyAttributeValue === 'Collection') {\n                            parseType = true;\n                            // Interpret children as being part of an rdf:List\n                            activeTag.hadChildren = true;\n                            activeTag.childrenCollectionSubject = activeTag.subject;\n                            activeTag.childrenCollectionPredicate = activeTag.predicate;\n                            subSubjectValueBlank = false;\n                        }\n                        else if (propertyAttributeValue === 'Literal') {\n                            parseType = true;\n                            // Interpret children as being part of a literal string\n                            activeTag.childrenTagsToString = true;\n                            activeTag.childrenStringTags = [];\n                        }\n                        continue;\n                    case 'ID':\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.reifiedStatementId = this.valueToUri('#' + propertyAttributeValue, activeTag);\n                        this.claimNodeId(activeTag.reifiedStatementId);\n                        continue;\n                }\n            }\n            else if (propertyAttributeKeyExpanded.uri === RdfXmlParser.XML\n                && propertyAttributeKeyExpanded.local === 'lang') {\n                activeTag.language = propertyAttributeValue === ''\n                    ? null : propertyAttributeValue.toLowerCase();\n                continue;\n            }\n            // Interpret attributes at this point as properties via implicit blank nodes on the property,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (propertyAttributeKeyExpanded.prefix !== 'xml' && propertyAttributeKeyExpanded.prefix !== 'xmlns'\n                && propertyAttributeKeyExpanded.uri) {\n                if (parseType || activeTag.datatype) {\n                    throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttributeValue}`);\n                }\n                activeTag.hadChildren = true;\n                attributedProperty = true;\n                predicates.push(this.uriToNamedNode(propertyAttributeKeyExpanded.uri + propertyAttributeKeyExpanded.local));\n                objects.push(this.dataFactory.literal(propertyAttributeValue, activeTag.datatype || activeTag.language));\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubSubjectValue !== null) {\n            const subjectParent = activeTag.subject;\n            activeTag.subject = subSubjectValueBlank\n                ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);\n            this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId);\n            // Emit our buffered triples\n            for (let i = 0; i < predicates.length; i++) {\n                this.emitTriple(activeTag.subject, predicates[i], objects[i], null);\n            }\n            activeTag.predicateEmitted = true;\n        }\n        else if (subSubjectValueBlank) {\n            // The current property element has no defined subject\n            // Let's buffer the properties until the child node defines a subject,\n            // or if the tag closes.\n            activeTag.predicateSubPredicates = predicates;\n            activeTag.predicateSubObjects = objects;\n            activeTag.predicateEmitted = false;\n        }\n    }\n    /**\n     * Emit the given triple to the stream.\n     * @param {Term} subject A subject term.\n     * @param {Term} predicate A predicate term.\n     * @param {Term} object An object term.\n     * @param {Term} statementId An optional resource that identifies the triple.\n     *                           If truthy, then the given triple will also be emitted reified.\n     */\n    emitTriple(subject, predicate, object, statementId) {\n        this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph));\n        // Reify triple\n        if (statementId) {\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.dataFactory.namedNode(RdfXmlParser.RDF + 'Statement'), this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'subject'), subject, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'predicate'), predicate, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'object'), object, this.defaultGraph));\n        }\n    }\n    /**\n     * Register the given term as a node ID.\n     * If one was already registered, this will emit an error.\n     *\n     * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.\n     * @param {Term} term An RDF term.\n     */\n    claimNodeId(term) {\n        if (!this.allowDuplicateRdfIds) {\n            if (this.nodeIds[term.value]) {\n                throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);\n            }\n            this.nodeIds[term.value] = true;\n        }\n    }\n    /**\n     * Handle the given text string.\n     * @param {string} text A parsed text string.\n     */\n    onText(text) {\n        const activeTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        if (activeTag) {\n            if (activeTag.childrenStringTags) {\n                activeTag.childrenStringTags.push(text);\n            }\n            else if (activeTag.predicate) {\n                activeTag.text = text;\n            }\n        }\n    }\n    /**\n     * Handle the closing of the last tag.\n     */\n    onCloseTag() {\n        const poppedTag = this.activeTagStack.pop();\n        // If we were converting a tag to a string, and the tag was not self-closing, close it here.\n        if (poppedTag.childrenStringEmitClosingTag) {\n            poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);\n        }\n        // Set the literal value if we were collecting XML tags to string\n        if (poppedTag.childrenTagsToString) {\n            poppedTag.datatype = this.dataFactory.namedNode(RdfXmlParser.RDF + 'XMLLiteral');\n            poppedTag.text = poppedTag.childrenStringTags.join('');\n            poppedTag.hadChildren = false; // Force a literal triple to be emitted hereafter\n        }\n        if (poppedTag.childrenCollectionSubject) {\n            // Terminate the rdf:List\n            this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(RdfXmlParser.RDF + 'nil'), poppedTag.reifiedStatementId);\n        }\n        else if (poppedTag.predicate) {\n            if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {\n                // Property element contains text\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || '', poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);\n            }\n            else if (!poppedTag.predicateEmitted) {\n                // Emit remaining properties on an anonymous property element\n                const subject = this.dataFactory.blankNode();\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);\n                for (let i = 0; i < poppedTag.predicateSubPredicates.length; i++) {\n                    this.emitTriple(subject, poppedTag.predicateSubPredicates[i], poppedTag.predicateSubObjects[i], null);\n                }\n            }\n        }\n    }\n    /**\n     * Fetch local DOCTYPE ENTITY's and make the parser recognise them.\n     * @param {string} doctype The read doctype.\n     */\n    onDoctype(doctype) {\n        doctype.replace(/<!ENTITY\\s+([^\\s]+)\\s+[\"']([^\"']+)[\"']\\s*>/g, (match, prefix, uri) => {\n            this.saxStream._parser.ENTITIES[prefix] = uri;\n            return '';\n        });\n    }\n}\nexports.RdfXmlParser = RdfXmlParser;\n// Regex for valid IRIs\nRdfXmlParser.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*):[^ \"<>{}|\\\\\\[\\]`]*$/;\nRdfXmlParser.MIME_TYPE = 'application/rdf+xml';\nRdfXmlParser.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nRdfXmlParser.XML = 'http://www.w3.org/XML/1998/namespace';\nRdfXmlParser.XMLNS = 'http://www.w3.org/2000/xmlns/';\nRdfXmlParser.DEFAULT_NS = {\n    xml: RdfXmlParser.XML,\n};\nRdfXmlParser.FORBIDDEN_NODE_ELEMENTS = [\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'li',\n    'aboutEach',\n    'aboutEachPrefix',\n];\nRdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS = [\n    'Description',\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'aboutEach',\n    'aboutEachPrefix',\n];\n// tslint:disable-next-line:max-line-length\nRdfXmlParser.NCNAME_MATCHER = /^([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_])([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_\\-.0-9#xB7\\u{0300}-\\u{036F}\\u{203F}-\\u{2040}])*$/u;\nvar ParseType;\n(function (ParseType) {\n    ParseType[ParseType[\"RESOURCE\"] = 0] = \"RESOURCE\";\n    ParseType[ParseType[\"PROPERTY\"] = 1] = \"PROPERTY\";\n})(ParseType = exports.ParseType || (exports.ParseType = {}));\n//# sourceMappingURL=RdfXmlParser.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./lib/Resolve\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeDotSegmentsOfPath = exports.removeDotSegments = exports.resolve = void 0;\n/**\n * Convert the given relative IRI to an absolute IRI\n * by taking into account the given optional baseIRI.\n *\n * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.\n * @param {string} baseIRI The optional base IRI.\n * @return {string} an absolute IRI.\n */\nfunction resolve(relativeIRI, baseIRI) {\n    baseIRI = baseIRI || '';\n    const baseFragmentPos = baseIRI.indexOf('#');\n    // Ignore any fragments in the base IRI\n    if (baseFragmentPos > 0) {\n        baseIRI = baseIRI.substr(0, baseFragmentPos);\n    }\n    // Convert empty value directly to base IRI\n    if (!relativeIRI.length) {\n        // At this point, the baseIRI MUST be absolute, otherwise we error\n        if (baseIRI.indexOf(':') < 0) {\n            throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n        }\n        return baseIRI;\n    }\n    // If the value starts with a query character, concat directly (but strip the existing query)\n    if (relativeIRI.startsWith('?')) {\n        const baseQueryPos = baseIRI.indexOf('?');\n        if (baseQueryPos > 0) {\n            baseIRI = baseIRI.substr(0, baseQueryPos);\n        }\n        return baseIRI + relativeIRI;\n    }\n    // If the value starts with a fragment character, concat directly\n    if (relativeIRI.startsWith('#')) {\n        return baseIRI + relativeIRI;\n    }\n    // Ignore baseIRI if it is empty\n    if (!baseIRI.length) {\n        const relativeColonPos = relativeIRI.indexOf(':');\n        if (relativeColonPos < 0) {\n            throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);\n        }\n        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);\n    }\n    // Ignore baseIRI if the value is absolute\n    const valueColonPos = relativeIRI.indexOf(':');\n    if (valueColonPos >= 0) {\n        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // At this point, the baseIRI MUST be absolute, otherwise we error\n    const baseColonPos = baseIRI.indexOf(':');\n    if (baseColonPos < 0) {\n        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n    }\n    const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);\n    // Inherit the baseIRI scheme if the value starts with '//'\n    if (relativeIRI.indexOf('//') === 0) {\n        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.\n    let baseSlashAfterColonPos;\n    if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {\n        // If there is no additional '/' after the '//'.\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);\n        if (baseSlashAfterColonPos < 0) {\n            // If something other than a '/' follows the '://', append the value after a '/',\n            // otherwise, prefix the value with only the baseIRI scheme.\n            if (baseIRI.length > baseColonPos + 3) {\n                return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n            else {\n                return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n        }\n    }\n    else {\n        // If there is not even a single '/' after the ':'\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);\n        if (baseSlashAfterColonPos < 0) {\n            // If we don't have a '/' after the ':',\n            // prefix the value with only the baseIRI scheme.\n            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n        }\n    }\n    // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.\n    if (relativeIRI.indexOf('/') === 0) {\n        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);\n    }\n    let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);\n    const baseIRILastSlashPos = baseIRIPath.lastIndexOf('/');\n    // Ignore everything after the last '/' in the baseIRI path\n    if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {\n        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);\n        // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')\n        // This change is only allowed if there is something else following the path\n        if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {\n            relativeIRI = relativeIRI.substr(1);\n        }\n    }\n    // Prefix the value with the baseIRI path where\n    relativeIRI = baseIRIPath + relativeIRI;\n    // Remove dot segment from the IRI\n    relativeIRI = removeDotSegments(relativeIRI);\n    // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.\n    return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;\n}\nexports.resolve = resolve;\n/**\n * Remove dot segments from the given path,\n * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).\n * @param {string} path An IRI path.\n * @return {string} A path, will always start with a '/'.\n */\nfunction removeDotSegments(path) {\n    // Prepare a buffer with segments between each '/.\n    // Each segment represents an array of characters.\n    const segmentBuffers = [];\n    let i = 0;\n    while (i < path.length) {\n        // Remove '/.' or '/..'\n        switch (path[i]) {\n            case '/':\n                if (path[i + 1] === '.') {\n                    if (path[i + 2] === '.') {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Go to parent directory,\n                        // so we remove a parent segment\n                        segmentBuffers.pop();\n                        // Ensure that we end with a slash if there is a trailing '/..'\n                        if (!path[i + 3]) {\n                            segmentBuffers.push([]);\n                        }\n                        i += 3;\n                    }\n                    else {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Ensure that we end with a slash if there is a trailing '/.'\n                        if (!path[i + 2]) {\n                            segmentBuffers.push([]);\n                        }\n                        // Go to the current directory,\n                        // so we do nothing\n                        i += 2;\n                    }\n                }\n                else {\n                    // Start a new segment\n                    segmentBuffers.push([]);\n                    i++;\n                }\n                break;\n            case '#':\n            case '?':\n                // Query and fragment string should be appended unchanged\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n                // Break the while loop\n                i = path.length;\n                break;\n            default:\n                // Not a special character, just append it to our buffer\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path[i]);\n                i++;\n                break;\n        }\n    }\n    return '/' + segmentBuffers.map((buffer) => buffer.join('')).join('/');\n}\nexports.removeDotSegments = removeDotSegments;\n/**\n * Removes dot segments of the given IRI.\n * @param {string} iri An IRI (or part of IRI).\n * @param {number} colonPosition The position of the first ':' in the IRI.\n * @return {string} The IRI where dot segments were removed.\n */\nfunction removeDotSegmentsOfPath(iri, colonPosition) {\n    // Determine where we should start looking for the first '/' that indicates the start of the path\n    let searchOffset = colonPosition + 1;\n    if (colonPosition >= 0) {\n        if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {\n            searchOffset = colonPosition + 3;\n        }\n    }\n    else {\n        if (iri[0] === '/' && iri[1] === '/') {\n            searchOffset = 2;\n        }\n    }\n    // Determine the path\n    const pathSeparator = iri.indexOf('/', searchOffset);\n    if (pathSeparator < 0) {\n        return iri;\n    }\n    const base = iri.substr(0, pathSeparator);\n    const path = iri.substr(pathSeparator);\n    // Remove dot segments from the path\n    return base + removeDotSegments(path);\n}\nexports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;\nfunction isCharacterAllowedAfterRelativePathSegment(character) {\n    return !character || character === '#' || character === '?' || character === '/';\n}\n//# sourceMappingURL=Resolve.js.map",";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // disallow unquoted attribute values if not otherwise configured\n    // and strict mode is true\n    if (parser.opt.unquotedAttributeValues === undefined) {\n      parser.opt.unquotedAttributeValues = !strict;\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n  if (!Stream) Stream = function () {}\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040.\\d-]/\n\n  function isWhitespace (c) {\n    return c === ' ' || c === '\\n' || c === '\\r' || c === '\\t'\n  }\n\n  function isQuote (c) {\n    return c === '\"' || c === '\\''\n  }\n\n  function isAttribEnd (c) {\n    return c === '>' || isWhitespace(c)\n  }\n\n  function isMatch (regex, c) {\n    return regex.test(c)\n  }\n\n  function notMatch (regex, c) {\n    return !isMatch(regex, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (isNaN(num) || numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (!isWhitespace(c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n\n      if (!c) {\n        break\n      }\n\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (!isWhitespace(c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (isWhitespace(c)) {\n            // wait for it...\n          } else if (isMatch(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n            continue;\n          }\n\n          if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {\n            parser.state = S.DOCTYPE_DTD\n            parser.doctype += '<!' + parser.sgmlDecl + c\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (isQuote(c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (isQuote(c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          if (c === ']') {\n            parser.doctype += c\n            parser.state = S.DOCTYPE\n          } else if (c === '<') {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else if (isQuote(c)) {\n            parser.doctype += c\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          } else {\n            parser.doctype += c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else if (parser.doctype && parser.doctype !== true) {\n            parser.state = S.DOCTYPE_DTD\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (isWhitespace(c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && isWhitespace(c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (!isWhitespace(c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (isWhitespace(c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (isWhitespace(c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (isMatch(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (isWhitespace(c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (isMatch(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (isWhitespace(c)) {\n            continue\n          } else if (isQuote(c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            if (!parser.opt.unquotedAttributeValues) {\n              error(parser, 'Unquoted attribute value')\n            }\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (isWhitespace(c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (isMatch(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (!isAttribEnd(c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (isWhitespace(c)) {\n              continue\n            } else if (notMatch(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (isMatch(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (!isWhitespace(c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (isWhitespace(c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            var parsedEntity = parseEntity(parser)\n            if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {\n              parser.entity = ''\n              parser.state = returnState\n              parser.write(parsedEntity)\n            } else {\n              parser[buffer] += parsedEntity\n              parser.entity = ''\n              parser.state = returnState\n            }\n          } else if (isMatch(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default: /* istanbul ignore next */ {\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n        }\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  /* istanbul ignore next */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","exports","p","prototype","hasOwnProperty","call","value","BlankNode","constructor","termType","equals","other","DataFactory","BlankNode_1","DefaultGraph_1","Literal_1","NamedNode_1","Quad_1","Variable_1","dataFactoryCounter","options","blankNodeCounter","blankNodePrefix","namedNode","NamedNode","blankNode","literal","languageOrDatatype","Literal","variable","Variable","defaultGraph","DefaultGraph","INSTANCE","quad","subject","predicate","object","graph","Quad","fromTerm","original","language","datatype","XSD_STRING","fromQuad","resetBlankNodeCounter","RDF_LANGUAGE_STRING","ParseError","Error","parser","message","saxParser","saxStream","_parser","super","trackPosition","line","column","ParseType","RdfXmlParser","relative_to_absolute_iri_1","sax_1","stream_1","ParseError_1","rdf_data_factory_1","Transform","args","readableObjectMode","activeTagStack","nodeIds","assign","dataFactory","baseIRI","createStream","strict","xmlns","position","looseCase","attachSaxListeners","parseNamespace","tag","parentTag","thisNs","hasNs","attributeKey","attributes","startsWith","length","charAt","substr","parentNs","ns","DEFAULT_NS","concat","expandPrefixedTerm","term","colonIndex","indexOf","prefix","local","uri","defaultNamespace","i","nsElement","isValidIri","iri","IRI_REGEX","test","import","stream","output","PassThrough","on","error","parsed","emit","data","push","pipe","_transform","chunk","encoding","callback","write","e","newParseError","valueToUri","activeTag","uriToNamedNode","resolve","validateNcname","NCNAME_MATCHER","onTag","bind","onText","onCloseTag","onDoctype","currentParseType","RESOURCE","hadChildren","childrenParseType","childrenStringTags","tagName","name","tagContents","tagString","stringActiveTag","childrenStringEmitClosingTag","onTagResource","onTagProperty","rootTag","tagExpanded","PROPERTY","typedNode","RDF","FORBIDDEN_NODE_ELEMENTS","predicates","objects","activeSubjectValue","claimSubjectNodeId","subjectValueBlank","explicitType","attributeValue","attributeKeyExpanded","XML","toLowerCase","claimNodeId","type","emitTriple","reifiedStatementId","childrenCollectionSubject","linkTerm","childrenCollectionPredicate","predicateSubPredicates","predicateSubObjects","predicateEmitted","listItemCounter","FORBIDDEN_PROPERTY_ELEMENTS","parseType","attributedProperty","activeSubSubjectValue","subSubjectValueBlank","propertyAttributeKey","propertyAttributeValue","propertyAttributeKeyExpanded","nestedBNode","childrenTagsToString","subjectParent","statementId","allowDuplicateRdfIds","text","poppedTag","pop","join","doctype","replace","match","ENTITIES","MIME_TYPE","XMLNS","xml","relativeIRI","baseFragmentPos","baseQueryPos","relativeColonPos","removeDotSegmentsOfPath","valueColonPos","baseColonPos","baseIRIScheme","baseSlashAfterColonPos","removeDotSegments","baseIRIPath","baseIRILastSlashPos","lastIndexOf","path","segmentBuffers","isCharacterAllowedAfterRelativePathSegment","map","buffer","colonPosition","searchOffset","pathSeparator","base","character","sax","opt","SAXParser","SAXStream","MAX_BUFFER_LENGTH","Stream","buffers","clearBuffers","q","c","bufferCheckPosition","lowercase","lowercasetags","tags","closed","closedRoot","sawRoot","noscript","state","S","BEGIN","strictEntities","XML_ENTITIES","attribList","rootNS","unquotedAttributeValues","checkBufferLength","maxAllowed","Math","max","maxActual","l","len","closeText","emitNode","cdata","script","flushBuffers","EVENTS","F","newf","keys","a","end","resume","close","flush","ex","streamWraps","filter","ev","apply","writable","readable","me","onend","onerror","er","_decoder","forEach","set","h","removeAllListeners","configurable","Buffer","isBuffer","SD","toString","handler","arguments","Array","splice","CDATA","DOCTYPE","XML_NAMESPACE","XMLNS_NAMESPACE","nameStart","nameBody","entityStart","entityBody","isWhitespace","isQuote","isAttribEnd","isMatch","regex","notMatch","s","STATE","BEGIN_WHITESPACE","TEXT","TEXT_ENTITY","OPEN_WAKA","SGML_DECL","SGML_DECL_QUOTED","DOCTYPE_QUOTED","DOCTYPE_DTD","DOCTYPE_DTD_QUOTED","COMMENT_STARTING","COMMENT","COMMENT_ENDING","COMMENT_ENDED","CDATA_ENDING","CDATA_ENDING_2","PROC_INST","PROC_INST_BODY","PROC_INST_ENDING","OPEN_TAG","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG","CLOSE_TAG_SAW_WHITE","SCRIPT","SCRIPT_ENDING","key","String","fromCharCode","event","nodeType","textNode","textopts","trim","normalize","strictFail","newTag","parent","qname","attribute","qualName","split","attrib","attribName","attribValue","qn","openTag","selfClosing","JSON","stringify","nv","isSelfClosing","closeTag","t","closeTo","x","n","parseEntity","num","entity","entityLC","numStr","slice","parseInt","isNaN","fromCodePoint","beginWhiteSpace","startTagPosition","result","starti","substring","sgmlDecl","procInstName","procInstBody","pad","comment","toUpperCase","body","returnState","parsedEntity","unparsedEntities","values","includes","stringFromCharCode","floor","highSurrogate","lowSurrogate","MAX_SIZE","codeUnits","index","codePoint","Number","isFinite","RangeError"],"sourceRoot":""}