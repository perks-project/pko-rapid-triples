{"version":3,"file":"js/43.b7a6d6c1.js","mappings":"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","sources":["webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/to-ntriples/lib/blankNode.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/to-ntriples/lib/dataset.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/to-ntriples/lib/defaultGraph.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/to-ntriples/lib/namedNode.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/to-ntriples/lib/literal.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/to-ntriples/lib/quad.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/to-ntriples/lib/variable.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/to-ntriples/index.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/serializer-ntriples/lib/SerializerStream.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/serializer-ntriples/index.js","webpack://mobilitydcatap-ui/./node_modules/@zazuko/formats-lazy/node_modules/@rdfjs/sink/index.js","webpack://mobilitydcatap-ui/./node_modules/duplex-to/readable.js"],"sourcesContent":["function blankNode (blankNode) {\n  return '_:' + blankNode.value // TODO: escape special chars\n}\n\nexport default blankNode\n","function dataset (dataset, toNT) {\n  return [...dataset].map(quad => toNT(quad)).join('\\n') + '\\n'\n}\n\nexport default dataset\n","function defaultGraph () {\n  return ''\n}\n\nexport default defaultGraph\n","function namedNode (namedNode) {\n  return '<' + namedNode.value + '>'\n}\n\nexport default namedNode\n","import namedNode from './namedNode.js'\n\nconst echarRegEx = /[\"\\\\\\\\\\n\\r]/\nconst echarRegExAll = /[\"\\\\\\\\\\n\\r]/g\n\nconst echarReplacement = {\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r'\n}\n\nfunction echarReplacer (char) {\n  return echarReplacement[char]\n}\n\nfunction escapeValue (value) {\n  if (echarRegEx.test(value)) {\n    return value.replace(echarRegExAll, echarReplacer)\n  }\n\n  return value\n}\n\nfunction literal (literal) {\n  const escapedValue = escapeValue(literal.value)\n\n  if (literal.datatype.value === 'http://www.w3.org/2001/XMLSchema#string') {\n    return '\"' + escapedValue + '\"'\n  }\n\n  if (literal.datatype.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#langString') {\n    return '\"' + escapedValue + '\"@' + literal.language\n  }\n\n  return '\"' + escapedValue + '\"^^' + namedNode(literal.datatype)\n}\n\nexport default literal\n","function quad (quad, toNT) {\n  const subjectString = toNT(quad.subject)\n  const predicateString = toNT(quad.predicate)\n  const objectString = toNT(quad.object)\n  const graphString = toNT(quad.graph)\n\n  return `${subjectString} ${predicateString} ${objectString} ${graphString ? graphString + ' ' : ''}.`\n}\n\nexport default quad\n","function variable (variable) {\n  return '?' + variable.value\n}\n\nexport default variable\n","import blankNode from './lib/blankNode.js'\nimport dataset from './lib/dataset.js'\nimport defaultGraph from './lib/defaultGraph.js'\nimport literal from './lib/literal.js'\nimport namedNode from './lib/namedNode.js'\nimport quad from './lib/quad.js'\nimport variable from './lib/variable.js'\n\nfunction toNT (term) {\n  if (!term) {\n    return null\n  }\n\n  if (term.termType === 'BlankNode') {\n    return blankNode(term)\n  }\n\n  if (term.termType === 'DefaultGraph') {\n    return defaultGraph()\n  }\n\n  if (term.termType === 'Literal') {\n    return literal(term)\n  }\n\n  if (term.termType === 'NamedNode') {\n    return namedNode(term)\n  }\n\n  // legacy quad support without .termType\n  if (term.termType === 'Quad' || (term.subject && term.predicate && term.object && term.graph)) {\n    return quad(term, toNT)\n  }\n\n  if (term.termType === 'Variable') {\n    return variable(term)\n  }\n\n  if (term[Symbol.iterator]) {\n    return dataset(term, toNT)\n  }\n\n  throw new Error(`unknown termType ${term.termType}`)\n}\n\nexport default toNT\n","import toNT from '@rdfjs/to-ntriples'\nimport toReadable from 'duplex-to/readable.js'\nimport { Transform } from 'readable-stream'\n\nclass SerializerStream {\n  constructor (input) {\n    const stream = new Transform({\n      objectMode: true,\n      transform: (quad, encoding, callback) => {\n        callback(null, `${toNT(quad)}\\n`)\n      }\n    })\n\n    input.pipe(stream)\n\n    return toReadable(stream)\n  }\n}\n\nexport default SerializerStream\n","import Sink from '@rdfjs/sink'\nimport SerializerStream from './lib/SerializerStream.js'\n\nclass Serializer extends Sink {\n  constructor () {\n    super(SerializerStream)\n  }\n}\n\nexport default Serializer\n","class Sink {\n  constructor (Impl, options) {\n    this.Impl = Impl\n    this.options = options\n  }\n\n  import (input, options) {\n    const output = new this.Impl(input, { ...this.options, ...options })\n\n    input.on('end', () => {\n      if (!output.readable) {\n        output.emit('end')\n      }\n    })\n\n    input.on('error', err => {\n      output.emit('error', err)\n    })\n\n    return output\n  }\n}\n\nexport default Sink\n","const blackList = new Set(['_write', '_writableState', 'writable'])\n\nfunction readable (duplex) {\n  return new Proxy(duplex, {\n    has (target, key) {\n      if (blackList.has(key)) {\n        return false\n      }\n\n      return Reflect.has(...arguments)\n    },\n    get (target, key) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      const result = Reflect.get(...arguments)\n\n      if (result && typeof result.bind === 'function') {\n        return result.bind(target)\n      }\n\n      return result\n    },\n    set (target, key, value) {\n      if (blackList.has(key)) {\n        return undefined\n      }\n\n      return Reflect.set(...arguments)\n    }\n  })\n}\n\nexport default readable\n"],"names":["blankNode","value","dataset","toNT","map","quad","join","defaultGraph","namedNode","echarRegEx","echarRegExAll","echarReplacement","echarReplacer","char","escapeValue","test","replace","literal","escapedValue","datatype","language","subjectString","subject","predicateString","predicate","objectString","object","graphString","graph","variable","term","termType","Symbol","iterator","Error","SerializerStream","constructor","input","stream","Transform","objectMode","transform","encoding","callback","pipe","Serializer","super","Sink","Impl","options","this","import","output","on","readable","emit","err","blackList","Set","duplex","Proxy","has","target","key","Reflect","arguments","get","result","bind","set"],"sourceRoot":""}